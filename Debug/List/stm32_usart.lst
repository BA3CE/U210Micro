###############################################################################
#                                                                             #
#                                                       16/Jun/2009  22:57:24 #
# IAR ANSI C/C++ Compiler V5.30.2.31295/W32 KICKSTART for ARM                 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Boards\Uart\STM32\stm32_usart.c                       #
#    Command line =  "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\Boards\Uart\STM32\stm32_usart.c" -D                   #
#                    _DLIB_FILE_DESCRIPTOR -lC "F:\MyProjects\Tjinc\CAN &     #
#                    Uart over IP\Debug\List\" -o "F:\MyProjects\Tjinc\CAN &  #
#                    Uart over IP\Debug\Obj\" --no_unroll --no_inline         #
#                    --no_tbaa --no_scheduling --debug --endian=little        #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench 5.4                 #
#                    Kickstart\arm\INC\DLib_Config_Normal.h" -I               #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\Boards\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\uCOS-II\Source\" -I "F:\MyProjects\Tjinc\CAN & Uart   #
#                    over IP\uCOS-II\Ports\arm-cortex-m3\Generic\IAR\" -I     #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\uC-CPU\ARM-Cortex-M3\IAR\" -I                         #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\uC-CPU\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\uC-LIB\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\FWLib\library\inc\" -I "F:\MyProjects\Tjinc\CAN &     #
#                    Uart over IP\Boards\BSP\" -I "F:\MyProjects\Tjinc\CAN &  #
#                    Uart over IP\Interrupt\" -I "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4 Kickstart\arm\INC\" -Om   #
#    List file    =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Debug\List\stm32_usart.lst                            #
#    Object file  =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Debug\Obj\stm32_usart.o                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\MyProjects\Tjinc\CAN & Uart over IP\Boards\Uart\STM32\stm32_usart.c
      1          /* Includes ------------------------------------------------------------------*/
      2          #include <stdio.h>
      3          #include <string.h>
      4          
      5          #include "bsp.h"

   \                                 In section .text, align 2
   \   __??Code16?? __intrinsic __code __interwork int atoi(char const *)
   \                     atoi:
   \   00000000   0A22               MOVS     R2,#+10
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   ........           B.W      __iar_Stoul
      6          #include "stm32f10x_it.h"
      7          #include "stm32f10x_lib.h"
      8          #include "uart/usart_Inter.h"
      9          #include "NetWork/util/sockutil.h"
     10          #include "eeprom/at24c64.h"
     11          
     12          /* Extern variables ------------------------------------------------------------*/
     13          extern  OS_EVENT  *UartMsgQ;
     14          /* Private define ------------------------------------------------------------*/
     15          #define RxBufferSize   128
     16          #define USART2_DR_Base  0x40004404
     17          #define USART3_DR_Base  0x40004804
     18          /* Private function-----------------------------------------------------------*/
     19          void ReadString(char *buff);
     20          u8 IsNum(char *string);
     21          /* Private macro -------------------------------------------------------------*/
     22          /* Private variables ---------------------------------------------------------*/
     23          OS_EVENT *WriteUsart1Sem;
     24          

   \                                 In section .bss, align 4
     25          static RXBUFF RxBuffer[UartMsgNum];
   \                     RxBuffer:
   \   00000000                      DS8 256
   \   00000100                      DS8 1
     26          static INT8U  RxCount=0;
     27          

   \                                 In section .bss, align 4
     28          INT8U SendBuffer[W5100_TX_RX_MAX_BUF_SIZE];
   \                     SendBuffer:
   \   00000000                      DS8 128

   \                                 In section .data, align 4
     29          
     30          const char *TxBuffer[2] = { 
   \                     TxBuffer:
   \   00000000   ........           DC32 `?<Constant "\\033[2J                 ...">`
   \   00000004   ........           DC32 `?<Constant "\\033[2J                 ...">_1`
   \                     WriteUsart1Sem:
   \   00000008   00000000           DC8 0, 0, 0, 0
     31          	  	"\33[2J                   Welcome to TJINC CAN & USART over IP unit\n\r\n\r 	\
     32          \n\r1.查看本地IP地址	\
     33          \n\r2.设置本地IP地址	\
     34          \n\r3.查看对方IP地址	\
     35          \n\r4.设置对方IP地址	\
     36          \n\r5.查看串口参数	\
     37          \n\r6.设置串口参数	\
     38          \n\r7.查看CAN BUS参数	\
     39          \n\r8.设置CAN BUS参数	\
     40          \n\r9.查看固件版本	\
     41          \n\r10.系统状态	\
     42          \n\r11.退出	\
     43          \n\r\n\r请选择:"	,
     44          	  	"\33[2J                   Welcome to TJINC CAN & USART over IP unit\n\r 	\
     45          "
     46          };

   \                                 In section .text, align 4, keep-with-next
     47          void STM32_DMA1_Init(enum COMPORT COMx,INT32U TxBufferSize)
     48          {
   \                     STM32_DMA1_Init:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   8BB0               SUB      SP,SP,#+44
   \   00000004   0546               MOV      R5,R0
   \   00000006   0C46               MOV      R4,R1
     49          	DMA_InitTypeDef DMA_InitStructure;
     50          
     51          	if(COMx==COM2){
   \   00000008   002D               CMP      R5,#+0
   \   0000000A   05D1               BNE.N    ??STM32_DMA1_Init_0
     52          		DMA_DeInit(DMA1_Channel7);  
   \   0000000C   1748               LDR.N    R0,??STM32_DMA1_Init_1  ;; 0x40020080
   \   0000000E   ........           BL       DMA_DeInit
     53          		DMA_InitStructure.DMA_PeripheralBaseAddr = USART2_DR_Base;
   \   00000012   1748               LDR.N    R0,??STM32_DMA1_Init_1+0x4  ;; 0x40004404
   \   00000014   0090               STR      R0,[SP, #+0]
   \   00000016   06E0               B.N      ??STM32_DMA1_Init_2
     54          	}
     55          	else if(COMx==COM3){
   \                     ??STM32_DMA1_Init_0:
   \   00000018   012D               CMP      R5,#+1
   \   0000001A   04D1               BNE.N    ??STM32_DMA1_Init_2
     56          	  	DMA_DeInit(DMA1_Channel2);  
   \   0000001C   1548               LDR.N    R0,??STM32_DMA1_Init_1+0x8  ;; 0x4002001c
   \   0000001E   ........           BL       DMA_DeInit
     57          		DMA_InitStructure.DMA_PeripheralBaseAddr = USART3_DR_Base;
   \   00000022   1548               LDR.N    R0,??STM32_DMA1_Init_1+0xC  ;; 0x40004804
   \   00000024   0090               STR      R0,[SP, #+0]
     58          	}
     59            	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)SendBuffer;
   \                     ??STM32_DMA1_Init_2:
   \   00000026   1548               LDR.N    R0,??STM32_DMA1_Init_1+0x10  ;; SendBuffer
   \   00000028   0190               STR      R0,[SP, #+4]
     60            	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
   \   0000002A   1020               MOVS     R0,#+16
   \   0000002C   0290               STR      R0,[SP, #+8]
     61            	DMA_InitStructure.DMA_BufferSize = TxBufferSize;
   \   0000002E   0394               STR      R4,[SP, #+12]
     62            	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \   00000030   0020               MOVS     R0,#+0
   \   00000032   0490               STR      R0,[SP, #+16]
     63            	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   \   00000034   8020               MOVS     R0,#+128
   \   00000036   0590               STR      R0,[SP, #+20]
     64            	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
   \   00000038   0020               MOVS     R0,#+0
   \   0000003A   0690               STR      R0,[SP, #+24]
     65            	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
   \   0000003C   0790               STR      R0,[SP, #+28]
     66            	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
   \   0000003E   0890               STR      R0,[SP, #+32]
     67            	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
   \   00000040   4FF44050           MOV      R0,#+12288
   \   00000044   0990               STR      R0,[SP, #+36]
     68            	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
   \   00000046   0020               MOVS     R0,#+0
   \   00000048   0A90               STR      R0,[SP, #+40]
     69          	
     70          	if(COMx==COM2)
   \   0000004A   002D               CMP      R5,#+0
   \   0000004C   05D1               BNE.N    ??STM32_DMA1_Init_3
     71            		DMA_Init(DMA1_Channel7, &DMA_InitStructure);
   \   0000004E   00A9               ADD      R1,SP,#+0
   \   00000050   0648               LDR.N    R0,??STM32_DMA1_Init_1  ;; 0x40020080
   \   00000052   ........           BL       DMA_Init
   \   00000056   0BB0               ADD      SP,SP,#+44
   \   00000058   30BD               POP      {R4,R5,PC}
     72          	else if(COMx==COM3)
   \                     ??STM32_DMA1_Init_3:
   \   0000005A   012D               CMP      R5,#+1
   \   0000005C   03D1               BNE.N    ??STM32_DMA1_Init_4
     73          	  	DMA_Init(DMA1_Channel2, &DMA_InitStructure);
   \   0000005E   00A9               ADD      R1,SP,#+0
   \   00000060   0448               LDR.N    R0,??STM32_DMA1_Init_1+0x8  ;; 0x4002001c
   \   00000062   ........           BL       DMA_Init
     74          }
   \                     ??STM32_DMA1_Init_4:
   \   00000066   0BB0               ADD      SP,SP,#+44
   \   00000068   30BD               POP      {R4,R5,PC}       ;; return
   \   0000006A   00BF               Nop      
   \                     ??STM32_DMA1_Init_1:
   \   0000006C   80000240           DC32     0x40020080
   \   00000070   04440040           DC32     0x40004404
   \   00000074   1C000240           DC32     0x4002001c
   \   00000078   04480040           DC32     0x40004804
   \   0000007C   ........           DC32     SendBuffer
     75          
     76          /*
     77          *********************************************************************************************************
     78          *                                              STM32_USART_Init()
     79          *
     80          * Description : Initialize the board's Uart.
     81          *
     82          * Argument(s) : none.
     83          *
     84          * Return(s)   : none.
     85          *
     86          * Caller(s)   : 
     87          *
     88          * Note(s)     : David Wang.
     89          *********************************************************************************************************
     90          */
     91          

   \                                 In section .text, align 2, keep-with-next
     92          void STM32_USART1_Init(void)
     93          {
   \                     STM32_USART1_Init:
   \   00000000   1FB5               PUSH     {R0-R4,LR}
     94            	USART_InitTypeDef USART_InitStructure;
     95          	USART_InitStructure.USART_BaudRate = 9600;
   \   00000002   4FF41650           MOV      R0,#+9600
   \   00000006   0090               STR      R0,[SP, #+0]
     96          	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   0190               STR      R0,[SP, #+4]
     97            	USART_InitStructure.USART_StopBits = USART_StopBits_1;
     98            	USART_InitStructure.USART_Parity = USART_Parity_No;
   \   0000000C   ADF80800           STRH     R0,[SP, #+8]
     99            	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   00000010   ADF80C00           STRH     R0,[SP, #+12]
    100            	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000014   0C20               MOVS     R0,#+12
   \   00000016   ADF80A00           STRH     R0,[SP, #+10]
    101          
    102            	/* Configure USART1 */
    103            	USART_Init(USART1, &USART_InitStructure);
   \   0000001A   ........           LDR.W    R4,??DataTable10  ;; 0x40013800
   \   0000001E   00A9               ADD      R1,SP,#+0
   \   00000020   2046               MOV      R0,R4
   \   00000022   ........           BL       USART_Init
    104          	
    105          	/* Enable the USART1 */
    106            	USART_Cmd(USART1, ENABLE);
   \   00000026   0121               MOVS     R1,#+1
   \   00000028   2046               MOV      R0,R4
   \   0000002A   ........           BL       USART_Cmd
    107          
    108          	WriteUsart1Sem=OSSemCreate(1);
   \   0000002E   0120               MOVS     R0,#+1
   \   00000030   ........           BL       OSSemCreate
   \   00000034   ........           LDR.W    R1,??DataTable9  ;; TxBuffer
   \   00000038   8860               STR      R0,[R1, #+8]
    109          }
   \   0000003A   1FBD               POP      {R0-R4,PC}       ;; return
    110          
    111          /*
    112          *********************************************************************************************************
    113          *                                              STM32_USART_Init()
    114          *
    115          * Description : Initialize the board's Uart.
    116          *
    117          * Argument(s) : none.
    118          *
    119          * Return(s)   : none.
    120          *
    121          * Caller(s)   : 
    122          *
    123          * Note(s)     : David Wang.
    124          *********************************************************************************************************
    125          */
    126          

   \                                 In section .text, align 4, keep-with-next
    127          void STM32_USART2_Init(INT16U BaudRate)
    128          {
   \                     STM32_USART2_Init:
   \   00000000   1FB5               PUSH     {R0-R4,LR}
    129            	USART_InitTypeDef USART_InitStructure;
    130          	USART_InitStructure.USART_BaudRate = BaudRate;
   \   00000002   0090               STR      R0,[SP, #+0]
    131          	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   0190               STR      R0,[SP, #+4]
    132            	USART_InitStructure.USART_StopBits = USART_StopBits_1;
    133            	USART_InitStructure.USART_Parity = USART_Parity_No;
   \   00000008   ADF80800           STRH     R0,[SP, #+8]
    134            	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   0000000C   ADF80C00           STRH     R0,[SP, #+12]
    135            	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000010   0C20               MOVS     R0,#+12
   \   00000012   ADF80A00           STRH     R0,[SP, #+10]
    136          
    137            	/* Configure USART2 */
    138            	USART_Init(USART2, &USART_InitStructure);
   \   00000016   ........           LDR.W    R4,??DataTable11  ;; 0x40004400
   \   0000001A   00A9               ADD      R1,SP,#+0
   \   0000001C   2046               MOV      R0,R4
   \   0000001E   ........           BL       USART_Init
    139          	
    140            	/* Enable the USART Receive interrupt: this interrupt is generated when the 
    141                 USART2 receive data register is not empty */
    142            	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   \   00000022   0122               MOVS     R2,#+1
   \   00000024   40F22551           MOVW     R1,#+1317
   \   00000028   2046               MOV      R0,R4
   \   0000002A   ........           BL       USART_ITConfig
    143          	
    144          	/* Enable USART2 DMA TX request */
    145            	USART_DMACmd(USART2,USART_DMAReq_Tx, ENABLE);
   \   0000002E   0122               MOVS     R2,#+1
   \   00000030   8021               MOVS     R1,#+128
   \   00000032   2046               MOV      R0,R4
   \   00000034   ........           BL       USART_DMACmd
    146          	
    147          	/* Enable the USART2 */
    148            	USART_Cmd(USART2, ENABLE);
   \   00000038   0121               MOVS     R1,#+1
   \   0000003A   2046               MOV      R0,R4
   \   0000003C   ........           BL       USART_Cmd
    149          
    150          	
    151          	BSP_IntVectSet(BSP_INT_ID_USART2, USART2_IRQHandler);
   \   00000040   0349               LDR.N    R1,??STM32_USART2_Init_0  ;; USART2_IRQHandler
   \   00000042   2620               MOVS     R0,#+38
   \   00000044   ........           BL       BSP_IntVectSet
    152            	BSP_IntEn(BSP_INT_ID_USART2);
   \   00000048   2620               MOVS     R0,#+38
   \   0000004A   ........           BL       BSP_IntEn
    153          
    154          }
   \   0000004E   1FBD               POP      {R0-R4,PC}       ;; return
   \                     ??STM32_USART2_Init_0:
   \   00000050   ........           DC32     USART2_IRQHandler
    155          /*
    156          *********************************************************************************************************
    157          *                                              STM32_USART_Init()
    158          *
    159          * Description : Initialize the board's Uart.
    160          *
    161          * Argument(s) : none.
    162          *
    163          * Return(s)   : none.
    164          *
    165          * Caller(s)   : 
    166          *
    167          * Note(s)     : David Wang.
    168          *********************************************************************************************************
    169          */
    170          

   \                                 In section .text, align 4, keep-with-next
    171          void STM32_USART3_Init(INT16U BaudRate)
    172          {
   \                     STM32_USART3_Init:
   \   00000000   1FB5               PUSH     {R0-R4,LR}
    173            	USART_InitTypeDef USART_InitStructure;
    174          	USART_InitStructure.USART_BaudRate = BaudRate;
   \   00000002   0090               STR      R0,[SP, #+0]
    175          	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   0190               STR      R0,[SP, #+4]
    176            	USART_InitStructure.USART_StopBits = USART_StopBits_1;
    177            	USART_InitStructure.USART_Parity = USART_Parity_No;
   \   00000008   ADF80800           STRH     R0,[SP, #+8]
    178            	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   0000000C   ADF80C00           STRH     R0,[SP, #+12]
    179            	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000010   0C20               MOVS     R0,#+12
   \   00000012   ADF80A00           STRH     R0,[SP, #+10]
    180          
    181            	/* Configure USART3 */
    182            	USART_Init(USART3, &USART_InitStructure);
   \   00000016   ........           LDR.W    R4,??DataTable12  ;; 0x40004800
   \   0000001A   00A9               ADD      R1,SP,#+0
   \   0000001C   2046               MOV      R0,R4
   \   0000001E   ........           BL       USART_Init
    183          	
    184            	/* Enable the USART Receive interrupt: this interrupt is generated when the 
    185                 USART3 receive data register is not empty */
    186            	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
   \   00000022   0122               MOVS     R2,#+1
   \   00000024   40F22551           MOVW     R1,#+1317
   \   00000028   2046               MOV      R0,R4
   \   0000002A   ........           BL       USART_ITConfig
    187          	
    188          	/* Enable USART3 DMA TX request */
    189            	USART_DMACmd(USART3,USART_DMAReq_Tx, ENABLE);
   \   0000002E   0122               MOVS     R2,#+1
   \   00000030   8021               MOVS     R1,#+128
   \   00000032   2046               MOV      R0,R4
   \   00000034   ........           BL       USART_DMACmd
    190          	
    191          	/* Enable the USART3 */
    192            	USART_Cmd(USART3, ENABLE);
   \   00000038   0121               MOVS     R1,#+1
   \   0000003A   2046               MOV      R0,R4
   \   0000003C   ........           BL       USART_Cmd
    193          
    194          	BSP_IntVectSet(BSP_INT_ID_USART3, USART3_IRQHandler);
   \   00000040   0349               LDR.N    R1,??STM32_USART3_Init_0  ;; USART3_IRQHandler
   \   00000042   2720               MOVS     R0,#+39
   \   00000044   ........           BL       BSP_IntVectSet
    195            	BSP_IntEn(BSP_INT_ID_USART3);
   \   00000048   2720               MOVS     R0,#+39
   \   0000004A   ........           BL       BSP_IntEn
    196          
    197          }
   \   0000004E   1FBD               POP      {R0-R4,PC}       ;; return
   \                     ??STM32_USART3_Init_0:
   \   00000050   ........           DC32     USART3_IRQHandler
    198          
    199          
    200          /*******************************************************************************
    201          * Function Name  : int fputc(int ch, FILE *f)
    202          * Description    : Retargets the C library printf function to the USART.
    203          * Input          : None
    204          * Output         : None
    205          * Return         : None
    206          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    207          int fputc(int ch, FILE *f)
    208          {
   \                     fputc:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0446               MOV      R4,R0
    209          	OSSemPend(WriteUsart1Sem,0,NULL);
   \   00000004   ........           LDR.W    R5,??DataTable9  ;; TxBuffer
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1146               MOV      R1,R2
   \   0000000C   A868               LDR      R0,[R5, #+8]
   \   0000000E   ........           BL       OSSemPend
    210          	
    211            /* Write a character to the USART */
    212          	USART_SendData(USART1, (u8) ch);
   \   00000012   ........           LDR.W    R6,??DataTable10  ;; 0x40013800
   \   00000016   2146               MOV      R1,R4
   \   00000018   C9B2               UXTB     R1,R1
   \   0000001A   3046               MOV      R0,R6
   \   0000001C   ........           BL       USART_SendData
    213            /* Loop until the end of transmission */
    214          	while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
   \                     ??fputc_0:
   \   00000020   8021               MOVS     R1,#+128
   \   00000022   3046               MOV      R0,R6
   \   00000024   ........           BL       USART_GetFlagStatus
   \   00000028   0028               CMP      R0,#+0
   \   0000002A   F9D0               BEQ.N    ??fputc_0
    215          
    216          	OSSemPost(WriteUsart1Sem);
   \   0000002C   A868               LDR      R0,[R5, #+8]
   \   0000002E   ........           BL       OSSemPost
    217          	
    218          	return ch;
   \   00000032   2046               MOV      R0,R4
   \   00000034   70BD               POP      {R4-R6,PC}       ;; return
    219          }

   \                                 In section .text, align 2, keep-with-next
    220          void ReadString(char *buff)
    221          {
   \                     ReadString:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0446               MOV      R4,R0
    222            	u8 RxCounter=0;
   \   00000006   0026               MOVS     R6,#+0
    223          	
    224          	OSSemPend(WriteUsart1Sem,0,NULL);
   \   00000008   ........           LDR.W    R5,??DataTable9  ;; TxBuffer
   \   0000000C   3246               MOV      R2,R6
   \   0000000E   1146               MOV      R1,R2
   \   00000010   A868               LDR      R0,[R5, #+8]
   \   00000012   ........           BL       OSSemPend
    225          	
    226            	do{
    227          		if((USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != RESET)&&(RxCounter < RxBufferSize)){
   \                     ??ReadString_0:
   \   00000016   ........           LDR.W    R7,??DataTable10  ;; 0x40013800
   \   0000001A   2021               MOVS     R1,#+32
   \   0000001C   3846               MOV      R0,R7
   \   0000001E   ........           BL       USART_GetFlagStatus
   \   00000022   0028               CMP      R0,#+0
   \   00000024   0FD0               BEQ.N    ??ReadString_1
   \   00000026   3046               MOV      R0,R6
   \   00000028   8028               CMP      R0,#+128
   \   0000002A   0CD2               BCS.N    ??ReadString_1
    228                  	buff[RxCounter] = USART_ReceiveData(USART1);
   \   0000002C   B046               MOV      R8,R6
   \   0000002E   3846               MOV      R0,R7
   \   00000030   ........           BL       USART_ReceiveData
   \   00000034   08F80400           STRB     R0,[R8, R4]
    229                 		USART_SendData(USART1, buff[RxCounter++]);
   \   00000038   18F80410           LDRB     R1,[R8, R4]
   \   0000003C   3846               MOV      R0,R7
   \   0000003E   ........           BL       USART_SendData
   \   00000042   761C               ADDS     R6,R6,#+1
   \   00000044   F6B2               UXTB     R6,R6
    230              	}   
    231             	}while((buff[RxCounter - 1] != '\r')&&(RxCounter < RxBufferSize-1));
   \                     ??ReadString_1:
   \   00000046   3046               MOV      R0,R6
   \   00000048   0719               ADDS     R7,R0,R4
   \   0000004A   17F8010C           LDRB     R0,[R7, #-1]
   \   0000004E   0D28               CMP      R0,#+13
   \   00000050   02D0               BEQ.N    ??ReadString_2
   \   00000052   3046               MOV      R0,R6
   \   00000054   7F28               CMP      R0,#+127
   \   00000056   DED3               BCC.N    ??ReadString_0
    232          	
    233          	OSSemPost(WriteUsart1Sem);
   \                     ??ReadString_2:
   \   00000058   A868               LDR      R0,[R5, #+8]
   \   0000005A   ........           BL       OSSemPost
    234          	
    235          	buff[RxCounter-1]='\0';
   \   0000005E   0020               MOVS     R0,#+0
   \   00000060   07F8010C           STRB     R0,[R7, #-1]
    236          
    237          	
    238          }
   \   00000064   BDE8F081           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    239          u8 IsNum(char *string)
    240          {
   \                     IsNum:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0446               MOV      R4,R0
    241            	u8 i;
    242          	for(i=0;i<strlen(string);i++){
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   01E0               B.N      ??IsNum_0
   \                     ??IsNum_1:
   \   00000008   6D1C               ADDS     R5,R5,#+1
   \   0000000A   EDB2               UXTB     R5,R5
   \                     ??IsNum_0:
   \   0000000C   2046               MOV      R0,R4
   \   0000000E   ........           BL       strlen
   \   00000012   8542               CMP      R5,R0
   \   00000014   08D2               BCS.N    ??IsNum_2
    243          	  	if(string[i]<0x30 || string[i]>0x39)
   \   00000016   2846               MOV      R0,R5
   \   00000018   015D               LDRB     R1,[R0, R4]
   \   0000001A   3029               CMP      R1,#+48
   \   0000001C   02D3               BCC.N    ??IsNum_3
   \   0000001E   0846               MOV      R0,R1
   \   00000020   3A28               CMP      R0,#+58
   \   00000022   F1D3               BCC.N    ??IsNum_1
    244          		  	return 0;
   \                     ??IsNum_3:
   \   00000024   0020               MOVS     R0,#+0
   \   00000026   32BD               POP      {R1,R4,R5,PC}
    245          	}
    246          	return 1;
   \                     ??IsNum_2:
   \   00000028   0120               MOVS     R0,#+1
   \   0000002A   32BD               POP      {R1,R4,R5,PC}    ;; return
    247          }

   \                                 In section .text, align 2, keep-with-next
    248          u8 getch(void)
    249          {
   \                     getch:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   ........           LDR.W    R4,??DataTable10  ;; 0x40013800
    250            	while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
   \                     ??getch_0:
   \   00000006   2021               MOVS     R1,#+32
   \   00000008   2046               MOV      R0,R4
   \   0000000A   ........           BL       USART_GetFlagStatus
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   F9D0               BEQ.N    ??getch_0
    251          	return USART_ReceiveData(USART1);
   \   00000012   2046               MOV      R0,R4
   \   00000014   ........           BL       USART_ReceiveData
   \   00000018   C0B2               UXTB     R0,R0
   \   0000001A   10BD               POP      {R4,PC}          ;; return
    252          }
    253          

   \                                 In section .text, align 4, keep-with-next
    254          void HyperTerminal(void)
    255          {
   \                     HyperTerminal:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   98B0               SUB      SP,SP,#+96
    256          	char *RxBuffer;
    257          	INT16U DataToTransfer = strlen(TxBuffer[0]);
   \   00000006   ........           LDR.W    R6,??DataTable9  ;; TxBuffer
   \   0000000A   3068               LDR      R0,[R6, #+0]
   \   0000000C   ........           BL       strlen
   \   00000010   0746               MOV      R7,R0
    258          	INT16U  TxCounter = 0;
   \   00000012   0025               MOVS     R5,#+0
    259          	NETCONF	NetConf;
    260          	CHCONF  ChConf[COMMPORTNUM];
    261          	INT16U BaudRate[4];
    262          	CANCONF CanConf;
    263          	OS_STK_DATA	data;
    264          	
    265          	RxBuffer=malloc(RxBufferSize*sizeof(char));
   \   00000014   8020               MOVS     R0,#+128
   \   00000016   ........           BL       malloc
   \   0000001A   0446               MOV      R4,R0
    266          	
    267          	OSSemPend(WriteUsart1Sem,0,NULL);
   \   0000001C   2A46               MOV      R2,R5
   \   0000001E   1146               MOV      R1,R2
   \   00000020   B068               LDR      R0,[R6, #+8]
   \   00000022   ........           BL       OSSemPend
   \   00000026   ........           LDR.W    R8,??DataTable10  ;; 0x40013800
   \   0000002A   0DE0               B.N      ??HyperTerminal_1
    268          	
    269            	while(DataToTransfer--){
    270          	    USART_SendData(USART1, TxBuffer[0][TxCounter++]);
   \                     ??HyperTerminal_2:
   \   0000002C   2846               MOV      R0,R5
   \   0000002E   3168               LDR      R1,[R6, #+0]
   \   00000030   415C               LDRB     R1,[R0, R1]
   \   00000032   4046               MOV      R0,R8
   \   00000034   ........           BL       USART_SendData
   \   00000038   6D1C               ADDS     R5,R5,#+1
   \   0000003A   ADB2               UXTH     R5,R5
    271              	while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);          
   \                     ??HyperTerminal_3:
   \   0000003C   8021               MOVS     R1,#+128
   \   0000003E   4046               MOV      R0,R8
   \   00000040   ........           BL       USART_GetFlagStatus
   \   00000044   0028               CMP      R0,#+0
   \   00000046   F9D0               BEQ.N    ??HyperTerminal_3
    272            	}
   \                     ??HyperTerminal_1:
   \   00000048   3846               MOV      R0,R7
   \   0000004A   471E               SUBS     R7,R0,#+1
   \   0000004C   80B2               UXTH     R0,R0
   \   0000004E   0028               CMP      R0,#+0
   \   00000050   ECD1               BNE.N    ??HyperTerminal_2
    273            	/* Receive a string (Max RxBufferSize bytes) from the Hyperterminal ended by '\r' (Enter key) */
    274          	ReadString(RxBuffer);
   \   00000052   2046               MOV      R0,R4
   \   00000054   ........           BL       ReadString
    275          	
    276          	OSSemPost(WriteUsart1Sem);
   \   00000058   B068               LDR      R0,[R6, #+8]
   \   0000005A   ........           BL       OSSemPost
    277          	
    278          	switch(atoi(RxBuffer)){
   \   0000005E   2046               MOV      R0,R4
   \   00000060   ........           BL       atoi
   \   00000064   401E               SUBS     R0,R0,#+1
   \   00000066   0A28               CMP      R0,#+10
   \   00000068   00F23584           BHI.W    ??HyperTerminal_4
   \   0000006C   DFE810F0           TBH      [PC, R0, LSL #+1]
   \                     ??HyperTerminal_0:
   \   00000070   0B0055003601       DC16     +11,+85,+310,+394
   \              8A01        
   \   00000078   9102B8023703       DC16     +657,+696,+823,+859
   \              5B03        
   \   00000080   AD03C3032704       DC16     +941,+963,+1063
    279          		case 1:
    280          		  	printf("%s\n\r",TxBuffer[1]);
   \                     ??HyperTerminal_5:
   \   00000086   DFF86858           LDR.W    R5,??HyperTerminal_6  ;; `?<Constant "%s\\n\\r">`
   \   0000008A   7168               LDR      R1,[R6, #+4]
   \   0000008C   2846               MOV      R0,R5
   \   0000008E   ........           BL       printf
    281          			get_netconf(&NetConf);	
   \   00000092   05A8               ADD      R0,SP,#+20
   \   00000094   ........           BL       get_netconf
    282          			printf("\n\r1.IP地址:%s",inet_ntoa(NetConf.sip));
   \   00000098   0798               LDR      R0,[SP, #+28]
   \   0000009A   ........           BL       inet_ntoa
   \   0000009E   0146               MOV      R1,R0
   \   000000A0   05F10800           ADD      R0,R5,#+8
   \   000000A4   ........           BL       printf
    283          			printf("\n\r2.子网掩码:%s",inet_ntoa(NetConf.sn));
   \   000000A8   0998               LDR      R0,[SP, #+36]
   \   000000AA   ........           BL       inet_ntoa
   \   000000AE   0146               MOV      R1,R0
   \   000000B0   05F11800           ADD      R0,R5,#+24
   \   000000B4   ........           BL       printf
    284          			printf("\n\r3.默认网关:%s",inet_ntoa(NetConf.gwip));
   \   000000B8   0898               LDR      R0,[SP, #+32]
   \   000000BA   ........           BL       inet_ntoa
   \   000000BE   0146               MOV      R1,R0
   \   000000C0   05F12800           ADD      R0,R5,#+40
   \   000000C4   ........           BL       printf
    285          			printf("\n\r4.DNS地址:%s",inet_ntoa(NetConf.dns));
   \   000000C8   0A98               LDR      R0,[SP, #+40]
   \   000000CA   ........           BL       inet_ntoa
   \   000000CE   0146               MOV      R1,R0
   \   000000D0   05F13800           ADD      R0,R5,#+56
   \   000000D4   ........           BL       printf
    286          			printf("\n\r5.COM5端口号码:%u",NetConf.port[0]);
   \   000000D8   BDF82E10           LDRH     R1,[SP, #+46]
   \   000000DC   05F14800           ADD      R0,R5,#+72
   \   000000E0   ........           BL       printf
    287          			printf("\n\r6.COM2-4端口号码:%u",NetConf.port[1]);
   \   000000E4   BDF83010           LDRH     R1,[SP, #+48]
   \   000000E8   05F15C00           ADD      R0,R5,#+92
   \   000000EC   ........           BL       printf
    288          			printf("\n\r7.CAN 端口号码:%u",NetConf.port[2]);
   \   000000F0   BDF83210           LDRH     R1,[SP, #+50]
   \   000000F4   05F17400           ADD      R0,R5,#+116
   \   000000F8   ........           BL       printf
    289          			printf("\n\r8.状态及控制端口号码:%u",NetConf.port[3]);
   \   000000FC   BDF83410           LDRH     R1,[SP, #+52]
   \   00000100   05F18800           ADD      R0,R5,#+136
   \   00000104   ........           BL       printf
    290          			printf("\n\r\n\r按任意键继续..........");
   \   00000108   05F1A400           ADD      R0,R5,#+164
   \   0000010C   ........           BL       printf
    291          			getch();
   \   00000110   ........           BL       getch
   \   00000114   18B0               ADD      SP,SP,#+96
   \   00000116   BDE8F081           POP      {R4-R8,PC}
    292          		  	break;
    293          		case 2:
    294          		  	printf("%s\n\r",TxBuffer[1]);
   \                     ??HyperTerminal_7:
   \   0000011A   DFF8D457           LDR.W    R5,??HyperTerminal_6  ;; `?<Constant "%s\\n\\r">`
   \   0000011E   7168               LDR      R1,[R6, #+4]
   \   00000120   2846               MOV      R0,R5
   \   00000122   ........           BL       printf
   \   00000126   09E0               B.N      ??HyperTerminal_8
    295          			
    296          			while(1){
    297          				printf("\n\r1.请输入本机IP地址:");
    298          				ReadString(RxBuffer);
    299          				if(VerifyIPAddress(RxBuffer)){
    300          				  	NetConf.sip=inet_addr((unsigned char *)RxBuffer);
    301          				  	break;
    302          				}
    303          				printf("\n\r输入非法,请输入正确IP地址!"); 
   \                     ??HyperTerminal_9:
   \   00000128   05F1D800           ADD      R0,R5,#+216
   \   0000012C   ........           BL       printf
    304          				OSTimeDlyHMSM(0, 0, 2, 0);
   \   00000130   0023               MOVS     R3,#+0
   \   00000132   0222               MOVS     R2,#+2
   \   00000134   1946               MOV      R1,R3
   \   00000136   0846               MOV      R0,R1
   \   00000138   ........           BL       OSTimeDlyHMSM
   \                     ??HyperTerminal_8:
   \   0000013C   05F1C000           ADD      R0,R5,#+192
   \   00000140   ........           BL       printf
   \   00000144   2046               MOV      R0,R4
   \   00000146   ........           BL       ReadString
   \   0000014A   2046               MOV      R0,R4
   \   0000014C   ........           BL       VerifyIPAddress
   \   00000150   0028               CMP      R0,#+0
   \   00000152   E9D0               BEQ.N    ??HyperTerminal_9
   \   00000154   2046               MOV      R0,R4
   \   00000156   ........           BL       inet_addr
   \   0000015A   0790               STR      R0,[SP, #+28]
   \   0000015C   09E0               B.N      ??HyperTerminal_10
    305          			}
    306          			while(1){
    307          				printf("\n\r2.请输入本机子网掩码:");
    308          				ReadString(RxBuffer);
    309          				if(VerifyIPAddress(RxBuffer)){
    310          				  	NetConf.sn=inet_addr((unsigned char *)RxBuffer);
    311          				  	break;
    312          				}
    313          				printf("\n\r输入非法,请输入正确子网掩码!"); 
   \                     ??HyperTerminal_11:
   \   0000015E   05F58870           ADD      R0,R5,#+272
   \   00000162   ........           BL       printf
    314          				OSTimeDlyHMSM(0, 0, 2, 0);
   \   00000166   0023               MOVS     R3,#+0
   \   00000168   0222               MOVS     R2,#+2
   \   0000016A   1946               MOV      R1,R3
   \   0000016C   0846               MOV      R0,R1
   \   0000016E   ........           BL       OSTimeDlyHMSM
   \                     ??HyperTerminal_10:
   \   00000172   05F1F800           ADD      R0,R5,#+248
   \   00000176   ........           BL       printf
   \   0000017A   2046               MOV      R0,R4
   \   0000017C   ........           BL       ReadString
   \   00000180   2046               MOV      R0,R4
   \   00000182   ........           BL       VerifyIPAddress
   \   00000186   0028               CMP      R0,#+0
   \   00000188   E9D0               BEQ.N    ??HyperTerminal_11
   \   0000018A   2046               MOV      R0,R4
   \   0000018C   ........           BL       inet_addr
   \   00000190   0990               STR      R0,[SP, #+36]
   \   00000192   09E0               B.N      ??HyperTerminal_12
    315          			}
    316          			while(1){
    317          				printf("\n\r3.请输入本机默认网关:");
    318          				ReadString(RxBuffer);
    319          				if(VerifyIPAddress(RxBuffer)){
    320          				  	NetConf.gwip=inet_addr((unsigned char *)RxBuffer);
    321          				  	break;
    322          				}
    323          				printf("\n\r输入非法,请输入正确正确IP地址!"); 
   \                     ??HyperTerminal_13:
   \   00000194   05F5A470           ADD      R0,R5,#+328
   \   00000198   ........           BL       printf
    324          				OSTimeDlyHMSM(0, 0, 2, 0);
   \   0000019C   0023               MOVS     R3,#+0
   \   0000019E   0222               MOVS     R2,#+2
   \   000001A0   1946               MOV      R1,R3
   \   000001A2   0846               MOV      R0,R1
   \   000001A4   ........           BL       OSTimeDlyHMSM
   \                     ??HyperTerminal_12:
   \   000001A8   05F59870           ADD      R0,R5,#+304
   \   000001AC   ........           BL       printf
   \   000001B0   2046               MOV      R0,R4
   \   000001B2   ........           BL       ReadString
   \   000001B6   2046               MOV      R0,R4
   \   000001B8   ........           BL       VerifyIPAddress
   \   000001BC   0028               CMP      R0,#+0
   \   000001BE   E9D0               BEQ.N    ??HyperTerminal_13
   \   000001C0   2046               MOV      R0,R4
   \   000001C2   ........           BL       inet_addr
   \   000001C6   0890               STR      R0,[SP, #+32]
   \   000001C8   09E0               B.N      ??HyperTerminal_14
    325          			}
    326          			while(1){
    327          				printf("\n\r4.请输入DNS地址:");
    328          				ReadString(RxBuffer);
    329          				if(VerifyIPAddress(RxBuffer)){
    330          				  	NetConf.dns=inet_addr((unsigned char *)RxBuffer);
    331          				  	break;
    332          				}
    333          				printf("\n\r输入非法,请输入正确正确IP地址!"); 
   \                     ??HyperTerminal_15:
   \   000001CA   05F5A470           ADD      R0,R5,#+328
   \   000001CE   ........           BL       printf
    334          				OSTimeDlyHMSM(0, 0, 2, 0);
   \   000001D2   0023               MOVS     R3,#+0
   \   000001D4   0222               MOVS     R2,#+2
   \   000001D6   1946               MOV      R1,R3
   \   000001D8   0846               MOV      R0,R1
   \   000001DA   ........           BL       OSTimeDlyHMSM
   \                     ??HyperTerminal_14:
   \   000001DE   05F5B670           ADD      R0,R5,#+364
   \   000001E2   ........           BL       printf
   \   000001E6   2046               MOV      R0,R4
   \   000001E8   ........           BL       ReadString
   \   000001EC   2046               MOV      R0,R4
   \   000001EE   ........           BL       VerifyIPAddress
   \   000001F2   0028               CMP      R0,#+0
   \   000001F4   E9D0               BEQ.N    ??HyperTerminal_15
   \   000001F6   2046               MOV      R0,R4
   \   000001F8   ........           BL       inet_addr
   \   000001FC   0A90               STR      R0,[SP, #+40]
   \   000001FE   03E0               B.N      ??HyperTerminal_16
    335          			}
    336          			while(1){
    337          				printf("\n\r5.请输入COM5 端口号码:");
    338          				ReadString(RxBuffer);
    339          				if(IsNum(RxBuffer)){
    340          				  	NetConf.port[0]=atoi(RxBuffer);
    341          				  	break;
    342          				}
    343          				printf("\n\r输入非法,请输入1024-65535之间整数!");  
   \                     ??HyperTerminal_17:
   \   00000200   05F5CE70           ADD      R0,R5,#+412
   \   00000204   ........           BL       printf
   \                     ??HyperTerminal_16:
   \   00000208   05F5C070           ADD      R0,R5,#+384
   \   0000020C   ........           BL       printf
   \   00000210   2046               MOV      R0,R4
   \   00000212   ........           BL       ReadString
   \   00000216   2046               MOV      R0,R4
   \   00000218   ........           BL       IsNum
   \   0000021C   0028               CMP      R0,#+0
   \   0000021E   EFD0               BEQ.N    ??HyperTerminal_17
   \   00000220   2046               MOV      R0,R4
   \   00000222   ........           BL       atoi
   \   00000226   ADF82E00           STRH     R0,[SP, #+46]
   \   0000022A   03E0               B.N      ??HyperTerminal_18
    344          			}
    345          			while(1){
    346          				printf("\n\r6.请输入COM2-4端口号码:");
    347          				ReadString(RxBuffer);
    348          				if(IsNum(RxBuffer)){
    349          				  	NetConf.port[1]=atoi(RxBuffer);
    350          				  	break;
    351          				}
    352          				printf("\n\r输入非法,请输入1024-65535之间整数!");  
   \                     ??HyperTerminal_19:
   \   0000022C   05F5CE70           ADD      R0,R5,#+412
   \   00000230   ........           BL       printf
   \                     ??HyperTerminal_18:
   \   00000234   05F5E270           ADD      R0,R5,#+452
   \   00000238   ........           BL       printf
   \   0000023C   2046               MOV      R0,R4
   \   0000023E   ........           BL       ReadString
   \   00000242   2046               MOV      R0,R4
   \   00000244   ........           BL       IsNum
   \   00000248   0028               CMP      R0,#+0
   \   0000024A   EFD0               BEQ.N    ??HyperTerminal_19
   \   0000024C   2046               MOV      R0,R4
   \   0000024E   ........           BL       atoi
   \   00000252   ADF83000           STRH     R0,[SP, #+48]
   \   00000256   03E0               B.N      ??HyperTerminal_20
    353          			}
    354          			while(1){
    355          				printf("\n\r7.请输入CAN 端口号码:");
    356          				ReadString(RxBuffer);
    357          				if(IsNum(RxBuffer)){
    358          				  	NetConf.port[2]=atoi(RxBuffer);
    359          				  	break;
    360          				}
    361          				printf("\n\r输入非法,请输入1024-65535之间整数!");  
   \                     ??HyperTerminal_21:
   \   00000258   05F5CE70           ADD      R0,R5,#+412
   \   0000025C   ........           BL       printf
   \                     ??HyperTerminal_20:
   \   00000260   05F5F070           ADD      R0,R5,#+480
   \   00000264   ........           BL       printf
   \   00000268   2046               MOV      R0,R4
   \   0000026A   ........           BL       ReadString
   \   0000026E   2046               MOV      R0,R4
   \   00000270   ........           BL       IsNum
   \   00000274   0028               CMP      R0,#+0
   \   00000276   EFD0               BEQ.N    ??HyperTerminal_21
   \   00000278   2046               MOV      R0,R4
   \   0000027A   ........           BL       atoi
   \   0000027E   ADF83200           STRH     R0,[SP, #+50]
   \   00000282   03E0               B.N      ??HyperTerminal_22
    362          			}
    363          			while(1){
    364          				printf("\n\r8.请输入状态及控制端口号码:");
    365          				ReadString(RxBuffer);
    366          				if(IsNum(RxBuffer)){
    367          				  	NetConf.port[3]=atoi(RxBuffer);
    368          				  	break;
    369          				}
    370          				printf("\n\r输入非法,请输入1024-65535之间整数!");  
   \                     ??HyperTerminal_23:
   \   00000284   05F5CE70           ADD      R0,R5,#+412
   \   00000288   ........           BL       printf
   \                     ??HyperTerminal_22:
   \   0000028C   05F5FC70           ADD      R0,R5,#+504
   \   00000290   ........           BL       printf
   \   00000294   2046               MOV      R0,R4
   \   00000296   ........           BL       ReadString
   \   0000029A   2046               MOV      R0,R4
   \   0000029C   ........           BL       IsNum
   \   000002A0   0028               CMP      R0,#+0
   \   000002A2   EFD0               BEQ.N    ??HyperTerminal_23
   \   000002A4   2046               MOV      R0,R4
   \   000002A6   ........           BL       atoi
   \   000002AA   ADF83400           STRH     R0,[SP, #+52]
    371          			}
    372          			set_netconf(NetConf);
   \   000002AE   05A9               ADD      R1,SP,#+20
   \   000002B0   8AB0               SUB      SP,SP,#+40
   \   000002B2   6846               MOV      R0,SP
   \   000002B4   2422               MOVS     R2,#+36
   \   000002B6   ........           BL       __aeabi_memcpy4
   \   000002BA   0FBC               POP      {R0-R3}
   \   000002BC   ........           BL       set_netconf
   \   000002C0   06B0               ADD      SP,SP,#+24
    373          			printf("\n\r\n\r本机IP配置完毕，从新上电后生效...............");  
   \   000002C2   05F50670           ADD      R0,R5,#+536
   \   000002C6   ........           BL       printf
    374          			printf("\n\r\n\r按任意键继续..........");
   \   000002CA   05F1A400           ADD      R0,R5,#+164
   \   000002CE   ........           BL       printf
    375          			getch();
   \   000002D2   ........           BL       getch
   \   000002D6   18B0               ADD      SP,SP,#+96
   \   000002D8   BDE8F081           POP      {R4-R8,PC}
    376          		  	break;		  
    377          		case 3:
    378          		  	printf("%s\n\r",TxBuffer[1]);
   \                     ??HyperTerminal_24:
   \   000002DC   DFF81056           LDR.W    R5,??HyperTerminal_6  ;; `?<Constant "%s\\n\\r">`
   \   000002E0   7168               LDR      R1,[R6, #+4]
   \   000002E2   2846               MOV      R0,R5
   \   000002E4   ........           BL       printf
    379          			get_chconf(ChConf);	
   \   000002E8   0EA8               ADD      R0,SP,#+56
   \   000002EA   ........           BL       get_chconf
    380          			printf("\n\r1.COM2 IP地址:%s",inet_ntoa(ChConf[0].destip));
   \   000002EE   0E98               LDR      R0,[SP, #+56]
   \   000002F0   ........           BL       inet_ntoa
   \   000002F4   0146               MOV      R1,R0
   \   000002F6   05F51370           ADD      R0,R5,#+588
   \   000002FA   ........           BL       printf
    381          			printf("\n\r2.COM2 Port:%u",ChConf[0].port);
   \   000002FE   0EAE               ADD      R6,SP,#+56
   \   00000300   B188               LDRH     R1,[R6, #+4]
   \   00000302   05F51870           ADD      R0,R5,#+608
   \   00000306   ........           BL       printf
    382          			printf("\n\r3.COM3 IP地址:%s",inet_ntoa(ChConf[1].destip));
   \   0000030A   B068               LDR      R0,[R6, #+8]
   \   0000030C   ........           BL       inet_ntoa
   \   00000310   0146               MOV      R1,R0
   \   00000312   05F51D70           ADD      R0,R5,#+628
   \   00000316   ........           BL       printf
    383          			printf("\n\r4.COM3 Port:%u",ChConf[1].port);
   \   0000031A   B189               LDRH     R1,[R6, #+12]
   \   0000031C   05F52270           ADD      R0,R5,#+648
   \   00000320   ........           BL       printf
    384          			printf("\n\r5.COM4 IP地址:%s",inet_ntoa(ChConf[2].destip));
   \   00000324   3069               LDR      R0,[R6, #+16]
   \   00000326   ........           BL       inet_ntoa
   \   0000032A   0146               MOV      R1,R0
   \   0000032C   05F52770           ADD      R0,R5,#+668
   \   00000330   ........           BL       printf
    385          			printf("\n\r6.COM4 Port:%u",ChConf[2].port);
   \   00000334   B18A               LDRH     R1,[R6, #+20]
   \   00000336   05F52C70           ADD      R0,R5,#+688
   \   0000033A   ........           BL       printf
    386          			printf("\n\r7.COM5 IP地址:%s",inet_ntoa(ChConf[3].destip));
   \   0000033E   B069               LDR      R0,[R6, #+24]
   \   00000340   ........           BL       inet_ntoa
   \   00000344   0146               MOV      R1,R0
   \   00000346   05F53170           ADD      R0,R5,#+708
   \   0000034A   ........           BL       printf
    387          			printf("\n\r8.COM5 Port:%u",ChConf[3].port);
   \   0000034E   B18B               LDRH     R1,[R6, #+28]
   \   00000350   05F53670           ADD      R0,R5,#+728
   \   00000354   ........           BL       printf
    388          			printf("\n\r9.CAN IP地址:%s",inet_ntoa(ChConf[4].destip));
   \   00000358   306A               LDR      R0,[R6, #+32]
   \   0000035A   ........           BL       inet_ntoa
   \   0000035E   0146               MOV      R1,R0
   \   00000360   05F53B70           ADD      R0,R5,#+748
   \   00000364   ........           BL       printf
    389          			printf("\n\r10.CAN Port:%u",ChConf[4].port);
   \   00000368   B18C               LDRH     R1,[R6, #+36]
   \   0000036A   05F54070           ADD      R0,R5,#+768
   \   0000036E   ........           BL       printf
    390          			printf("\n\r\n\r按任意键继续..........");
   \   00000372   05F1A400           ADD      R0,R5,#+164
   \   00000376   ........           BL       printf
    391          			getch();
   \   0000037A   ........           BL       getch
   \   0000037E   18B0               ADD      SP,SP,#+96
   \   00000380   BDE8F081           POP      {R4-R8,PC}
    392          		  	break;
    393          		case 4:
    394          		  	printf("%s\n\r",TxBuffer[1]);
   \                     ??HyperTerminal_25:
   \   00000384   DFF86855           LDR.W    R5,??HyperTerminal_6  ;; `?<Constant "%s\\n\\r">`
   \   00000388   7168               LDR      R1,[R6, #+4]
   \   0000038A   2846               MOV      R0,R5
   \   0000038C   ........           BL       printf
   \   00000390   09E0               B.N      ??HyperTerminal_26
    395          			while(1){
    396          				printf("\n\r1.请输入COM2 IP地址:");
    397          				ReadString(RxBuffer);
    398          				if(VerifyIPAddress(RxBuffer)){
    399          				  	ChConf[0].destip=inet_addr((unsigned char *)RxBuffer);
    400          				  	break;
    401          				}
    402          				printf("\n\r输入非法,请输入正确IP地址!"); 
   \                     ??HyperTerminal_27:
   \   00000392   05F1D800           ADD      R0,R5,#+216
   \   00000396   ........           BL       printf
    403          				OSTimeDlyHMSM(0, 0, 2, 0);
   \   0000039A   0023               MOVS     R3,#+0
   \   0000039C   0222               MOVS     R2,#+2
   \   0000039E   1946               MOV      R1,R3
   \   000003A0   0846               MOV      R0,R1
   \   000003A2   ........           BL       OSTimeDlyHMSM
   \                     ??HyperTerminal_26:
   \   000003A6   05F54570           ADD      R0,R5,#+788
   \   000003AA   ........           BL       printf
   \   000003AE   2046               MOV      R0,R4
   \   000003B0   ........           BL       ReadString
   \   000003B4   2046               MOV      R0,R4
   \   000003B6   ........           BL       VerifyIPAddress
   \   000003BA   0028               CMP      R0,#+0
   \   000003BC   E9D0               BEQ.N    ??HyperTerminal_27
   \   000003BE   2046               MOV      R0,R4
   \   000003C0   ........           BL       inet_addr
   \   000003C4   0E90               STR      R0,[SP, #+56]
   \   000003C6   03E0               B.N      ??HyperTerminal_28
    404          			}
    405          			while(1){
    406          				printf("\n\r2.请输入COM2端口:");
    407          				ReadString(RxBuffer);
    408          				if(IsNum(RxBuffer)){
    409          				  	ChConf[0].port=atoi(RxBuffer);
    410          				  	break;
    411          				}
    412          				printf("\n\r输入非法,请输入1024-65535之间整数!");  
   \                     ??HyperTerminal_29:
   \   000003C8   05F5CE70           ADD      R0,R5,#+412
   \   000003CC   ........           BL       printf
   \                     ??HyperTerminal_28:
   \   000003D0   05F54B70           ADD      R0,R5,#+812
   \   000003D4   ........           BL       printf
   \   000003D8   2046               MOV      R0,R4
   \   000003DA   ........           BL       ReadString
   \   000003DE   2046               MOV      R0,R4
   \   000003E0   ........           BL       IsNum
   \   000003E4   0028               CMP      R0,#+0
   \   000003E6   EFD0               BEQ.N    ??HyperTerminal_29
   \   000003E8   0EAE               ADD      R6,SP,#+56
   \   000003EA   2046               MOV      R0,R4
   \   000003EC   ........           BL       atoi
   \   000003F0   B080               STRH     R0,[R6, #+4]
   \   000003F2   09E0               B.N      ??HyperTerminal_30
    413          			}
    414          			while(1){
    415          				printf("\n\r3.请输入COM3 IP地址:");
    416          				ReadString(RxBuffer);
    417          				if(VerifyIPAddress(RxBuffer)){
    418          				  	ChConf[1].destip=inet_addr((unsigned char *)RxBuffer);
    419          				  	break;
    420          				}
    421          				printf("\n\r输入非法,请输入正确IP地址!"); 
   \                     ??HyperTerminal_31:
   \   000003F4   05F1D800           ADD      R0,R5,#+216
   \   000003F8   ........           BL       printf
    422          				OSTimeDlyHMSM(0, 0, 2, 0);
   \   000003FC   0023               MOVS     R3,#+0
   \   000003FE   0222               MOVS     R2,#+2
   \   00000400   1946               MOV      R1,R3
   \   00000402   0846               MOV      R0,R1
   \   00000404   ........           BL       OSTimeDlyHMSM
   \                     ??HyperTerminal_30:
   \   00000408   05F55070           ADD      R0,R5,#+832
   \   0000040C   ........           BL       printf
   \   00000410   2046               MOV      R0,R4
   \   00000412   ........           BL       ReadString
   \   00000416   2046               MOV      R0,R4
   \   00000418   ........           BL       VerifyIPAddress
   \   0000041C   0028               CMP      R0,#+0
   \   0000041E   E9D0               BEQ.N    ??HyperTerminal_31
   \   00000420   2046               MOV      R0,R4
   \   00000422   ........           BL       inet_addr
   \   00000426   B060               STR      R0,[R6, #+8]
   \   00000428   03E0               B.N      ??HyperTerminal_32
    423          			}
    424          			while(1){
    425          				printf("\n\r4.请输入对方COM3端口:");
    426          				ReadString(RxBuffer);
    427          				if(IsNum(RxBuffer)){
    428          				  	ChConf[1].port=atoi(RxBuffer);
    429          				  	break;
    430          				}
    431          				printf("\n\r输入非法,请输入1024-65535之间整数!");  
   \                     ??HyperTerminal_33:
   \   0000042A   05F5CE70           ADD      R0,R5,#+412
   \   0000042E   ........           BL       printf
   \                     ??HyperTerminal_32:
   \   00000432   05F55670           ADD      R0,R5,#+856
   \   00000436   ........           BL       printf
   \   0000043A   2046               MOV      R0,R4
   \   0000043C   ........           BL       ReadString
   \   00000440   2046               MOV      R0,R4
   \   00000442   ........           BL       IsNum
   \   00000446   0028               CMP      R0,#+0
   \   00000448   EFD0               BEQ.N    ??HyperTerminal_33
   \   0000044A   2046               MOV      R0,R4
   \   0000044C   ........           BL       atoi
   \   00000450   B081               STRH     R0,[R6, #+12]
   \   00000452   09E0               B.N      ??HyperTerminal_34
    432          			}
    433          			while(1){
    434          				printf("\n\r5.请输入COM4 IP地址:");
    435          				ReadString(RxBuffer);
    436          				if(VerifyIPAddress(RxBuffer)){
    437          				  	ChConf[2].destip=inet_addr((unsigned char *)RxBuffer);
    438          				  	break;
    439          				}
    440          				printf("\n\r输入非法,请输入正确IP地址!"); 
   \                     ??HyperTerminal_35:
   \   00000454   05F1D800           ADD      R0,R5,#+216
   \   00000458   ........           BL       printf
    441          				OSTimeDlyHMSM(0, 0, 2, 0);
   \   0000045C   0023               MOVS     R3,#+0
   \   0000045E   0222               MOVS     R2,#+2
   \   00000460   1946               MOV      R1,R3
   \   00000462   0846               MOV      R0,R1
   \   00000464   ........           BL       OSTimeDlyHMSM
   \                     ??HyperTerminal_34:
   \   00000468   05F55C70           ADD      R0,R5,#+880
   \   0000046C   ........           BL       printf
   \   00000470   2046               MOV      R0,R4
   \   00000472   ........           BL       ReadString
   \   00000476   2046               MOV      R0,R4
   \   00000478   ........           BL       VerifyIPAddress
   \   0000047C   0028               CMP      R0,#+0
   \   0000047E   E9D0               BEQ.N    ??HyperTerminal_35
   \   00000480   2046               MOV      R0,R4
   \   00000482   ........           BL       inet_addr
   \   00000486   3061               STR      R0,[R6, #+16]
   \   00000488   03E0               B.N      ??HyperTerminal_36
    442          			}
    443          			while(1){
    444          				printf("\n\r6.请输入COM4端口:");
    445          				ReadString(RxBuffer);
    446          				if(IsNum(RxBuffer)){
    447          				  	ChConf[2].port=atoi(RxBuffer);
    448          				  	break;
    449          				}
    450          				printf("\n\r输入非法,请输入1024-65535之间整数!");  
   \                     ??HyperTerminal_37:
   \   0000048A   05F5CE70           ADD      R0,R5,#+412
   \   0000048E   ........           BL       printf
   \                     ??HyperTerminal_36:
   \   00000492   05F56270           ADD      R0,R5,#+904
   \   00000496   ........           BL       printf
   \   0000049A   2046               MOV      R0,R4
   \   0000049C   ........           BL       ReadString
   \   000004A0   2046               MOV      R0,R4
   \   000004A2   ........           BL       IsNum
   \   000004A6   0028               CMP      R0,#+0
   \   000004A8   EFD0               BEQ.N    ??HyperTerminal_37
   \   000004AA   2046               MOV      R0,R4
   \   000004AC   ........           BL       atoi
   \   000004B0   B082               STRH     R0,[R6, #+20]
   \   000004B2   09E0               B.N      ??HyperTerminal_38
    451          			}
    452          			while(1){
    453          				printf("\n\r7.请输入COM5 IP地址:");
    454          				ReadString(RxBuffer);
    455          				if(VerifyIPAddress(RxBuffer)){
    456          				  	ChConf[3].destip=inet_addr((unsigned char *)RxBuffer);
    457          				  	break;
    458          				}
    459          				printf("\n\r输入非法,请输入正确IP地址!"); 
   \                     ??HyperTerminal_39:
   \   000004B4   05F1D800           ADD      R0,R5,#+216
   \   000004B8   ........           BL       printf
    460          				OSTimeDlyHMSM(0, 0, 2, 0);
   \   000004BC   0023               MOVS     R3,#+0
   \   000004BE   0222               MOVS     R2,#+2
   \   000004C0   1946               MOV      R1,R3
   \   000004C2   0846               MOV      R0,R1
   \   000004C4   ........           BL       OSTimeDlyHMSM
   \                     ??HyperTerminal_38:
   \   000004C8   05F56770           ADD      R0,R5,#+924
   \   000004CC   ........           BL       printf
   \   000004D0   2046               MOV      R0,R4
   \   000004D2   ........           BL       ReadString
   \   000004D6   2046               MOV      R0,R4
   \   000004D8   ........           BL       VerifyIPAddress
   \   000004DC   0028               CMP      R0,#+0
   \   000004DE   E9D0               BEQ.N    ??HyperTerminal_39
   \   000004E0   2046               MOV      R0,R4
   \   000004E2   ........           BL       inet_addr
   \   000004E6   B061               STR      R0,[R6, #+24]
   \   000004E8   03E0               B.N      ??HyperTerminal_40
    461          			}
    462          			while(1){
    463          				printf("\n\r8.请输入COM5端口:");
    464          				ReadString(RxBuffer);
    465          				if(IsNum(RxBuffer)){
    466          				  	ChConf[3].port=atoi(RxBuffer);
    467          				  	break;
    468          				}
    469          				printf("\n\r输入非法,请输入1024-65535之间整数!");  
   \                     ??HyperTerminal_41:
   \   000004EA   05F5CE70           ADD      R0,R5,#+412
   \   000004EE   ........           BL       printf
   \                     ??HyperTerminal_40:
   \   000004F2   05F56D70           ADD      R0,R5,#+948
   \   000004F6   ........           BL       printf
   \   000004FA   2046               MOV      R0,R4
   \   000004FC   ........           BL       ReadString
   \   00000500   2046               MOV      R0,R4
   \   00000502   ........           BL       IsNum
   \   00000506   0028               CMP      R0,#+0
   \   00000508   EFD0               BEQ.N    ??HyperTerminal_41
   \   0000050A   2046               MOV      R0,R4
   \   0000050C   ........           BL       atoi
   \   00000510   B083               STRH     R0,[R6, #+28]
   \   00000512   09E0               B.N      ??HyperTerminal_42
    470          			}
    471          			while(1){
    472          				printf("\n\r9.请输入CAN IP地址:");
    473          				ReadString(RxBuffer);
    474          				if(VerifyIPAddress(RxBuffer)){
    475          				  	ChConf[4].destip=inet_addr((unsigned char *)RxBuffer);
    476          				  	break;
    477          				}
    478          				printf("\n\r输入非法,请输入正确IP地址!"); 
   \                     ??HyperTerminal_43:
   \   00000514   05F1D800           ADD      R0,R5,#+216
   \   00000518   ........           BL       printf
    479          				OSTimeDlyHMSM(0, 0, 2, 0);
   \   0000051C   0023               MOVS     R3,#+0
   \   0000051E   0222               MOVS     R2,#+2
   \   00000520   1946               MOV      R1,R3
   \   00000522   0846               MOV      R0,R1
   \   00000524   ........           BL       OSTimeDlyHMSM
   \                     ??HyperTerminal_42:
   \   00000528   05F57270           ADD      R0,R5,#+968
   \   0000052C   ........           BL       printf
   \   00000530   2046               MOV      R0,R4
   \   00000532   ........           BL       ReadString
   \   00000536   2046               MOV      R0,R4
   \   00000538   ........           BL       VerifyIPAddress
   \   0000053C   0028               CMP      R0,#+0
   \   0000053E   E9D0               BEQ.N    ??HyperTerminal_43
   \   00000540   2046               MOV      R0,R4
   \   00000542   ........           BL       inet_addr
   \   00000546   3062               STR      R0,[R6, #+32]
   \   00000548   03E0               B.N      ??HyperTerminal_44
    480          			}
    481          			while(1){
    482          				printf("\n\r10.请输入CAN端口:");
    483          				ReadString(RxBuffer);
    484          				if(IsNum(RxBuffer)){
    485          				  	ChConf[4].port=atoi(RxBuffer);
    486          				  	break;
    487          				}
    488          				printf("\n\r输入非法,请输入1024-65535之间整数!");  
   \                     ??HyperTerminal_45:
   \   0000054A   05F5CE70           ADD      R0,R5,#+412
   \   0000054E   ........           BL       printf
   \                     ??HyperTerminal_44:
   \   00000552   05F57870           ADD      R0,R5,#+992
   \   00000556   ........           BL       printf
   \   0000055A   2046               MOV      R0,R4
   \   0000055C   ........           BL       ReadString
   \   00000560   2046               MOV      R0,R4
   \   00000562   ........           BL       IsNum
   \   00000566   0028               CMP      R0,#+0
   \   00000568   EFD0               BEQ.N    ??HyperTerminal_45
   \   0000056A   2046               MOV      R0,R4
   \   0000056C   ........           BL       atoi
   \   00000570   B084               STRH     R0,[R6, #+36]
    489          			}
    490          			set_chconf(ChConf);
   \   00000572   0EA8               ADD      R0,SP,#+56
   \   00000574   ........           BL       set_chconf
    491          			printf("\n\r\n\r对方IP配置完毕，从新上电后生效...............");  
   \   00000578   05F57D70           ADD      R0,R5,#+1012
   \   0000057C   ........           BL       printf
    492          			printf("\n\r\n\r按任意键继续..........");
   \   00000580   05F1A400           ADD      R0,R5,#+164
   \   00000584   ........           BL       printf
    493          			getch();
   \   00000588   ........           BL       getch
   \   0000058C   18B0               ADD      SP,SP,#+96
   \   0000058E   BDE8F081           POP      {R4-R8,PC}
    494          		  	break;	
    495          		case 5:
    496          		  	get_commport(BaudRate);
   \                     ??HyperTerminal_46:
   \   00000592   03A8               ADD      R0,SP,#+12
   \   00000594   ........           BL       get_commport
    497          		  	printf("%s\n\r",TxBuffer[1]);
   \   00000598   D54D               LDR.N    R5,??HyperTerminal_6  ;; `?<Constant "%s\\n\\r">`
   \   0000059A   7168               LDR      R1,[R6, #+4]
   \   0000059C   2846               MOV      R0,R5
   \   0000059E   ........           BL       printf
    498          			printf("COM2 波特率: %d\n\r",BaudRate[0]);
   \   000005A2   BDF80C10           LDRH     R1,[SP, #+12]
   \   000005A6   05F58560           ADD      R0,R5,#+1064
   \   000005AA   ........           BL       printf
    499          			printf("COM3 波特率: %d\n\r",BaudRate[1]);
   \   000005AE   03AE               ADD      R6,SP,#+12
   \   000005B0   7188               LDRH     R1,[R6, #+2]
   \   000005B2   05F23C40           ADDW     R0,R5,#+1084
   \   000005B6   ........           BL       printf
    500          			printf("COM4 波特率: %d\n\r",BaudRate[2]);
   \   000005BA   B188               LDRH     R1,[R6, #+4]
   \   000005BC   05F58A60           ADD      R0,R5,#+1104
   \   000005C0   ........           BL       printf
    501          			printf("COM5 波特率: %d\n\r",BaudRate[3]);
   \   000005C4   F188               LDRH     R1,[R6, #+6]
   \   000005C6   05F26440           ADDW     R0,R5,#+1124
   \   000005CA   ........           BL       printf
    502          			printf("\n\r\n\r按任意键继续..........");
   \   000005CE   05F1A400           ADD      R0,R5,#+164
   \   000005D2   ........           BL       printf
    503          			getch();
   \   000005D6   ........           BL       getch
   \   000005DA   18B0               ADD      SP,SP,#+96
   \   000005DC   BDE8F081           POP      {R4-R8,PC}
    504          		  	break;
    505          		case 6:
    506          		  	printf("%s\n\r",TxBuffer[1]);
   \                     ??HyperTerminal_47:
   \   000005E0   C34D               LDR.N    R5,??HyperTerminal_6  ;; `?<Constant "%s\\n\\r">`
   \   000005E2   7168               LDR      R1,[R6, #+4]
   \   000005E4   2846               MOV      R0,R5
   \   000005E6   ........           BL       printf
   \   000005EA   03AE               ADD      R6,SP,#+12
   \   000005EC   03E0               B.N      ??HyperTerminal_48
    507          			
    508          			while(1){
    509          				printf("\n\r1.请输入COM2 波特率:");
    510          				ReadString(RxBuffer);
    511          				if(IsNum(RxBuffer)){
    512          				  	BaudRate[0]=atoi(RxBuffer);
    513          				  	if(!VerifyBaudRate(BaudRate[0])){
    514          						printf("\n\r输入非法,请输入正确波特率!");
   \                     ??HyperTerminal_49:
   \   000005EE   05F59260           ADD      R0,R5,#+1168
   \   000005F2   ........           BL       printf
    515          						continue;
    516          					}
   \                     ??HyperTerminal_48:
   \   000005F6   05F58F60           ADD      R0,R5,#+1144
   \   000005FA   ........           BL       printf
   \   000005FE   2046               MOV      R0,R4
   \   00000600   ........           BL       ReadString
   \   00000604   2046               MOV      R0,R4
   \   00000606   ........           BL       IsNum
   \   0000060A   0028               CMP      R0,#+0
   \   0000060C   EFD0               BEQ.N    ??HyperTerminal_49
   \   0000060E   2046               MOV      R0,R4
   \   00000610   ........           BL       atoi
   \   00000614   ADF80C00           STRH     R0,[SP, #+12]
   \   00000618   BDF80C00           LDRH     R0,[SP, #+12]
   \   0000061C   ........           BL       VerifyBaudRate
   \   00000620   0028               CMP      R0,#+0
   \   00000622   E4D0               BEQ.N    ??HyperTerminal_49
    517          					break;
    518          				}
    519          				printf("\n\r输入非法,请输入正确波特率!");  
    520          			}
    521          			while(1){
    522          				printf("\n\r2.请输入COM3 波特率:");
   \                     ??HyperTerminal_50:
   \   00000624   05F59660           ADD      R0,R5,#+1200
   \   00000628   ........           BL       printf
    523          				ReadString(RxBuffer);
   \   0000062C   2046               MOV      R0,R4
   \   0000062E   ........           BL       ReadString
    524          				if(IsNum(RxBuffer)){
   \   00000632   2046               MOV      R0,R4
   \   00000634   ........           BL       IsNum
   \   00000638   0028               CMP      R0,#+0
   \   0000063A   08D0               BEQ.N    ??HyperTerminal_51
    525          				  	BaudRate[1]=atoi(RxBuffer);
   \   0000063C   2046               MOV      R0,R4
   \   0000063E   ........           BL       atoi
   \   00000642   7080               STRH     R0,[R6, #+2]
    526          				  	if(!VerifyBaudRate(BaudRate[1])){
   \   00000644   7088               LDRH     R0,[R6, #+2]
   \   00000646   ........           BL       VerifyBaudRate
   \   0000064A   0028               CMP      R0,#+0
   \   0000064C   08D1               BNE.N    ??HyperTerminal_52
    527          						printf("\n\r输入非法,请输入正确波特率!");
   \                     ??HyperTerminal_51:
   \   0000064E   05F59260           ADD      R0,R5,#+1168
   \   00000652   ........           BL       printf
    528          						continue;
   \   00000656   E5E7               B.N      ??HyperTerminal_50
    529          					}
    530          					break;
    531          				}
    532          				printf("\n\r输入非法,请输入正确波特率!");  
    533          			}
    534          			while(1){
    535          				printf("\n\r3.请输入COM4 波特率:");
    536          				ReadString(RxBuffer);
    537          				if(IsNum(RxBuffer)){
    538          				  	BaudRate[2]=atoi(RxBuffer);
    539          				  	if(!VerifyBaudRate(BaudRate[2])){
    540          						printf("\n\r输入非法,请输入正确波特率!");
   \                     ??HyperTerminal_53:
   \   00000658   05F59260           ADD      R0,R5,#+1168
   \   0000065C   ........           BL       printf
    541          						continue;
    542          					}
   \                     ??HyperTerminal_52:
   \   00000660   05F59960           ADD      R0,R5,#+1224
   \   00000664   ........           BL       printf
   \   00000668   2046               MOV      R0,R4
   \   0000066A   ........           BL       ReadString
   \   0000066E   2046               MOV      R0,R4
   \   00000670   ........           BL       IsNum
   \   00000674   0028               CMP      R0,#+0
   \   00000676   EFD0               BEQ.N    ??HyperTerminal_53
   \   00000678   2046               MOV      R0,R4
   \   0000067A   ........           BL       atoi
   \   0000067E   B080               STRH     R0,[R6, #+4]
   \   00000680   B088               LDRH     R0,[R6, #+4]
   \   00000682   ........           BL       VerifyBaudRate
   \   00000686   0028               CMP      R0,#+0
   \   00000688   E6D0               BEQ.N    ??HyperTerminal_53
    543          					break;
    544          				}
    545          				printf("\n\r输入非法,请输入正确波特率!");  
    546          			}
    547          			while(1){
    548          				printf("\n\r4.请输入COM5 波特率:");
   \                     ??HyperTerminal_54:
   \   0000068A   05F59C60           ADD      R0,R5,#+1248
   \   0000068E   ........           BL       printf
    549          				ReadString(RxBuffer);
   \   00000692   2046               MOV      R0,R4
   \   00000694   ........           BL       ReadString
    550          				if(IsNum(RxBuffer)){
   \   00000698   2046               MOV      R0,R4
   \   0000069A   ........           BL       IsNum
   \   0000069E   0028               CMP      R0,#+0
   \   000006A0   08D0               BEQ.N    ??HyperTerminal_55
    551          				  	BaudRate[3]=atoi(RxBuffer);
   \   000006A2   2046               MOV      R0,R4
   \   000006A4   ........           BL       atoi
   \   000006A8   F080               STRH     R0,[R6, #+6]
    552          				  	if(!VerifyBaudRate(BaudRate[3])){
   \   000006AA   F088               LDRH     R0,[R6, #+6]
   \   000006AC   ........           BL       VerifyBaudRate
   \   000006B0   0028               CMP      R0,#+0
   \   000006B2   04D1               BNE.N    ??HyperTerminal_56
    553          						printf("\n\r输入非法,请输入正确波特率!");
   \                     ??HyperTerminal_55:
   \   000006B4   05F59260           ADD      R0,R5,#+1168
   \   000006B8   ........           BL       printf
    554          						continue;
   \   000006BC   E5E7               B.N      ??HyperTerminal_54
    555          					}
    556          					break;
    557          				}
    558          				printf("\n\r输入非法,请输入正确波特率!");  
    559          			}
    560          			set_commport(BaudRate);
   \                     ??HyperTerminal_56:
   \   000006BE   03A8               ADD      R0,SP,#+12
   \   000006C0   ........           BL       set_commport
    561          			printf("\n\r\n\rCOM口配置完毕，从新上电后生效...............");  
   \   000006C4   05F59F60           ADD      R0,R5,#+1272
   \   000006C8   ........           BL       printf
    562          			printf("\n\r\n\r按任意键继续..........");
   \   000006CC   05F1A400           ADD      R0,R5,#+164
   \   000006D0   ........           BL       printf
    563          			getch();
   \   000006D4   ........           BL       getch
   \   000006D8   18B0               ADD      SP,SP,#+96
   \   000006DA   BDE8F081           POP      {R4-R8,PC}
    564          		  	break;
    565          		case 7:
    566          		  	printf("%s\n\r",TxBuffer[1]);
   \                     ??HyperTerminal_57:
   \   000006DE   844D               LDR.N    R5,??HyperTerminal_6  ;; `?<Constant "%s\\n\\r">`
   \   000006E0   7168               LDR      R1,[R6, #+4]
   \   000006E2   2846               MOV      R0,R5
   \   000006E4   ........           BL       printf
    567          			get_canbus(&CanConf);
   \   000006E8   02A8               ADD      R0,SP,#+8
   \   000006EA   ........           BL       get_canbus
    568          			printf("\n\r1.CAN BUS 波特率: %d",CanConf.BaudRate);
   \   000006EE   BDF80810           LDRH     R1,[SP, #+8]
   \   000006F2   05F22C50           ADDW     R0,R5,#+1324
   \   000006F6   ........           BL       printf
    569          			printf("\n\r2.CAN BUS 桢类型: %s",CanConf.IDE==CAN_ID_STD?"CAN_ID_STD":"CAN_ID_EXT");
   \   000006FA   9DF80A00           LDRB     R0,[SP, #+10]
   \   000006FE   0028               CMP      R0,#+0
   \   00000700   02D1               BNE.N    ??HyperTerminal_58
   \   00000702   05F25C51           ADDW     R1,R5,#+1372
   \   00000706   01E0               B.N      ??HyperTerminal_59
   \                     ??HyperTerminal_58:
   \   00000708   05F5AD61           ADD      R1,R5,#+1384
   \                     ??HyperTerminal_59:
   \   0000070C   05F24450           ADDW     R0,R5,#+1348
   \   00000710   ........           BL       printf
    570          			printf("\n\r\n\r按任意键继续..........");
   \   00000714   05F1A400           ADD      R0,R5,#+164
   \   00000718   ........           BL       printf
    571          			getch();
   \   0000071C   ........           BL       getch
   \   00000720   18B0               ADD      SP,SP,#+96
   \   00000722   BDE8F081           POP      {R4-R8,PC}
    572          			break;
    573          		case 8:
    574          		  	printf("%s\n\r",TxBuffer[1]);
   \                     ??HyperTerminal_60:
   \   00000726   724D               LDR.N    R5,??HyperTerminal_6  ;; `?<Constant "%s\\n\\r">`
   \   00000728   7168               LDR      R1,[R6, #+4]
   \   0000072A   2846               MOV      R0,R5
   \   0000072C   ........           BL       printf
   \   00000730   03E0               B.N      ??HyperTerminal_61
    575          			while(1){
    576          				printf("\n\r1.请输入CAN BUS 波特率:");
    577          				ReadString(RxBuffer);
    578          				if(IsNum(RxBuffer)){
    579          				  	CanConf.BaudRate=atoi(RxBuffer);
    580          					if(!VerifyCanBaudRate(CanConf.BaudRate)){
    581          						printf("\n\r输入非法,请输入正确波特率!");
   \                     ??HyperTerminal_62:
   \   00000732   05F59260           ADD      R0,R5,#+1168
   \   00000736   ........           BL       printf
    582          						continue;
    583          					}
   \                     ??HyperTerminal_61:
   \   0000073A   05F27450           ADDW     R0,R5,#+1396
   \   0000073E   ........           BL       printf
   \   00000742   2046               MOV      R0,R4
   \   00000744   ........           BL       ReadString
   \   00000748   2046               MOV      R0,R4
   \   0000074A   ........           BL       IsNum
   \   0000074E   0028               CMP      R0,#+0
   \   00000750   EFD0               BEQ.N    ??HyperTerminal_62
   \   00000752   2046               MOV      R0,R4
   \   00000754   ........           BL       atoi
   \   00000758   ADF80800           STRH     R0,[SP, #+8]
   \   0000075C   BDF80800           LDRH     R0,[SP, #+8]
   \   00000760   ........           BL       VerifyCanBaudRate
   \   00000764   0028               CMP      R0,#+0
   \   00000766   E4D0               BEQ.N    ??HyperTerminal_62
    584          					break;
    585          				}
    586          				printf("\n\r输入非法,请输入正确波特率!");  
    587          			}
    588          			while(1){
    589          				printf("\n\r2.请输入CAN BUS 桢类型(0、为标准，4、为扩展):");
   \                     ??HyperTerminal_63:
   \   00000768   05F5B260           ADD      R0,R5,#+1424
   \   0000076C   ........           BL       printf
    590          				ReadString(RxBuffer);
   \   00000770   2046               MOV      R0,R4
   \   00000772   ........           BL       ReadString
    591          				if(IsNum(RxBuffer)){
   \   00000776   2046               MOV      R0,R4
   \   00000778   ........           BL       IsNum
   \   0000077C   0028               CMP      R0,#+0
   \   0000077E   1FD0               BEQ.N    ??HyperTerminal_64
    592          				  	CanConf.IDE=atoi(RxBuffer);
   \   00000780   2046               MOV      R0,R4
   \   00000782   ........           BL       atoi
   \   00000786   8DF80A00           STRB     R0,[SP, #+10]
    593          					if(CanConf.IDE!=CAN_ID_STD && CanConf.IDE!=CAN_ID_EXT){
   \   0000078A   9DF80A00           LDRB     R0,[SP, #+10]
   \   0000078E   0028               CMP      R0,#+0
   \   00000790   06D0               BEQ.N    ??HyperTerminal_65
   \   00000792   0428               CMP      R0,#+4
   \   00000794   04D0               BEQ.N    ??HyperTerminal_65
    594          						printf("\n\r输入非法,请输入正确CAN BUS 桢类型!");
   \   00000796   05F5B860           ADD      R0,R5,#+1472
   \   0000079A   ........           BL       printf
    595          						continue;
   \   0000079E   E3E7               B.N      ??HyperTerminal_63
    596          					}
    597          					break;
    598          				}
    599          				printf("\n\r输入非法,请输入正确CAN BUS 桢类型!!");  
    600          			}
    601          			set_canbus(CanConf);
   \                     ??HyperTerminal_65:
   \   000007A0   0298               LDR      R0,[SP, #+8]
   \   000007A2   ........           BL       set_canbus
    602          			printf("\n\r\n\rCAN BUS 配置完毕，从新上电后生效...............");  
   \   000007A6   05F5C260           ADD      R0,R5,#+1552
   \   000007AA   ........           BL       printf
    603          			printf("\n\r\n\r按任意键继续..........");
   \   000007AE   05F1A400           ADD      R0,R5,#+164
   \   000007B2   ........           BL       printf
    604          			getch();
   \   000007B6   ........           BL       getch
   \   000007BA   18B0               ADD      SP,SP,#+96
   \   000007BC   BDE8F081           POP      {R4-R8,PC}
   \                     ??HyperTerminal_64:
   \   000007C0   05F5BD60           ADD      R0,R5,#+1512
   \   000007C4   ........           BL       printf
   \   000007C8   CEE7               B.N      ??HyperTerminal_63
    605          			break;
    606          		case 9:
    607          		  	printf("%s\n\r",TxBuffer[1]);
   \                     ??HyperTerminal_66:
   \   000007CA   494D               LDR.N    R5,??HyperTerminal_6  ;; `?<Constant "%s\\n\\r">`
   \   000007CC   7168               LDR      R1,[R6, #+4]
   \   000007CE   2846               MOV      R0,R5
   \   000007D0   ........           BL       printf
    608          		  	printf("\r\n\r\n固件版本:V1.0.0\n\r");
   \   000007D4   05F24460           ADDW     R0,R5,#+1604
   \   000007D8   ........           BL       printf
    609          			printf("件号:YKA20905AAA\n\r");
   \   000007DC   05F25C60           ADDW     R0,R5,#+1628
   \   000007E0   ........           BL       printf
    610          			OSTimeDlyHMSM(0, 0, 5, 0);
   \   000007E4   0023               MOVS     R3,#+0
   \   000007E6   0522               MOVS     R2,#+5
   \   000007E8   1946               MOV      R1,R3
   \   000007EA   0846               MOV      R0,R1
   \   000007EC   ........           BL       OSTimeDlyHMSM
   \   000007F0   18B0               ADD      SP,SP,#+96
   \   000007F2   BDE8F081           POP      {R4-R8,PC}
    611          		  	break;	
    612          		case 10:
    613          		  	do{
    614          			  	printf("%s\n\r",TxBuffer[1]);
   \                     ??HyperTerminal_67:
   \   000007F6   3E4D               LDR.N    R5,??HyperTerminal_6  ;; `?<Constant "%s\\n\\r">`
   \   000007F8   7168               LDR      R1,[R6, #+4]
   \   000007FA   2846               MOV      R0,R5
   \   000007FC   ........           BL       printf
    615          				printf("\n\rTask			Total Stack	FreeStack	UsedStack");
   \   00000800   05F5CE60           ADD      R0,R5,#+1648
   \   00000804   ........           BL       printf
    616          				printf("\n\r--------------------------------------------------------------------");
   \   00000808   05F29C60           ADDW     R0,R5,#+1692
   \   0000080C   ........           BL       printf
    617          				if(OSTaskStkChk(APP_CFG_TASK_START_PRIO,&data)==OS_NO_ERR){
   \   00000810   00A9               ADD      R1,SP,#+0
   \   00000812   0320               MOVS     R0,#+3
   \   00000814   ........           BL       OSTaskStkChk
   \   00000818   0028               CMP      R0,#+0
   \   0000081A   07D1               BNE.N    ??HyperTerminal_68
    618          					printf("\n\rApp_TaskStart()		%4ld		%4ld		%4ld",data.OSFree+data.OSUsed,data.OSFree,data.OSUsed);
   \   0000081C   019B               LDR      R3,[SP, #+4]
   \   0000081E   009A               LDR      R2,[SP, #+0]
   \   00000820   1046               MOV      R0,R2
   \   00000822   1918               ADDS     R1,R3,R0
   \   00000824   05F2E460           ADDW     R0,R5,#+1764
   \   00000828   ........           BL       printf
    619          				}
    620          				if(OSTaskStkChk(USART_TASK_PRIO,&data)==OS_NO_ERR){
   \                     ??HyperTerminal_68:
   \   0000082C   00A9               ADD      R1,SP,#+0
   \   0000082E   0420               MOVS     R0,#+4
   \   00000830   ........           BL       OSTaskStkChk
   \   00000834   0028               CMP      R0,#+0
   \   00000836   07D1               BNE.N    ??HyperTerminal_69
    621          					printf("\n\rUSART_Task()		%4ld		%4ld		%4ld",data.OSFree+data.OSUsed,data.OSFree,data.OSUsed);
   \   00000838   019B               LDR      R3,[SP, #+4]
   \   0000083A   009A               LDR      R2,[SP, #+0]
   \   0000083C   1046               MOV      R0,R2
   \   0000083E   1918               ADDS     R1,R3,R0
   \   00000840   05F5E160           ADD      R0,R5,#+1800
   \   00000844   ........           BL       printf
    622          				}
    623          				if(OSTaskStkChk(CAN_TASK_PRIO,&data)==OS_NO_ERR){
   \                     ??HyperTerminal_69:
   \   00000848   00A9               ADD      R1,SP,#+0
   \   0000084A   0520               MOVS     R0,#+5
   \   0000084C   ........           BL       OSTaskStkChk
   \   00000850   0028               CMP      R0,#+0
   \   00000852   07D1               BNE.N    ??HyperTerminal_70
    624          					printf("\n\rCAN_Task()		%4ld		%4ld		%4ld",data.OSFree+data.OSUsed,data.OSFree,data.OSUsed);
   \   00000854   019B               LDR      R3,[SP, #+4]
   \   00000856   009A               LDR      R2,[SP, #+0]
   \   00000858   1046               MOV      R0,R2
   \   0000085A   1918               ADDS     R1,R3,R0
   \   0000085C   05F22C70           ADDW     R0,R5,#+1836
   \   00000860   ........           BL       printf
    625          				}
    626          				if(OSTaskStkChk(Socked_TASK_PRIO,&data)==OS_NO_ERR){
   \                     ??HyperTerminal_70:
   \   00000864   00A9               ADD      R1,SP,#+0
   \   00000866   0620               MOVS     R0,#+6
   \   00000868   ........           BL       OSTaskStkChk
   \   0000086C   0028               CMP      R0,#+0
   \   0000086E   07D1               BNE.N    ??HyperTerminal_71
    627          					printf("\n\rSocked_Task()		%4ld		%4ld		%4ld",data.OSFree+data.OSUsed,data.OSFree,data.OSUsed);
   \   00000870   019B               LDR      R3,[SP, #+4]
   \   00000872   009A               LDR      R2,[SP, #+0]
   \   00000874   1046               MOV      R0,R2
   \   00000876   1918               ADDS     R1,R3,R0
   \   00000878   05F24C70           ADDW     R0,R5,#+1868
   \   0000087C   ........           BL       printf
    628          				}
    629          				if(OSTaskStkChk(HYPER_TERMINAL_TASK_PRIO,&data)==OS_NO_ERR){
   \                     ??HyperTerminal_71:
   \   00000880   00A9               ADD      R1,SP,#+0
   \   00000882   0720               MOVS     R0,#+7
   \   00000884   ........           BL       OSTaskStkChk
   \   00000888   0028               CMP      R0,#+0
   \   0000088A   07D1               BNE.N    ??HyperTerminal_72
    630          					printf("\n\rHyperTerminal_Task()	%4ld		%4ld		%4ld",data.OSFree+data.OSUsed,data.OSFree,data.OSUsed);
   \   0000088C   019B               LDR      R3,[SP, #+4]
   \   0000088E   009A               LDR      R2,[SP, #+0]
   \   00000890   1046               MOV      R0,R2
   \   00000892   1918               ADDS     R1,R3,R0
   \   00000894   05F5EE60           ADD      R0,R5,#+1904
   \   00000898   ........           BL       printf
    631          				}
    632          				printf("\r\n\r\n\r\n按任意键返回.................");
   \                     ??HyperTerminal_72:
   \   0000089C   05F5F360           ADD      R0,R5,#+1944
   \   000008A0   ........           BL       printf
    633          				OSTimeDlyHMSM(0, 0, 1, 0);
   \   000008A4   0023               MOVS     R3,#+0
   \   000008A6   0122               MOVS     R2,#+1
   \   000008A8   1946               MOV      R1,R3
   \   000008AA   0846               MOV      R0,R1
   \   000008AC   ........           BL       OSTimeDlyHMSM
    634          			}while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
   \   000008B0   2021               MOVS     R1,#+32
   \   000008B2   4046               MOV      R0,R8
   \   000008B4   ........           BL       USART_GetFlagStatus
   \   000008B8   0028               CMP      R0,#+0
   \   000008BA   15D1               BNE.N    ??HyperTerminal_73
   \   000008BC   9BE7               B.N      ??HyperTerminal_67
    635          			
    636          		  	break;
    637          		case 11:
    638          		  	printf("\r\n配置程序退出，下次上电启动!\n\r");
   \                     ??HyperTerminal_74:
   \   000008BE   0D48               LDR.N    R0,??HyperTerminal_6+0x4  ;; `?<Constant "%s\\n\\r">` + 1980
   \   000008C0   ........           BL       printf
    639          			free(RxBuffer);
   \   000008C4   2046               MOV      R0,R4
   \   000008C6   ........           BL       free
    640          			OSTaskDel(OS_PRIO_SELF);
   \   000008CA   FF20               MOVS     R0,#+255
   \   000008CC   ........           BL       OSTaskDel
   \   000008D0   18B0               ADD      SP,SP,#+96
   \   000008D2   BDE8F081           POP      {R4-R8,PC}
    641          		  	break;		  
    642          		default:
    643          		  	printf("\r\n选择错误,请从新选择!\n\r");
   \                     ??HyperTerminal_4:
   \   000008D6   0848               LDR.N    R0,??HyperTerminal_6+0x8  ;; `?<Constant "%s\\n\\r">` + 2012
   \   000008D8   ........           BL       printf
    644          			OSTimeDlyHMSM(0, 0, 2, 0);
   \   000008DC   0023               MOVS     R3,#+0
   \   000008DE   0222               MOVS     R2,#+2
   \   000008E0   1946               MOV      R1,R3
   \   000008E2   0846               MOV      R0,R1
   \   000008E4   ........           BL       OSTimeDlyHMSM
    645          	}
    646          }
   \                     ??HyperTerminal_73:
   \   000008E8   18B0               ADD      SP,SP,#+96
   \   000008EA   BDE8F081           POP      {R4-R8,PC}       ;; return
   \   000008EE   00BF               Nop      
   \                     ??HyperTerminal_6:
   \   000008F0   ........           DC32     `?<Constant "%s\\n\\r">`
   \   000008F4   ........           DC32     `?<Constant "%s\\n\\r">` + 1980
   \   000008F8   ........           DC32     `?<Constant "%s\\n\\r">` + 2012

   \                                 In section .text, align 4, keep-with-next
    647          void STM32_USART_Interrupt(USART_TypeDef* USARTx)
    648          {
   \                     STM32_USART_Interrupt:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0546               MOV      R5,R0
    649            	if(USART_GetITStatus(USARTx, USART_IT_RXNE) != RESET){
   \   00000004   40F22551           MOVW     R1,#+1317
   \   00000008   ........           BL       USART_GetITStatus
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   24D0               BEQ.N    ??STM32_USART_Interrupt_0
    650              	/* Read one byte from the receive data register */
    651              	RxBuffer[RxCount].msg = USART_ReceiveData(USARTx);
   \   00000010   2846               MOV      R0,R5
   \   00000012   ........           BL       USART_ReceiveData
   \   00000016   114C               LDR.N    R4,??STM32_USART_Interrupt_1  ;; RxBuffer
   \   00000018   94F80021           LDRB     R2,[R4, #+256]
   \   0000001C   04EB4201           ADD      R1,R4,R2, LSL #+1
   \   00000020   4870               STRB     R0,[R1, #+1]
    652          		if(USARTx==USART2)
   \   00000022   ....               LDR.N    R0,??DataTable11  ;; 0x40004400
   \   00000024   8542               CMP      R5,R0
   \   00000026   03D1               BNE.N    ??STM32_USART_Interrupt_2
    653          			RxBuffer[RxCount].id=COM2;
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   04F81200           STRB     R0,[R4, R2, LSL #+1]
   \   0000002E   05E0               B.N      ??STM32_USART_Interrupt_3
    654          		else if(USARTx==USART3)
   \                     ??STM32_USART_Interrupt_2:
   \   00000030   ....               LDR.N    R0,??DataTable12  ;; 0x40004800
   \   00000032   8542               CMP      R5,R0
   \   00000034   02D1               BNE.N    ??STM32_USART_Interrupt_3
    655          		  	RxBuffer[RxCount].id=COM3;
   \   00000036   0120               MOVS     R0,#+1
   \   00000038   04F81200           STRB     R0,[R4, R2, LSL #+1]
    656          		OSQPost(UartMsgQ,&RxBuffer[RxCount]);
   \                     ??STM32_USART_Interrupt_3:
   \   0000003C   0848               LDR.N    R0,??STM32_USART_Interrupt_1+0x4  ;; UartMsgQ
   \   0000003E   0068               LDR      R0,[R0, #+0]
   \   00000040   ........           BL       OSQPost
    657          		RxCount++;
   \   00000044   94F80001           LDRB     R0,[R4, #+256]
   \   00000048   401C               ADDS     R0,R0,#+1
   \   0000004A   84F80001           STRB     R0,[R4, #+256]
    658          		if(RxCount>=UartMsgNum)
   \   0000004E   C0B2               UXTB     R0,R0
   \   00000050   8028               CMP      R0,#+128
   \   00000052   02D3               BCC.N    ??STM32_USART_Interrupt_0
    659          			RxCount=0;
   \   00000054   0020               MOVS     R0,#+0
   \   00000056   84F80001           STRB     R0,[R4, #+256]
    660            	}
    661          }
   \                     ??STM32_USART_Interrupt_0:
   \   0000005A   31BD               POP      {R0,R4,R5,PC}    ;; return
   \                     ??STM32_USART_Interrupt_1:
   \   0000005C   ........           DC32     RxBuffer
   \   00000060   ........           DC32     UartMsgQ

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     TxBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   00380140           DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   00440040           DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   00480040           DC32     0x40004800

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\033[2J                 ...">`:
   \   00000000   1B5B324A2020       DC8 1BH, 5BH, 32H, 4AH, 20H, 20H, 20H, 20H
   \              2020        
   \   00000008   202020202020       DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \              2020        
   \   00000010   202020202020       DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 57H
   \              2057        
   \   00000018   656C636F6D65       DC8 65H, 6CH, 63H, 6FH, 6DH, 65H, 20H, 74H
   \              2074        
   \   00000020   6F20544A494E       DC8 6FH, 20H, 54H, 4AH, 49H, 4EH, 43H, 20H
   \              4320        
   \   00000028   43414E202620       DC8 43H, 41H, 4EH, 20H, 26H, 20H, 55H, 53H
   \              5553        
   \   00000030   415254206F76       DC8 41H, 52H, 54H, 20H, 6FH, 76H, 65H, 72H
   \              6572        
   \   00000038   20495020756E       DC8 20H, 49H, 50H, 20H, 75H, 6EH, 69H, 74H
   \              6974        
   \   00000040   0A0D0A0D2009       DC8 0AH, 0DH, 0AH, 0DH, 20H, 9, 0AH, 0DH
   \              0A0D        
   \   00000048   312EB2E9BFB4       DC8 31H, 2EH, 0B2H, 0E9H, 0BFH, 0B4H, 0B1H, 0BEH
   \              B1BE        
   \   00000050   B5D84950B5D8       DC8 0B5H, 0D8H, 49H, 50H, 0B5H, 0D8H, 0D6H, 0B7H
   \              D6B7        
   \   00000058   090A0D322EC9       DC8 9, 0AH, 0DH, 32H, 2EH, 0C9H, 0E8H, 0D6H
   \              E8D6        
   \   00000060   C3B1BEB5D849       DC8 0C3H, 0B1H, 0BEH, 0B5H, 0D8H, 49H, 50H, 0B5H
   \              50B5        
   \   00000068   D8D6B7090A0D       DC8 0D8H, 0D6H, 0B7H, 9, 0AH, 0DH, 33H, 2EH
   \              332E        
   \   00000070   B2E9BFB4B6D4       DC8 0B2H, 0E9H, 0BFH, 0B4H, 0B6H, 0D4H, 0B7H, 0BDH
   \              B7BD        
   \   00000078   4950B5D8D6B7       DC8 49H, 50H, 0B5H, 0D8H, 0D6H, 0B7H, 9, 0AH
   \              090A        
   \   00000080   0D342EC9E8D6       DC8 0DH, 34H, 2EH, 0C9H, 0E8H, 0D6H, 0C3H, 0B6H
   \              C3B6        
   \   00000088   D4B7BD4950B5       DC8 0D4H, 0B7H, 0BDH, 49H, 50H, 0B5H, 0D8H, 0D6H
   \              D8D6        
   \   00000090   B7090A0D352E       DC8 0B7H, 9, 0AH, 0DH, 35H, 2EH, 0B2H, 0E9H
   \              B2E9        
   \   00000098   BFB4B4AEBFDA       DC8 0BFH, 0B4H, 0B4H, 0AEH, 0BFH, 0DAH, 0B2H, 0CEH
   \              B2CE        
   \   000000A0   CAFD090A0D36       DC8 0CAH, 0FDH, 9, 0AH, 0DH, 36H, 2EH, 0C9H
   \              2EC9        
   \   000000A8   E8D6C3B4AEBF       DC8 0E8H, 0D6H, 0C3H, 0B4H, 0AEH, 0BFH, 0DAH, 0B2H
   \              DAB2        
   \   000000B0   CECAFD090A0D       DC8 0CEH, 0CAH, 0FDH, 9, 0AH, 0DH, 37H, 2EH
   \              372E        
   \   000000B8   B2E9BFB44341       DC8 0B2H, 0E9H, 0BFH, 0B4H, 43H, 41H, 4EH, 20H
   \              4E20        
   \   000000C0   425553B2CECA       DC8 42H, 55H, 53H, 0B2H, 0CEH, 0CAH, 0FDH, 9
   \              FD09        
   \   000000C8   0A0D382EC9E8       DC8 0AH, 0DH, 38H, 2EH, 0C9H, 0E8H, 0D6H, 0C3H
   \              D6C3        
   \   000000D0   43414E204255       DC8 43H, 41H, 4EH, 20H, 42H, 55H, 53H, 0B2H
   \              53B2        
   \   000000D8   CECAFD090A0D       DC8 0CEH, 0CAH, 0FDH, 9, 0AH, 0DH, 39H, 2EH
   \              392E        
   \   000000E0   B2E9BFB4B9CC       DC8 0B2H, 0E9H, 0BFH, 0B4H, 0B9H, 0CCH, 0BCH, 0FEH
   \              BCFE        
   \   000000E8   B0E6B1BE090A       DC8 0B0H, 0E6H, 0B1H, 0BEH, 9, 0AH, 0DH, 31H
   \              0D31        
   \   000000F0   302ECFB5CDB3       DC8 30H, 2EH, 0CFH, 0B5H, 0CDH, 0B3H, 0D7H, 0B4H
   \              D7B4        
   \   000000F8   CCAC090A0D31       DC8 0CCH, 0ACH, 9, 0AH, 0DH, 31H, 31H, 2EH
   \              312E        
   \   00000100   CDCBB3F6090A       DC8 0CDH, 0CBH, 0B3H, 0F6H, 9, 0AH, 0DH, 0AH
   \              0D0A        
   \   00000108   0DC7EBD1A1D4       DC8 0DH, 0C7H, 0EBH, 0D1H, 0A1H, 0D4H, 0F1H, 3AH
   \              F13A        
   \   00000110   00                 DC8 0
   \   00000111   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\033[2J                 ...">_1`:
   \   00000000   1B5B324A2020       DC8 1BH, 5BH, 32H, 4AH, 20H, 20H, 20H, 20H
   \              2020        
   \   00000008   202020202020       DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \              2020        
   \   00000010   202020202020       DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 57H
   \              2057        
   \   00000018   656C636F6D65       DC8 65H, 6CH, 63H, 6FH, 6DH, 65H, 20H, 74H
   \              2074        
   \   00000020   6F20544A494E       DC8 6FH, 20H, 54H, 4AH, 49H, 4EH, 43H, 20H
   \              4320        
   \   00000028   43414E202620       DC8 43H, 41H, 4EH, 20H, 26H, 20H, 55H, 53H
   \              5553        
   \   00000030   415254206F76       DC8 41H, 52H, 54H, 20H, 6FH, 76H, 65H, 72H
   \              6572        
   \   00000038   20495020756E       DC8 20H, 49H, 50H, 20H, 75H, 6EH, 69H, 74H
   \              6974        
   \   00000040   0A0D200900         DC8 0AH, 0DH, 20H, 9, 0
   \   00000045   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%s\\n\\r">`:
   \   00000000   25730A0D00         DC8 "%s\012\015"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   0A0D312E4950       DC8 "\012\0151.IP\265\330\326\267:%s"
   \              B5D8D6B73A25
   \              7300        
   \   00000016   0000               DC8 0, 0
   \   00000018   0A0D322ED7D3       DC8 "\012\0152.\327\323\315\370\321\332\302\353:%s"
   \              CDF8D1DAC2EB
   \              3A257300    
   \   00000028   0A0D332EC4AC       DC8 "\012\0153.\304\254\310\317\315\370\271\330:%s"
   \              C8CFCDF8B9D8
   \              3A257300    
   \   00000038   0A0D342E444E       DC8 "\012\0154.DNS\265\330\326\267:%s"
   \              53B5D8D6B73A
   \              257300      
   \   00000047   00                 DC8 0
   \   00000048   0A0D352E434F       DC8 "\012\0155.COM5\266\313\277\332\272\305\302\353:%u"
   \              4D35B6CBBFDA
   \              BAC5C2EB3A25
   \              7500        
   \   0000005C   0A0D362E434F       DC8 "\012\0156.COM2-4\266\313\277\332\272\305\302\353:%u"
   \              4D322D34B6CB
   \              BFDABAC5C2EB
   \              3A257500    
   \   00000072   0000               DC8 0, 0
   \   00000074   0A0D372E4341       DC8 "\012\0157.CAN \266\313\277\332\272\305\302\353:%u"
   \              4E20B6CBBFDA
   \              BAC5C2EB3A25
   \              7500        
   \   00000088   0A0D382ED7B4       DC8 "\012\0158.\327\264\314\254\274\260\277\330\326\306\266\313\277\332\272\305\302\353:%u"
   \              CCACBCB0BFD8
   \              D6C6B6CBBFDA
   \              BAC5C2EB3A25
   \              7500        
   \   000000A2   0000               DC8 0, 0
   \   000000A4   0A0D0A0DB0B4       DC8 "\012\015\012\015\260\264\310\316\322\342\274\374\274\314\320\370.........."
   \              C8CED2E2BCFC
   \              BCCCD0F82E2E
   \              2E2E2E2E2E2E
   \              2E2E00      
   \   000000BF   00                 DC8 0
   \   000000C0   0A0D312EC7EB       DC8 "\012\0151.\307\353\312\344\310\353\261\276\273\372IP\265\330\326\267:"
   \              CAE4C8EBB1BE
   \              BBFA4950B5D8
   \              D6B73A00    
   \   000000D6   0000               DC8 0, 0
   \   000000D8   0A0DCAE4C8EB       DC8 "\012\015\312\344\310\353\267\307\267\250,\307\353\312\344\310\353\325\375\310\267IP\265\330\326\267!"
   \              B7C7B7A82CC7
   \              EBCAE4C8EBD5
   \              FDC8B74950B5
   \              D8D6B72100  
   \   000000F5   000000             DC8 0, 0, 0
   \   000000F8   0A0D322EC7EB       DC8 "\012\0152.\307\353\312\344\310\353\261\276\273\372\327\323\315\370\321\332\302\353:"
   \              CAE4C8EBB1BE
   \              BBFAD7D3CDF8
   \              D1DAC2EB3A00
   \   00000110   0A0DCAE4C8EB       DC8 "\012\015\312\344\310\353\267\307\267\250,\307\353\312\344\310\353\325\375\310\267\327\323\315\370\321\332\302\353!"
   \              B7C7B7A82CC7
   \              EBCAE4C8EBD5
   \              FDC8B7D7D3CD
   \              F8D1DAC2EB21
   \              00          
   \   0000012F   00                 DC8 0
   \   00000130   0A0D332EC7EB       DC8 "\012\0153.\307\353\312\344\310\353\261\276\273\372\304\254\310\317\315\370\271\330:"
   \              CAE4C8EBB1BE
   \              BBFAC4ACC8CF
   \              CDF8B9D83A00
   \   00000148   0A0DCAE4C8EB       DC8 "\012\015\312\344\310\353\267\307\267\250,\307\353\312\344\310\353\325\375\310\267\325\375\310\267IP\265\330\326\267!"
   \              B7C7B7A82CC7
   \              EBCAE4C8EBD5
   \              FDC8B7D5FDC8
   \              B74950B5D8D6
   \              B72100      
   \   00000169   000000             DC8 0, 0, 0
   \   0000016C   0A0D342EC7EB       DC8 "\012\0154.\307\353\312\344\310\353DNS\265\330\326\267:"
   \              CAE4C8EB444E
   \              53B5D8D6B73A
   \              00          
   \   0000017F   00                 DC8 0
   \   00000180   0A0D352EC7EB       DC8 "\012\0155.\307\353\312\344\310\353COM5 \266\313\277\332\272\305\302\353:"
   \              CAE4C8EB434F
   \              4D3520B6CBBF
   \              DABAC5C2EB3A
   \              00          
   \   00000199   000000             DC8 0, 0, 0
   \   0000019C   0A0DCAE4C8EB       DC8 "\012\015\312\344\310\353\267\307\267\250,\307\353\312\344\310\3531024-65535\326\256\274\344\325\373\312\375!"
   \              B7C7B7A82CC7
   \              EBCAE4C8EB31
   \              3032342D3635
   \              353335D6AEBC
   \              E4D5FBCAFD21
   \              00          
   \   000001C1   000000             DC8 0, 0, 0
   \   000001C4   0A0D362EC7EB       DC8 "\012\0156.\307\353\312\344\310\353COM2-4\266\313\277\332\272\305\302\353:"
   \              CAE4C8EB434F
   \              4D322D34B6CB
   \              BFDABAC5C2EB
   \              3A00        
   \   000001DE   0000               DC8 0, 0
   \   000001E0   0A0D372EC7EB       DC8 "\012\0157.\307\353\312\344\310\353CAN \266\313\277\332\272\305\302\353:"
   \              CAE4C8EB4341
   \              4E20B6CBBFDA
   \              BAC5C2EB3A00
   \   000001F8   0A0D382EC7EB       DC8 "\012\0158.\307\353\312\344\310\353\327\264\314\254\274\260\277\330\326\306\266\313\277\332\272\305\302\353:"
   \              CAE4C8EBD7B4
   \              CCACBCB0BFD8
   \              D6C6B6CBBFDA
   \              BAC5C2EB3A00
   \   00000216   0000               DC8 0, 0
   \   00000218   0A0D0A0DB1BE       DC8 "\012\015\012\015\261\276\273\372IP\305\344\326\303\315\352\261\317\243\254\264\323\320\302\311\317\265\347\272\363\311\372\320\247..............."
   \              BBFA4950C5E4
   \              D6C3CDEAB1CF
   \              A3ACB4D3D0C2
   \              C9CFB5E7BAF3
   \              C9FAD0A72E2E
   \              2E2E2E2E2E2E
   \              2E2E2E2E2E2E
   \              2E00        
   \   0000024A   0000               DC8 0, 0
   \   0000024C   0A0D312E434F       DC8 "\012\0151.COM2 IP\265\330\326\267:%s"
   \              4D32204950B5
   \              D8D6B73A2573
   \              00          
   \   0000025F   00                 DC8 0
   \   00000260   0A0D322E434F       DC8 "\012\0152.COM2 Port:%u"
   \              4D3220506F72
   \              743A257500  
   \   00000271   000000             DC8 0, 0, 0
   \   00000274   0A0D332E434F       DC8 "\012\0153.COM3 IP\265\330\326\267:%s"
   \              4D33204950B5
   \              D8D6B73A2573
   \              00          
   \   00000287   00                 DC8 0
   \   00000288   0A0D342E434F       DC8 "\012\0154.COM3 Port:%u"
   \              4D3320506F72
   \              743A257500  
   \   00000299   000000             DC8 0, 0, 0
   \   0000029C   0A0D352E434F       DC8 "\012\0155.COM4 IP\265\330\326\267:%s"
   \              4D34204950B5
   \              D8D6B73A2573
   \              00          
   \   000002AF   00                 DC8 0
   \   000002B0   0A0D362E434F       DC8 "\012\0156.COM4 Port:%u"
   \              4D3420506F72
   \              743A257500  
   \   000002C1   000000             DC8 0, 0, 0
   \   000002C4   0A0D372E434F       DC8 "\012\0157.COM5 IP\265\330\326\267:%s"
   \              4D35204950B5
   \              D8D6B73A2573
   \              00          
   \   000002D7   00                 DC8 0
   \   000002D8   0A0D382E434F       DC8 "\012\0158.COM5 Port:%u"
   \              4D3520506F72
   \              743A257500  
   \   000002E9   000000             DC8 0, 0, 0
   \   000002EC   0A0D392E4341       DC8 "\012\0159.CAN IP\265\330\326\267:%s"
   \              4E204950B5D8
   \              D6B73A257300
   \   000002FE   0000               DC8 0, 0
   \   00000300   0A0D31302E43       DC8 "\012\01510.CAN Port:%u"
   \              414E20506F72
   \              743A257500  
   \   00000311   000000             DC8 0, 0, 0
   \   00000314   0A0D312EC7EB       DC8 "\012\0151.\307\353\312\344\310\353COM2 IP\265\330\326\267:"
   \              CAE4C8EB434F
   \              4D32204950B5
   \              D8D6B73A00  
   \   0000032B   00                 DC8 0
   \   0000032C   0A0D322EC7EB       DC8 "\012\0152.\307\353\312\344\310\353COM2\266\313\277\332:"
   \              CAE4C8EB434F
   \              4D32B6CBBFDA
   \              3A00        
   \   00000340   0A0D332EC7EB       DC8 "\012\0153.\307\353\312\344\310\353COM3 IP\265\330\326\267:"
   \              CAE4C8EB434F
   \              4D33204950B5
   \              D8D6B73A00  
   \   00000357   00                 DC8 0
   \   00000358   0A0D342EC7EB       DC8 "\012\0154.\307\353\312\344\310\353\266\324\267\275COM3\266\313\277\332:"
   \              CAE4C8EBB6D4
   \              B7BD434F4D33
   \              B6CBBFDA3A00
   \   00000370   0A0D352EC7EB       DC8 "\012\0155.\307\353\312\344\310\353COM4 IP\265\330\326\267:"
   \              CAE4C8EB434F
   \              4D34204950B5
   \              D8D6B73A00  
   \   00000387   00                 DC8 0
   \   00000388   0A0D362EC7EB       DC8 "\012\0156.\307\353\312\344\310\353COM4\266\313\277\332:"
   \              CAE4C8EB434F
   \              4D34B6CBBFDA
   \              3A00        
   \   0000039C   0A0D372EC7EB       DC8 "\012\0157.\307\353\312\344\310\353COM5 IP\265\330\326\267:"
   \              CAE4C8EB434F
   \              4D35204950B5
   \              D8D6B73A00  
   \   000003B3   00                 DC8 0
   \   000003B4   0A0D382EC7EB       DC8 "\012\0158.\307\353\312\344\310\353COM5\266\313\277\332:"
   \              CAE4C8EB434F
   \              4D35B6CBBFDA
   \              3A00        
   \   000003C8   0A0D392EC7EB       DC8 "\012\0159.\307\353\312\344\310\353CAN IP\265\330\326\267:"
   \              CAE4C8EB4341
   \              4E204950B5D8
   \              D6B73A00    
   \   000003DE   0000               DC8 0, 0
   \   000003E0   0A0D31302EC7       DC8 "\012\01510.\307\353\312\344\310\353CAN\266\313\277\332:"
   \              EBCAE4C8EB43
   \              414EB6CBBFDA
   \              3A00        
   \   000003F4   0A0D0A0DB6D4       DC8 "\012\015\012\015\266\324\267\275IP\305\344\326\303\315\352\261\317\243\254\264\323\320\302\311\317\265\347\272\363\311\372\320\247..............."
   \              B7BD4950C5E4
   \              D6C3CDEAB1CF
   \              A3ACB4D3D0C2
   \              C9CFB5E7BAF3
   \              C9FAD0A72E2E
   \              2E2E2E2E2E2E
   \              2E2E2E2E2E2E
   \              2E00        
   \   00000426   0000               DC8 0, 0
   \   00000428   434F4D3220B2       DC8 "COM2 \262\250\314\330\302\312: %d\012\015"
   \              A8CCD8C2CA3A
   \              2025640A0D00
   \   0000043A   0000               DC8 0, 0
   \   0000043C   434F4D3320B2       DC8 "COM3 \262\250\314\330\302\312: %d\012\015"
   \              A8CCD8C2CA3A
   \              2025640A0D00
   \   0000044E   0000               DC8 0, 0
   \   00000450   434F4D3420B2       DC8 "COM4 \262\250\314\330\302\312: %d\012\015"
   \              A8CCD8C2CA3A
   \              2025640A0D00
   \   00000462   0000               DC8 0, 0
   \   00000464   434F4D3520B2       DC8 "COM5 \262\250\314\330\302\312: %d\012\015"
   \              A8CCD8C2CA3A
   \              2025640A0D00
   \   00000476   0000               DC8 0, 0
   \   00000478   0A0D312EC7EB       DC8 "\012\0151.\307\353\312\344\310\353COM2 \262\250\314\330\302\312:"
   \              CAE4C8EB434F
   \              4D3220B2A8CC
   \              D8C2CA3A00  
   \   0000048F   00                 DC8 0
   \   00000490   0A0DCAE4C8EB       DC8 "\012\015\312\344\310\353\267\307\267\250,\307\353\312\344\310\353\325\375\310\267\262\250\314\330\302\312!"
   \              B7C7B7A82CC7
   \              EBCAE4C8EBD5
   \              FDC8B7B2A8CC
   \              D8C2CA2100  
   \   000004AD   000000             DC8 0, 0, 0
   \   000004B0   0A0D322EC7EB       DC8 "\012\0152.\307\353\312\344\310\353COM3 \262\250\314\330\302\312:"
   \              CAE4C8EB434F
   \              4D3320B2A8CC
   \              D8C2CA3A00  
   \   000004C7   00                 DC8 0
   \   000004C8   0A0D332EC7EB       DC8 "\012\0153.\307\353\312\344\310\353COM4 \262\250\314\330\302\312:"
   \              CAE4C8EB434F
   \              4D3420B2A8CC
   \              D8C2CA3A00  
   \   000004DF   00                 DC8 0
   \   000004E0   0A0D342EC7EB       DC8 "\012\0154.\307\353\312\344\310\353COM5 \262\250\314\330\302\312:"
   \              CAE4C8EB434F
   \              4D3520B2A8CC
   \              D8C2CA3A00  
   \   000004F7   00                 DC8 0
   \   000004F8   0A0D0A0D434F       DC8 "\012\015\012\015COM\277\332\305\344\326\303\315\352\261\317\243\254\264\323\320\302\311\317\265\347\272\363\311\372\320\247..............."
   \              4DBFDAC5E4D6
   \              C3CDEAB1CFA3
   \              ACB4D3D0C2C9
   \              CFB5E7BAF3C9
   \              FAD0A72E2E2E
   \              2E2E2E2E2E2E
   \              2E2E2E2E2E2E
   \              00          
   \   00000529   000000             DC8 0, 0, 0
   \   0000052C   0A0D312E4341       DC8 "\012\0151.CAN BUS \262\250\314\330\302\312: %d"
   \              4E2042555320
   \              B2A8CCD8C2CA
   \              3A20256400  
   \   00000543   00                 DC8 0
   \   00000544   0A0D322E4341       DC8 "\012\0152.CAN BUS \350\345\300\340\320\315: %s"
   \              4E2042555320
   \              E8E5C0E0D0CD
   \              3A20257300  
   \   0000055B   00                 DC8 0
   \   0000055C   43414E5F4944       DC8 "CAN_ID_STD"
   \              5F53544400  
   \   00000567   00                 DC8 0
   \   00000568   43414E5F4944       DC8 "CAN_ID_EXT"
   \              5F45585400  
   \   00000573   00                 DC8 0
   \   00000574   0A0D312EC7EB       DC8 "\012\0151.\307\353\312\344\310\353CAN BUS \262\250\314\330\302\312:"
   \              CAE4C8EB4341
   \              4E2042555320
   \              B2A8CCD8C2CA
   \              3A00        
   \   0000058E   0000               DC8 0, 0
   \   00000590   0A0D322EC7EB       DC8 "\012\0152.\307\353\312\344\310\353CAN BUS \350\345\300\340\320\315(0\241\242\316\252\261\352\327\274\243\2544\241\242\316\252\300\251\325\271):"
   \              CAE4C8EB4341
   \              4E2042555320
   \              E8E5C0E0D0CD
   \              2830A1A2CEAA
   \              B1EAD7BCA3AC
   \              34A1A2CEAAC0
   \              A9D5B9293A00
   \   000005C0   0A0DCAE4C8EB       DC8 "\012\015\312\344\310\353\267\307\267\250,\307\353\312\344\310\353\325\375\310\267CAN BUS \350\345\300\340\320\315!"
   \              B7C7B7A82CC7
   \              EBCAE4C8EBD5
   \              FDC8B743414E
   \              2042555320E8
   \              E5C0E0D0CD21
   \              00          
   \   000005E5   000000             DC8 0, 0, 0
   \   000005E8   0A0DCAE4C8EB       DC8 "\012\015\312\344\310\353\267\307\267\250,\307\353\312\344\310\353\325\375\310\267CAN BUS \350\345\300\340\320\315!!"
   \              B7C7B7A82CC7
   \              EBCAE4C8EBD5
   \              FDC8B743414E
   \              2042555320E8
   \              E5C0E0D0CD21
   \              2100        
   \   0000060E   0000               DC8 0, 0
   \   00000610   0A0D0A0D4341       DC8 0AH, 0DH, 0AH, 0DH, 43H, 41H, 4EH, 20H
   \              4E20        
   \   00000618   42555320C5E4       DC8 42H, 55H, 53H, 20H, 0C5H, 0E4H, 0D6H, 0C3H
   \              D6C3        
   \   00000620   CDEAB1CFA3AC       DC8 0CDH, 0EAH, 0B1H, 0CFH, 0A3H, 0ACH, 0B4H, 0D3H
   \              B4D3        
   \   00000628   D0C2C9CFB5E7       DC8 0D0H, 0C2H, 0C9H, 0CFH, 0B5H, 0E7H, 0BAH, 0F3H
   \              BAF3        
   \   00000630   C9FAD0A72E2E       DC8 0C9H, 0FAH, 0D0H, 0A7H, 2EH, 2EH, 2EH, 2EH
   \              2E2E        
   \   00000638   2E2E2E2E2E2E       DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 2EH
   \              2E2E        
   \   00000640   2E2E2E00           DC8 2EH, 2EH, 2EH, 0
   \   00000644   0D0A0D0AB9CC       DC8 "\015\012\015\012\271\314\274\376\260\346\261\276:V1.0.0\012\015"
   \              BCFEB0E6B1BE
   \              3A56312E302E
   \              300A0D00    
   \   0000065A   0000               DC8 0, 0
   \   0000065C   BCFEBAC53A59       DC8 "\274\376\272\305:YKA20905AAA\012\015"
   \              4B4132303930
   \              354141410A0D
   \              00          
   \   0000066F   00                 DC8 0
   \   00000670   0A0D5461736B       DC8 "\012\015Task\011\011\011Total Stack\011FreeStack\011UsedStack"
   \              090909546F74
   \              616C20537461
   \              636B09467265
   \              65537461636B
   \              095573656453
   \              7461636B00  
   \   00000699   000000             DC8 0, 0, 0
   \   0000069C   0A0D2D2D2D2D       DC8 0AH, 0DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   000006A4   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   000006AC   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   000006B4   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   000006BC   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   000006C4   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   000006CC   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   000006D4   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   000006DC   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 0
   \              00          
   \   000006E3   00                 DC8 0
   \   000006E4   0A0D4170705F       DC8 "\012\015App_TaskStart()\011\011%4ld\011\011%4ld\011\011%4ld"
   \              5461736B5374
   \              617274282909
   \              0925346C6409
   \              0925346C6409
   \              0925346C6400
   \   00000708   0A0D55534152       DC8 "\012\015USART_Task()\011\011%4ld\011\011%4ld\011\011%4ld"
   \              545F5461736B
   \              282909092534
   \              6C6409092534
   \              6C6409092534
   \              6C6400      
   \   00000729   000000             DC8 0, 0, 0
   \   0000072C   0A0D43414E5F       DC8 "\012\015CAN_Task()\011\011%4ld\011\011%4ld\011\011%4ld"
   \              5461736B2829
   \              090925346C64
   \              090925346C64
   \              090925346C64
   \              00          
   \   0000074B   00                 DC8 0
   \   0000074C   0A0D536F636B       DC8 "\012\015Socked_Task()\011\011%4ld\011\011%4ld\011\011%4ld"
   \              65645F546173
   \              6B2829090925
   \              346C64090925
   \              346C64090925
   \              346C6400    
   \   0000076E   0000               DC8 0, 0
   \   00000770   0A0D48797065       DC8 "\012\015HyperTerminal_Task()\011%4ld\011\011%4ld\011\011%4ld"
   \              725465726D69
   \              6E616C5F5461
   \              736B28290925
   \              346C64090925
   \              346C64090925
   \              346C6400    
   \   00000798   0D0A0D0A0D0A       DC8 "\015\012\015\012\015\012\260\264\310\316\322\342\274\374\267\265\273\330................."
   \              B0B4C8CED2E2
   \              BCFCB7B5BBD8
   \              2E2E2E2E2E2E
   \              2E2E2E2E2E2E
   \              2E2E2E2E2E00
   \   000007BC   0D0AC5E4D6C3       DC8 "\015\012\305\344\326\303\263\314\320\362\315\313\263\366\243\254\317\302\264\316\311\317\265\347\306\364\266\257!\012\015"
   \              B3CCD0F2CDCB
   \              B3F6A3ACCFC2
   \              B4CEC9CFB5E7
   \              C6F4B6AF210A
   \              0D00        
   \   000007DC   0D0AD1A1D4F1       DC8 "\015\012\321\241\324\361\264\355\316\363,\307\353\264\323\320\302\321\241\324\361!\012\015"
   \              B4EDCEF32CC7
   \              EBB4D3D0C2D1
   \              A1D4F1210A0D
   \              00          
   \   000007F5   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     HyperTerminal            144
     IsNum                     16
     ReadString                24
     STM32_DMA1_Init           56
     STM32_USART1_Init         24
     STM32_USART2_Init         24
     STM32_USART3_Init         24
     STM32_USART_Interrupt     16
     atoi                       8
     fputc                     16
     getch                      8


   Section sizes:

     Function/Label                              Bytes
     --------------                              -----
     atoi                                           8
     RxBuffer                                     257
     RxCount
     SendBuffer                                   128
     TxBuffer                                      12
     WriteUsart1Sem
     STM32_DMA1_Init                              128
     STM32_USART1_Init                             60
     STM32_USART2_Init                             84
     STM32_USART3_Init                             84
     fputc                                         54
     ReadString                                   104
     IsNum                                         44
     getch                                         28
     HyperTerminal                               2300
     STM32_USART_Interrupt                        100
     ??DataTable9                                   4
     ??DataTable10                                  4
     ??DataTable11                                  4
     ??DataTable12                                  4
     ?<Constant "\033[2J                 ...">    276
     ?<Constant "\033[2J                 ...">_1   72
     ?<Constant "%s\n\r">                        2040

 
   385 bytes in section .bss
    12 bytes in section .data
 2 388 bytes in section .rodata
 3 010 bytes in section .text
 
 3 002 bytes of CODE  memory (+ 8 bytes shared)
 2 388 bytes of CONST memory
   397 bytes of DATA  memory

Errors: none
Warnings: none

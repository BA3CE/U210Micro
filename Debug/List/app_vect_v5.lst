###############################################################################
#                                                                             #
#                                                       16/Jun/2009  22:57:16 #
# IAR ANSI C/C++ Compiler V5.30.2.31295/W32 KICKSTART for ARM                 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Boards\app_vect_v5.c                                  #
#    Command line =  "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\Boards\app_vect_v5.c" -D _DLIB_FILE_DESCRIPTOR -lC    #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\Debug\List\" -o  #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\Debug\Obj\"      #
#                    --no_unroll --no_inline --no_tbaa --no_scheduling        #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4 Kickstart\arm\INC\DLib_Config_Normal.h"    #
#                    -I "F:\MyProjects\Tjinc\CAN & Uart over IP\Boards\" -I   #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\uCOS-II\Source\" -I "F:\MyProjects\Tjinc\CAN & Uart   #
#                    over IP\uCOS-II\Ports\arm-cortex-m3\Generic\IAR\" -I     #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\uC-CPU\ARM-Cortex-M3\IAR\" -I                         #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\uC-CPU\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\uC-LIB\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\FWLib\library\inc\" -I "F:\MyProjects\Tjinc\CAN &     #
#                    Uart over IP\Boards\BSP\" -I "F:\MyProjects\Tjinc\CAN &  #
#                    Uart over IP\Interrupt\" -I "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4 Kickstart\arm\INC\" -Om   #
#    List file    =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Debug\List\app_vect_v5.lst                            #
#    Object file  =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Debug\Obj\app_vect_v5.o                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\MyProjects\Tjinc\CAN & Uart over IP\Boards\app_vect_v5.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              EXAMPLE CODE
      4          *
      5          *                          (c) Copyright 2003-2006; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                         EXCEPTION VECTORS
     18          *
     19          *                                     ST Microelectronics STM32
     20          *                                              on the 
     21          *                                 IAR STM32F103ZE-SK Evaluation Board
     22          *
     23          * Filename      : app_vect-v5.c
     24          * Version       : V1.00
     25          * Programmer(s) : FT
     26          *********************************************************************************************************
     27          */
     28          
     29          
     30          #include    <stdio.h>
     31          #include    <string.h>
     32          
     33          #include    "bsp.h"
     34          
     35          /*
     36          *********************************************************************************************************
     37          *                                            LOCAL DEFINES
     38          *********************************************************************************************************
     39          */
     40          
     41          
     42          /*
     43          *********************************************************************************************************
     44          *                                          LOCAL DATA TYPES
     45          *********************************************************************************************************
     46          */
     47          
     48          typedef  union {
     49              CPU_FNCT_VOID   Fnct;
     50              void           *Ptr;
     51          } APP_INTVECT_ELEM;
     52          
     53          
     54          
     55          /*
     56          *********************************************************************************************************
     57          *                                            LOCAL TABLES
     58          *********************************************************************************************************
     59          */
     60          
     61          
     62          /*
     63          *********************************************************************************************************
     64          *                                       LOCAL GLOBAL VARIABLES
     65          *********************************************************************************************************
     66          */
     67          
     68          
     69          /*
     70          *********************************************************************************************************
     71          *                                      LOCAL FUNCTION PROTOTYPES
     72          *********************************************************************************************************
     73          */
     74          
     75          #pragma language=extended
     76          #pragma segment="CSTACK"
     77          
     78          static  void       App_NMI_ISR        (void);
     79          
     80          static  void       App_Fault_ISR      (void);
     81          
     82          static  void       App_BusFault_ISR   (void);
     83          
     84          static  void       App_UsageFault_ISR (void);
     85          
     86          static  void       App_MemFault_ISR   (void);
     87          
     88          static  void       App_Spurious_ISR   (void);
     89          
     90          extern  void       __iar_program_start(void);
     91          
     92          
     93          /*
     94          *********************************************************************************************************
     95          *                                     LOCAL CONFIGURATION ERRORS
     96          *********************************************************************************************************
     97          */
     98          
     99          /*
    100          *********************************************************************************************************
    101          *                                  EXCEPTION / INTERRUPT VECTOR TABLE
    102          *
    103          * Note(s) : (1) The Cortex-M3 may have up to 256 external interrupts, which are the final entries in the
    104          *               vector table.  The STM32 has 60 external interrupt vectors.
    105          *********************************************************************************************************
    106          */
    107          

   \                                 In section .intvec, align 4, root
    108          __root  const  APP_INTVECT_ELEM  __vector_table[] @ ".intvec" = {
   \                     __vector_table:
   \   00000000   ............       DC32 SFE(CSTACK), __iar_program_start, App_NMI_ISR, App_Fault_ISR
   \              ............
   \              ........    
   \   00000010   ............       DC32 App_MemFault_ISR, App_BusFault_ISR, App_UsageFault_ISR
   \              ............
   \   0000001C   ............       DC32 App_Spurious_ISR, App_Spurious_ISR, App_Spurious_ISR
   \              ............
   \   00000028   ............       DC32 App_Spurious_ISR, App_Spurious_ISR, App_Spurious_ISR
   \              ............
   \   00000034   ............       DC32 App_Spurious_ISR, OS_CPU_PendSVHandler, OS_CPU_SysTickHandler
   \              ............
   \   00000040   ............       DC32 BSP_IntHandlerWWDG, BSP_IntHandlerPVD, BSP_IntHandlerTAMPER
   \              ............
   \   0000004C   ............       DC32 BSP_IntHandlerRTC, BSP_IntHandlerFLASH, BSP_IntHandlerRCC
   \              ............
   \   00000058   ............       DC32 BSP_IntHandlerEXTI0, BSP_IntHandlerEXTI1, BSP_IntHandlerEXTI2
   \              ............
   \   00000064   ............       DC32 BSP_IntHandlerEXTI3, BSP_IntHandlerEXTI4, BSP_IntHandlerDMA1_CH1
   \              ............
   \   00000070   ............       DC32 BSP_IntHandlerDMA1_CH2, BSP_IntHandlerDMA1_CH3
   \              ....        
   \   00000078   ............       DC32 BSP_IntHandlerDMA1_CH4, BSP_IntHandlerDMA1_CH5
   \              ....        
   \   00000080   ............       DC32 BSP_IntHandlerDMA1_CH6, BSP_IntHandlerDMA1_CH7
   \              ....        
   \   00000088   ............       DC32 BSP_IntHandlerADC1_2, BSP_IntHandlerUSB_HP_CAN_TX
   \              ....        
   \   00000090   ............       DC32 BSP_IntHandlerUSB_LP_CAN_RX0, BSP_IntHandlerCAN_RX1
   \              ....        
   \   00000098   ............       DC32 BSP_IntHandlerCAN_SCE, BSP_IntHandlerEXTI9_5
   \              ....        
   \   000000A0   ............       DC32 BSP_IntHandlerTIM1_BRK, BSP_IntHandlerTIM1_UP
   \              ....        
   \   000000A8   ............       DC32 BSP_IntHandlerTIM1_TRG_COM, BSP_IntHandlerTIM1_CC
   \              ....        
   \   000000B0   ............       DC32 BSP_IntHandlerTIM2, BSP_IntHandlerTIM3, BSP_IntHandlerTIM4
   \              ............
   \   000000BC   ............       DC32 BSP_IntHandlerI2C1_EV, BSP_IntHandlerI2C1_ER
   \              ....        
   \   000000C4   ............       DC32 BSP_IntHandlerI2C2_EV, BSP_IntHandlerI2C2_ER, BSP_IntHandlerSPI1
   \              ............
   \   000000D0   ............       DC32 BSP_IntHandlerSPI2, BSP_IntHandlerUSART1, BSP_IntHandlerUSART2
   \              ............
   \   000000DC   ............       DC32 BSP_IntHandlerUSART3, BSP_IntHandlerEXTI15_10
   \              ....        
   \   000000E4   ............       DC32 BSP_IntHandlerRTCAlarm, BSP_IntHandlerUSBWakeUp
   \              ....        
   \   000000EC   ............       DC32 BSP_IntHandlerTIM8_BRK, BSP_IntHandlerTIM8_UP
   \              ....        
   \   000000F4   ............       DC32 BSP_IntHandlerTIM8_TRG_COM, BSP_IntHandlerTIM8_CC
   \              ....        
   \   000000FC   ............       DC32 BSP_IntHandlerADC3, BSP_IntHandlerFSMC, BSP_IntHandlerSDIO
   \              ............
   \   00000108   ............       DC32 BSP_IntHandlerTIM5, BSP_IntHandlerSPI3, BSP_IntHandlerUART4
   \              ............
   \   00000114   ............       DC32 BSP_IntHandlerUART5, BSP_IntHandlerTIM6, BSP_IntHandlerTIM7
   \              ............
   \   00000120   ............       DC32 BSP_IntHandlerDMA2_CH1, BSP_IntHandlerDMA2_CH2
   \              ....        
   \   00000128   ............       DC32 BSP_IntHandlerDMA2_CH3, BSP_IntHandlerDMA2_CH4_5
   \              ....        
    109              { .Ptr = (void *)__sfe( "CSTACK" )},                        /*  0, SP start value.                                  */
    110              __iar_program_start,                                        /*  1, PC start value.                                  */
    111              App_NMI_ISR,                                                /*  2, NMI.                                             */
    112              App_Fault_ISR,                                              /*  3, Hard Fault.                                      */
    113              App_MemFault_ISR,                                           /*  4, Memory Management.                               */
    114              App_BusFault_ISR,                                           /*  5, Bus Fault.                                       */
    115              App_UsageFault_ISR,                                         /*  6, Usage Fault.                                     */
    116              App_Spurious_ISR,                                           /*  7, Reserved.                                        */
    117              App_Spurious_ISR,                                           /*  8, Reserved.                                        */
    118              App_Spurious_ISR,                                           /*  9, Reserved.                                        */
    119              App_Spurious_ISR,                                           /* 10, Reserved.                                        */
    120              App_Spurious_ISR,                                           /* 11, SVCall.                                          */
    121              App_Spurious_ISR,                                           /* 12, Debug Monitor.                                   */
    122              App_Spurious_ISR,                                           /* 13, Reserved.                                        */
    123              OS_CPU_PendSVHandler,                                       /* 14, PendSV Handler.                                  */
    124              OS_CPU_SysTickHandler,                                      /* 15, uC/OS-II Tick ISR Handler.                       */
    125          
    126              BSP_IntHandlerWWDG,                                         /* 16, INTISR[  0]  Window Watchdog.                    */
    127              BSP_IntHandlerPVD,                                          /* 17, INTISR[  1]  PVD through EXTI Line Detection.    */
    128              BSP_IntHandlerTAMPER,                                       /* 18, INTISR[  2]  Tamper Interrupt.                   */
    129              BSP_IntHandlerRTC,                                          /* 19, INTISR[  3]  RTC Global Interrupt.               */
    130              BSP_IntHandlerFLASH,                                        /* 20, INTISR[  4]  FLASH Global Interrupt.             */
    131              BSP_IntHandlerRCC,                                          /* 21, INTISR[  5]  RCC Global Interrupt.               */
    132              BSP_IntHandlerEXTI0,                                        /* 22, INTISR[  6]  EXTI Line0 Interrupt.               */
    133              BSP_IntHandlerEXTI1,                                        /* 23, INTISR[  7]  EXTI Line1 Interrupt.               */
    134              BSP_IntHandlerEXTI2,                                        /* 24, INTISR[  8]  EXTI Line2 Interrupt.               */
    135              BSP_IntHandlerEXTI3,                                        /* 25, INTISR[  9]  EXTI Line3 Interrupt.               */
    136              BSP_IntHandlerEXTI4,                                        /* 26, INTISR[ 10]  EXTI Line4 Interrupt.               */
    137              BSP_IntHandlerDMA1_CH1,                                     /* 27, INTISR[ 11]  DMA Channel1 Global Interrupt.      */
    138              BSP_IntHandlerDMA1_CH2,                                     /* 28, INTISR[ 12]  DMA Channel2 Global Interrupt.      */
    139              BSP_IntHandlerDMA1_CH3,                                     /* 29, INTISR[ 13]  DMA Channel3 Global Interrupt.      */
    140              BSP_IntHandlerDMA1_CH4,                                     /* 30, INTISR[ 14]  DMA Channel4 Global Interrupt.      */
    141              BSP_IntHandlerDMA1_CH5,                                     /* 31, INTISR[ 15]  DMA Channel5 Global Interrupt.      */
    142          
    143              BSP_IntHandlerDMA1_CH6,                                     /* 32, INTISR[ 16]  DMA Channel6 Global Interrupt.      */
    144              BSP_IntHandlerDMA1_CH7,                                     /* 33, INTISR[ 17]  DMA Channel7 Global Interrupt.      */
    145              BSP_IntHandlerADC1_2,                                       /* 34, INTISR[ 18]  ADC1 & ADC2 Global Interrupt.       */
    146              BSP_IntHandlerUSB_HP_CAN_TX,                                /* 35, INTISR[ 19]  USB High Prio / CAN TX  Interrupts. */
    147              BSP_IntHandlerUSB_LP_CAN_RX0,                               /* 36, INTISR[ 20]  USB Low  Prio / CAN RX0 Interrupts. */
    148              BSP_IntHandlerCAN_RX1,                                      /* 37, INTISR[ 21]  CAN RX1 Interrupt.                  */
    149              BSP_IntHandlerCAN_SCE,                                      /* 38, INTISR[ 22]  CAN SCE Interrupt.                  */
    150              BSP_IntHandlerEXTI9_5,                                      /* 39, INTISR[ 23]  EXTI Line[9:5] Interrupt.           */
    151              BSP_IntHandlerTIM1_BRK,                                     /* 40, INTISR[ 24]  TIM1 Break  Interrupt.              */
    152              BSP_IntHandlerTIM1_UP,                                      /* 41, INTISR[ 25]  TIM1 Update Interrupt.              */
    153              BSP_IntHandlerTIM1_TRG_COM,                                 /* 42, INTISR[ 26]  TIM1 Trig & Commutation Interrupts. */
    154              BSP_IntHandlerTIM1_CC,                                      /* 43, INTISR[ 27]  TIM1 Capture Compare Interrupt.     */
    155              BSP_IntHandlerTIM2,                                         /* 44, INTISR[ 28]  TIM2 Global Interrupt.              */
    156              BSP_IntHandlerTIM3,                                         /* 45, INTISR[ 29]  TIM3 Global Interrupt.              */
    157              BSP_IntHandlerTIM4,                                         /* 46, INTISR[ 30]  TIM4 Global Interrupt.              */
    158              BSP_IntHandlerI2C1_EV,                                      /* 47, INTISR[ 31]  I2C1 Event  Interrupt.              */
    159          
    160              BSP_IntHandlerI2C1_ER,                                      /* 48, INTISR[ 32]  I2C1 Error  Interrupt.              */
    161              BSP_IntHandlerI2C2_EV,                                      /* 49, INTISR[ 33]  I2C2 Event  Interrupt.              */
    162              BSP_IntHandlerI2C2_ER,                                      /* 50, INTISR[ 34]  I2C2 Error  Interrupt.              */
    163              BSP_IntHandlerSPI1,                                         /* 51, INTISR[ 35]  SPI1 Global Interrupt.              */
    164              BSP_IntHandlerSPI2,                                         /* 52, INTISR[ 36]  SPI2 Global Interrupt.              */
    165              BSP_IntHandlerUSART1,                                       /* 53, INTISR[ 37]  USART1 Global Interrupt.            */
    166              BSP_IntHandlerUSART2,                                       /* 54, INTISR[ 38]  USART2 Global Interrupt.            */
    167              BSP_IntHandlerUSART3,                                       /* 55, INTISR[ 39]  USART3 Global Interrupt.            */
    168              BSP_IntHandlerEXTI15_10,                                    /* 56, INTISR[ 40]  EXTI Line [15:10] Interrupts.       */
    169              BSP_IntHandlerRTCAlarm,                                     /* 57, INTISR[ 41]  RTC Alarm EXT Line Interrupt.       */
    170              BSP_IntHandlerUSBWakeUp,                                    /* 58, INTISR[ 42]  USB Wakeup from Suspend EXTI Int.   */
    171              BSP_IntHandlerTIM8_BRK,                                     /* 59, INTISR[ 43]  TIM8 Break Interrupt.               */
    172              BSP_IntHandlerTIM8_UP,                                      /* 60, INTISR[ 44]  TIM8 Update Interrupt.              */
    173              BSP_IntHandlerTIM8_TRG_COM,                                 /* 61, INTISR[ 45]  TIM8 Trigg/Commutation Interrupts.  */
    174              BSP_IntHandlerTIM8_CC,                                      /* 62, INTISR[ 46]  TIM8 Capture Compare Interrupt.     */
    175              BSP_IntHandlerADC3,                                         /* 63, INTISR[ 47]  ADC3 Global Interrupt.              */
    176          
    177              BSP_IntHandlerFSMC,                                         /* 64, INTISR[ 48]  FSMC Global Interrupt.              */
    178              BSP_IntHandlerSDIO,                                         /* 65, INTISR[ 49]  SDIO Global Interrupt.              */
    179              BSP_IntHandlerTIM5,                                         /* 66, INTISR[ 50]  TIM5 Global Interrupt.              */
    180              BSP_IntHandlerSPI3,                                         /* 67, INTISR[ 51]  SPI3 Global Interrupt.              */
    181              BSP_IntHandlerUART4,                                        /* 68, INTISR[ 52]  UART4 Global Interrupt.             */
    182              BSP_IntHandlerUART5,                                        /* 69, INTISR[ 53]  UART5 Global Interrupt.             */
    183              BSP_IntHandlerTIM6,                                         /* 70, INTISR[ 54]  TIM6 Global Interrupt.              */
    184              BSP_IntHandlerTIM7,                                         /* 71, INTISR[ 55]  TIM7 Global Interrupt.              */
    185              BSP_IntHandlerDMA2_CH1,                                     /* 72, INTISR[ 56]  DMA2 Channel1 Global Interrupt.     */
    186              BSP_IntHandlerDMA2_CH2,                                     /* 73, INTISR[ 57]  DMA2 Channel2 Global Interrupt.     */
    187              BSP_IntHandlerDMA2_CH3,                                     /* 74, INTISR[ 58]  DMA2 Channel3 Global Interrupt.     */
    188              BSP_IntHandlerDMA2_CH4_5,                                   /* 75, INTISR[ 59]  DMA2 Channel4/5 Global Interrups.   */
    189          };
    190          
    191          /*
    192          *********************************************************************************************************
    193          *                                           __low_level_init()
    194          *
    195          * Description : Perform low-level initialization.
    196          *
    197          * Argument(s) : none.
    198          *
    199          * Return(s)   : none.
    200          *
    201          * Caller(s)   : IAR startup code.
    202          *
    203          * Note(s)     : none.
    204          *********************************************************************************************************
    205          */
    206          #ifdef STM32_EXT_SRAM
    207          #pragma location="ICODE"
    208          __interwork int __low_level_init(void)
    209          {
    210          
    211                                                                          /* FSMC Bank1 NOR/SRAM3 is used for the STM3210E-EVAL   */
    212                                                                          /* if another Bank is req'd, adjust the Reg Addrs       */
    213          
    214              *(volatile  CPU_INT32U  *)0x40021014 = 0x00000114;          /* Enable FSMC clock                                    */
    215          
    216          
    217              *(volatile  CPU_INT32U  *)0x40021018 = 0x000001E0;          /* Enable GPIOD, GPIOE, GPIOF and GPIOG clocks          */
    218          
    219          
    220                                                                          /* --------------------- CFG GPIO --------------------- */
    221                                                                          /* SRAM Data lines, NOE and NWE configuration           */
    222                                                                          /* SRAM Address lines configuration                     */
    223                                                                          /* NOE and NWE configuration                            */
    224                                                                          /* NE3 configuration                                    */
    225                                                                          /* NBL0, NBL1 configuration                             */
    226              *(volatile  CPU_INT32U  *)0x40011400 = 0x44BB44BB;
    227              *(volatile  CPU_INT32U  *)0x40011404 = 0xBBBBBBBB;
    228          
    229              *(volatile  CPU_INT32U  *)0x40011800 = 0xB44444BB;
    230              *(volatile  CPU_INT32U  *)0x40011804 = 0xBBBBBBBB;
    231          
    232              *(volatile  CPU_INT32U  *)0x40011C00 = 0x44BBBBBB;
    233              *(volatile  CPU_INT32U  *)0x40011C04 = 0xBBBB4444;
    234          
    235              *(volatile  CPU_INT32U  *)0x40012000 = 0x44BBBBBB;
    236              *(volatile  CPU_INT32U  *)0x40012004 = 0x44444B44;
    237          
    238          
    239                                                                          /* --------------------- CFG FSMC --------------------- */
    240              *(volatile  CPU_INT32U  *)0xA0000010 = 0x00001011;          /* Enable FSMC Bank1_SRAM Bank                          */
    241              *(volatile  CPU_INT32U  *)0xA0000014 = 0x00000200;
    242          
    243              return (1);
    244          }
    245          #endif
    246          
    247          /*
    248          *********************************************************************************************************
    249          *                                            App_NMI_ISR()
    250          *
    251          * Description : Handle Non-Maskable Interrupt (NMI).
    252          *
    253          * Argument(s) : none.
    254          *
    255          * Return(s)   : none.
    256          *
    257          * Caller(s)   : This is an ISR.
    258          *
    259          * Note(s)     : (1) Since the NMI is not being used, this serves merely as a catch for a spurious
    260          *                   exception.
    261          *********************************************************************************************************
    262          */
    263          

   \                                 In section .text, align 2, keep-with-next
    264          static  void  App_NMI_ISR (void)
    265          {
    266              while (DEF_TRUE) {
   \                     App_NMI_ISR:
   \                     ??App_NMI_ISR_0:
   \   00000000   FEE7               B.N      ??App_NMI_ISR_0
    267                  ;
    268              }
    269          }
    270          
    271          /*
    272          *********************************************************************************************************
    273          *                                             App_Fault_ISR()
    274          *
    275          * Description : Handle hard fault.
    276          *
    277          * Argument(s) : none.
    278          *
    279          * Return(s)   : none.
    280          *
    281          * Caller(s)   : This is an ISR.
    282          *
    283          * Note(s)     : none.
    284          *********************************************************************************************************
    285          */
    286          

   \                                 In section .text, align 2, keep-with-next
    287          static  void  App_Fault_ISR (void)
    288          {
    289              while (DEF_TRUE) {
   \                     App_Fault_ISR:
   \                     ??App_Fault_ISR_0:
   \   00000000   FEE7               B.N      ??App_Fault_ISR_0
    290                  ;
    291              }
    292          }
    293          
    294          
    295          /*
    296          *********************************************************************************************************
    297          *                                           App_BusFault_ISR()
    298          *
    299          * Description : Handle bus fault.
    300          *
    301          * Argument(s) : none.
    302          *
    303          * Return(s)   : none.
    304          *
    305          * Caller(s)   : This is an ISR.
    306          *
    307          * Note(s)     : none.
    308          *********************************************************************************************************
    309          */
    310          

   \                                 In section .text, align 2, keep-with-next
    311          static  void  App_BusFault_ISR (void)
    312          {
    313              while (DEF_TRUE) {
   \                     App_BusFault_ISR:
   \                     ??App_BusFault_ISR_0:
   \   00000000   FEE7               B.N      ??App_BusFault_ISR_0
    314                  ;
    315              }
    316          }
    317          
    318          
    319          /*
    320          *********************************************************************************************************
    321          *                                          App_UsageFault_ISR()
    322          *
    323          * Description : Handle usage fault.
    324          *
    325          * Argument(s) : none.
    326          *
    327          * Return(s)   : none.
    328          *
    329          * Caller(s)   : This is an ISR.
    330          *
    331          * Note(s)     : none.
    332          *********************************************************************************************************
    333          */
    334          

   \                                 In section .text, align 2, keep-with-next
    335          static  void  App_UsageFault_ISR (void)
    336          {
    337              while (DEF_TRUE) {
   \                     App_UsageFault_ISR:
   \                     ??App_UsageFault_ISR_0:
   \   00000000   FEE7               B.N      ??App_UsageFault_ISR_0
    338                  ;
    339              }
    340          }
    341          
    342          
    343          /*
    344          *********************************************************************************************************
    345          *                                           App_MemFault_ISR()
    346          *
    347          * Description : Handle memory fault.
    348          *
    349          * Argument(s) : none.
    350          *
    351          * Return(s)   : none.
    352          *
    353          * Caller(s)   : This is an ISR.
    354          *
    355          * Note(s)     : none.
    356          *********************************************************************************************************
    357          */
    358          

   \                                 In section .text, align 2, keep-with-next
    359          static  void  App_MemFault_ISR (void)
    360          {
    361              while (DEF_TRUE) {
   \                     App_MemFault_ISR:
   \                     ??App_MemFault_ISR_0:
   \   00000000   FEE7               B.N      ??App_MemFault_ISR_0
    362                  ;
    363              }
    364          }
    365          
    366          
    367          /*
    368          *********************************************************************************************************
    369          *                                           App_Spurious_ISR()
    370          *
    371          * Description : Handle spurious interrupt.
    372          *
    373          * Argument(s) : none.
    374          *
    375          * Return(s)   : none.
    376          *
    377          * Caller(s)   : This is an ISR.
    378          *
    379          * Note(s)     : none.
    380          *********************************************************************************************************
    381          */
    382          

   \                                 In section .text, align 2, keep-with-next
    383          static  void  App_Spurious_ISR (void)
    384          {
    385              while (DEF_TRUE) {
   \                     App_Spurious_ISR:
   \                     ??App_Spurious_ISR_0:
   \   00000000   FEE7               B.N      ??App_Spurious_ISR_0
    386                  ;
    387              }
    388          }

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     App_BusFault_ISR        0
     App_Fault_ISR           0
     App_MemFault_ISR        0
     App_NMI_ISR             0
     App_Spurious_ISR        0
     App_UsageFault_ISR      0


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     __vector_table      304
     App_NMI_ISR           2
     App_Fault_ISR         2
     App_BusFault_ISR      2
     App_UsageFault_ISR    2
     App_MemFault_ISR      2
     App_Spurious_ISR      2

 
 304 bytes in section .intvec
  12 bytes in section .text
 
  12 bytes of CODE  memory
 304 bytes of CONST memory

Errors: none
Warnings: none

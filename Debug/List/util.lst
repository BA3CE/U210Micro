###############################################################################
#                                                                             #
#                                                       16/Jun/2009  17:31:28 #
# IAR ANSI C/C++ Compiler V5.30.2.31295/W32 KICKSTART for ARM                 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Boards\NetWork\util\util.c                            #
#    Command line =  "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\Boards\NetWork\util\util.c" -D _DLIB_FILE_DESCRIPTOR  #
#                    -lC "F:\MyProjects\Tjinc\CAN & Uart over                 #
#                    IP\Debug\List\" -o "F:\MyProjects\Tjinc\CAN & Uart over  #
#                    IP\Debug\Obj\" --no_unroll --no_inline --no_tbaa         #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4                           #
#                    Kickstart\arm\INC\DLib_Config_Normal.h" -I               #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\Boards\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\uCOS-II\Source\" -I "F:\MyProjects\Tjinc\CAN & Uart   #
#                    over IP\uCOS-II\Ports\arm-cortex-m3\Generic\IAR\" -I     #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\uC-CPU\ARM-Cortex-M3\IAR\" -I                         #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\uC-CPU\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\uC-LIB\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\FWLib\library\inc\" -I "F:\MyProjects\Tjinc\CAN &     #
#                    Uart over IP\Boards\BSP\" -I "F:\MyProjects\Tjinc\CAN &  #
#                    Uart over IP\Interrupt\" -I "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4 Kickstart\arm\INC\" -Om   #
#    List file    =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Debug\List\util.lst                                   #
#    Object file  =  F:\MyProjects\Tjinc\CAN & Uart over IP\Debug\Obj\util.o  #
#                                                                             #
#                                                                             #
###############################################################################

F:\MyProjects\Tjinc\CAN & Uart over IP\Boards\NetWork\util\util.c
      1          #include <string.h>

   \                                 In section .text, align 2
   \   __??Code16?? __intrinsic __code __interwork char *strpbrk(char const *, char const *)
   \                     strpbrk:
   \   00000000   ........           B.W      __iar_Strpbrk
      2          
      3          #include "util.h"
      4          

   \                                 In section .bss, align 4
      5          static char * ___strtok=NULL;
   \                     ___strtok:
   \   00000000                      DS8 4
      6          
      7          /**
      8          @brief	CONVERT HEX INTO CHAR
      9          @return	a character
     10            
     11          This function converts HEX(0-F) to a character
     12          */

   \                                 In section .text, align 2, keep-with-next
     13          unsigned char D2C(
     14          	char c	/**< is a Hex(0x00~0x0F) to convert to a character */
     15          	)
     16          {
     17          	unsigned int t = (unsigned int) c;
   \                     D2C:
   \   00000000   0146               MOV      R1,R0
     18          	if (t >= 0 && t <= 9)
                 	      ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \   00000002   0A29               CMP      R1,#+10
   \   00000004   02D2               BCS.N    ??D2C_0
     19          		return '0' + c;
   \   00000006   3030               ADDS     R0,R0,#+48
   \   00000008   C0B2               UXTB     R0,R0
   \   0000000A   7047               BX       LR
     20          	if (t >= 10 && t <= 15)
   \                     ??D2C_0:
   \   0000000C   03D3               BCC.N    ??D2C_1
   \   0000000E   1029               CMP      R1,#+16
   \   00000010   01D2               BCS.N    ??D2C_1
     21          		return 'A' + c - 10;
   \   00000012   3730               ADDS     R0,R0,#+55
   \   00000014   C0B2               UXTB     R0,R0
     22          
     23          	return c;
   \                     ??D2C_1:
   \   00000016   7047               BX       LR               ;; return
     24          }
     25          

   \                                 In section .text, align 2, keep-with-next
     26          char C2D(
     27          	unsigned char c	/**< is a character('0'-'F') to convert to HEX */
     28          	)
     29          {
     30          	if (c >= '0' && c <= '9')
   \                     C2D:
   \   00000000   3028               CMP      R0,#+48
   \   00000002   04D3               BCC.N    ??C2D_0
   \   00000004   3A28               CMP      R0,#+58
   \   00000006   02D2               BCS.N    ??C2D_0
     31          		return c - '0';
   \   00000008   3038               SUBS     R0,R0,#+48
   \   0000000A   C0B2               UXTB     R0,R0
   \   0000000C   7047               BX       LR
     32          	if (c >= 'a' && c <= 'f')
   \                     ??C2D_0:
   \   0000000E   6128               CMP      R0,#+97
   \   00000010   04D3               BCC.N    ??C2D_1
   \   00000012   6728               CMP      R0,#+103
   \   00000014   02D2               BCS.N    ??C2D_1
     33          		return 10 + c -'a';
   \   00000016   5738               SUBS     R0,R0,#+87
   \   00000018   C0B2               UXTB     R0,R0
   \   0000001A   7047               BX       LR
     34          	if (c >= 'A' && c <= 'F')
   \                     ??C2D_1:
   \   0000001C   4128               CMP      R0,#+65
   \   0000001E   03D3               BCC.N    ??C2D_2
   \   00000020   4728               CMP      R0,#+71
   \   00000022   01D2               BCS.N    ??C2D_2
     35          		return 10 + c -'A';
   \   00000024   3738               SUBS     R0,R0,#+55
   \   00000026   C0B2               UXTB     R0,R0
     36          
     37          	return (char)c;
   \                     ??C2D_2:
   \   00000028   7047               BX       LR               ;; return
     38          }
     39          
     40          
     41          /**
     42          @brief	CONVERT STRING INTO INTEGER
     43          @return	a integer number
     44          */

   \                                 In section .text, align 2, keep-with-next
     45          unsigned int ATOI(
     46          	char* str,	/**< is a pointer to convert */
     47          	unsigned int base	/**< is a base value (must be in the range 2 - 16) */
     48          	)
     49          {
   \                     ATOI:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0546               MOV      R5,R0
   \   00000004   0C46               MOV      R4,R1
     50                  unsigned int num = 0;
   \   00000006   0026               MOVS     R6,#+0
   \   00000008   05E0               B.N      ??ATOI_0
     51                  while (*str !=0)
     52                          num = num * base + C2D(*str++);
   \                     ??ATOI_1:
   \   0000000A   15F8010B           LDRB     R0,[R5], #+1
   \   0000000E   ........           BL       C2D
   \   00000012   06FB0406           MLA      R6,R6,R4,R0
   \                     ??ATOI_0:
   \   00000016   2878               LDRB     R0,[R5, #+0]
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   F6D1               BNE.N    ??ATOI_1
     53          	return num;
   \   0000001C   3046               MOV      R0,R6
   \   0000001E   70BD               POP      {R4-R6,PC}       ;; return
     54          }
     55          
     56          
     57          /**
     58          @brief	CONVERT STRING INTO HEX OR DECIMAL
     59          @return	success - 1, fail - 0
     60          */

   \                                 In section .text, align 2, keep-with-next
     61          int ValidATOI(
     62          	char* str, 	/**< is a pointer to string to be converted */
     63          	int base, 	/**< is a base value (must be in the range 2 - 16) */
     64          	int* ret		/**<  is a integer pointer to return */
     65          	)
     66          {
   \                     ValidATOI:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0646               MOV      R6,R0
   \   00000004   0C46               MOV      R4,R1
   \   00000006   1546               MOV      R5,R2
     67          	int c;
     68          	char* tstr = str;
   \   00000008   3700               MOVS     R7,R6
     69          	if(str == 0 || *str == '\0') return 0;
   \   0000000A   02D0               BEQ.N    ??ValidATOI_0
   \   0000000C   3078               LDRB     R0,[R6, #+0]
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   08D1               BNE.N    ??ValidATOI_1
   \                     ??ValidATOI_0:
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   F2BD               POP      {R1,R4-R7,PC}
     70          	while(*tstr != '\0')
     71          	{
     72          		c = C2D(*tstr);
   \                     ??ValidATOI_2:
   \   00000016   ........           BL       C2D
     73          		if( c >= 0 && c < base) tstr++;
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   F9D4               BMI.N    ??ValidATOI_0
   \   0000001E   A042               CMP      R0,R4
   \   00000020   F7DA               BGE.N    ??ValidATOI_0
   \   00000022   7F1C               ADDS     R7,R7,#+1
     74          		else    return 0;
     75          	}
   \                     ??ValidATOI_1:
   \   00000024   3878               LDRB     R0,[R7, #+0]
   \   00000026   0028               CMP      R0,#+0
   \   00000028   F5D1               BNE.N    ??ValidATOI_2
     76          	
     77          	*ret = ATOI(str,base);
   \   0000002A   2146               MOV      R1,R4
   \   0000002C   3046               MOV      R0,R6
   \   0000002E   ........           BL       ATOI
   \   00000032   2860               STR      R0,[R5, #+0]
     78          	return 1;
   \   00000034   0120               MOVS     R0,#+1
   \   00000036   F2BD               POP      {R1,R4-R7,PC}    ;; return
     79          }
     80          
     81          
     82           /**
     83          @brief	Calculate the length of the initial substring of "s" which only contain letters in "accept"
     84          @return	The string to search for
     85          */

   \                                 In section .text, align 2, keep-with-next
     86          size_t strspn(
     87          	const char *s, 		/**< The string to be searched */
     88          	const char *accept	/**< The string to search for */
     89          	)
     90          {
   \                     strspn:
   \   00000000   30B4               PUSH     {R4,R5}
   \   00000002   0246               MOV      R2,R0
     91          	const char *p;
     92          	const char *a;
     93          	size_t count = 0;
   \   00000004   0020               MOVS     R0,#+0
     94          
     95          	for (p = s; *p != '\0'; ++p) {
   \   00000006   01E0               B.N      ??strspn_0
     96          		for (a = accept; *a != '\0'; ++a) {
     97          			if (*p == *a)
     98          				break;
     99          		}
    100          		if (*a == '\0')
    101          			return count;
    102          		++count;
   \                     ??strspn_1:
   \   00000008   401C               ADDS     R0,R0,#+1
   \   0000000A   521C               ADDS     R2,R2,#+1
   \                     ??strspn_0:
   \   0000000C   1378               LDRB     R3,[R2, #+0]
   \   0000000E   002B               CMP      R3,#+0
   \   00000010   0CD0               BEQ.N    ??strspn_2
   \   00000012   0B46               MOV      R3,R1
   \   00000014   00E0               B.N      ??strspn_3
   \                     ??strspn_4:
   \   00000016   5B1C               ADDS     R3,R3,#+1
   \                     ??strspn_3:
   \   00000018   1C78               LDRB     R4,[R3, #+0]
   \   0000001A   002C               CMP      R4,#+0
   \   0000001C   03D0               BEQ.N    ??strspn_5
   \   0000001E   1478               LDRB     R4,[R2, #+0]
   \   00000020   1D78               LDRB     R5,[R3, #+0]
   \   00000022   AC42               CMP      R4,R5
   \   00000024   F7D1               BNE.N    ??strspn_4
   \                     ??strspn_5:
   \   00000026   1B78               LDRB     R3,[R3, #+0]
   \   00000028   002B               CMP      R3,#+0
   \   0000002A   EDD1               BNE.N    ??strspn_1
   \                     ??strspn_2:
   \   0000002C   30BC               POP      {R4,R5}
   \   0000002E   7047               BX       LR               ;; return
    103          	}
    104          
    105          	return count;
    106          }
    107          
    108          /**
    109          @brief	Find the first occurrence of a set of characters
    110          */
    111          #if 0
    112          char * strpbrk(
    113          	const char * cs,	/**< The string to be searched */
    114          	const char * ct	/**< The characters to search for */
    115          	)
    116          {
    117          	const char *sc1,*sc2;
    118          
    119          	for( sc1 = cs; *sc1 != '\0'; ++sc1) {
    120          		for( sc2 = ct; *sc2 != '\0'; ++sc2) {
    121          			if (*sc1 == *sc2)
    122          				return (char *) sc1;
    123          		}
    124          	}
    125          	return NULL;
    126          }
    127          #endif
    128          
    129          
    130          /**
    131          @brief	Split a string into tokens
    132          
    133          		WARNING: strtok is deprecated, use strsep instead.
    134          */ 

   \                                 In section .text, align 4, keep-with-next
    135          char * strtok(
    136          	char * s,			/**< The string to be searched */
    137          	const char * ct	/**< The characters to search for */
    138          	)
    139          {
   \                     strtok:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0546               MOV      R5,R0
   \   00000004   0C46               MOV      R4,R1
    140          	char *sbegin, *send;
    141          
    142          	sbegin  = s ? s : ___strtok;
   \   00000006   002D               CMP      R5,#+0
   \   00000008   01D1               BNE.N    ??strtok_0
   \   0000000A   1148               LDR.N    R0,??strtok_1    ;; ___strtok
   \   0000000C   0568               LDR      R5,[R0, #+0]
    143          	if (!sbegin) {
   \                     ??strtok_0:
   \   0000000E   002D               CMP      R5,#+0
   \   00000010   01D1               BNE.N    ??strtok_2
    144          		return NULL;
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   32BD               POP      {R1,R4,R5,PC}
    145          	}
    146          	sbegin += strspn(sbegin,ct);
   \                     ??strtok_2:
   \   00000016   2846               MOV      R0,R5
   \   00000018   ........           BL       strspn
   \   0000001C   4519               ADDS     R5,R0,R5
    147          	if (*sbegin == '\0') {
   \   0000001E   2878               LDRB     R0,[R5, #+0]
   \   00000020   0028               CMP      R0,#+0
   \   00000022   04D1               BNE.N    ??strtok_3
    148          		___strtok = NULL;
   \   00000024   0A48               LDR.N    R0,??strtok_1    ;; ___strtok
   \   00000026   0021               MOVS     R1,#+0
   \   00000028   0160               STR      R1,[R0, #+0]
    149          		return( NULL );
   \   0000002A   0846               MOV      R0,R1
   \   0000002C   32BD               POP      {R1,R4,R5,PC}
    150          	}
    151          	send = strpbrk( sbegin, ct);
   \                     ??strtok_3:
   \   0000002E   2146               MOV      R1,R4
   \   00000030   2846               MOV      R0,R5
   \   00000032   ........           BL       strpbrk
    152          	if (send && *send != '\0')
   \   00000036   0028               CMP      R0,#+0
   \   00000038   05D0               BEQ.N    ??strtok_4
   \   0000003A   0178               LDRB     R1,[R0, #+0]
   \   0000003C   0029               CMP      R1,#+0
   \   0000003E   02D0               BEQ.N    ??strtok_4
    153          		*send++ = '\0';
   \   00000040   0021               MOVS     R1,#+0
   \   00000042   00F8011B           STRB     R1,[R0], #+1
    154          	___strtok = send;
   \                     ??strtok_4:
   \   00000046   0249               LDR.N    R1,??strtok_1    ;; ___strtok
   \   00000048   0860               STR      R0,[R1, #+0]
    155          	return (sbegin);
   \   0000004A   2846               MOV      R0,R5
   \   0000004C   32BD               POP      {R1,R4,R5,PC}    ;; return
   \   0000004E   00BF               Nop      
   \                     ??strtok_1:
   \   00000050   ........           DC32     ___strtok
    156          }
    157          
    158          
    159          /**
    160          @brief	replace the specified character in a string with new character
    161          */ 

   \                                 In section .text, align 2, keep-with-next
    162          void replacetochar(
    163          	char * str, 		/**< pointer to be replaced */
    164          	char oldchar, 	/**< old character */
    165          	char newchar	/**< new character */
    166          	)
    167          {
   \                     replacetochar:
   \   00000000   18B4               PUSH     {R3,R4}
    168          	int x;
    169          	for (x = 0; str[x]; x++) 
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   03E0               B.N      ??replacetochar_0
    170          		if (str[x] == oldchar) str[x] = newchar;	
   \                     ??replacetochar_1:
   \   00000006   8C42               CMP      R4,R1
   \   00000008   00D1               BNE.N    ??replacetochar_2
   \   0000000A   1A54               STRB     R2,[R3, R0]
   \                     ??replacetochar_2:
   \   0000000C   5B1C               ADDS     R3,R3,#+1
   \                     ??replacetochar_0:
   \   0000000E   1C5C               LDRB     R4,[R3, R0]
   \   00000010   002C               CMP      R4,#+0
   \   00000012   F8D1               BNE.N    ??replacetochar_1
    171          }
   \   00000014   11BC               POP      {R0,R4}
   \   00000016   7047               BX       LR               ;; return
    172          
    173          

   \                                 In section .text, align 2, keep-with-next
    174          unsigned short swaps(unsigned int i)
    175          {
    176          	unsigned short ret=0;
    177          	ret = (i & 0xFF) << 8;
    178          	ret |= ((i >> 8)& 0xFF);
    179          	return ret;	
   \                     swaps:
   \   00000000   010A               LSRS     R1,R0,#+8
   \   00000002   C9B2               UXTB     R1,R1
   \   00000004   41EA0020           ORR      R0,R1,R0, LSL #+8
   \   00000008   80B2               UXTH     R0,R0
   \   0000000A   7047               BX       LR               ;; return
    180          }
    181          

   \                                 In section .text, align 2, keep-with-next
    182          unsigned long swapl(unsigned long l)
    183          {
    184          	unsigned long ret=0;
    185          	ret = (l & 0xFF) << 24;
    186          	ret |= ((l >> 8) & 0xFF) << 16;
    187          	ret |= ((l >> 16) & 0xFF) << 8;
    188          	ret |= ((l >> 24) & 0xFF);
    189          	return ret;
   \                     swapl:
   \   00000000   010A               LSRS     R1,R0,#+8
   \   00000002   C9B2               UXTB     R1,R1
   \   00000004   0904               LSLS     R1,R1,#+16
   \   00000006   41EA0061           ORR      R1,R1,R0, LSL #+24
   \   0000000A   020C               LSRS     R2,R0,#+16
   \   0000000C   D2B2               UXTB     R2,R2
   \   0000000E   41EA0221           ORR      R1,R1,R2, LSL #+8
   \   00000012   41EA1060           ORR      R0,R1,R0, LSR #+24
   \   00000016   7047               BX       LR               ;; return
    190          }
    191          
    192          
    193          #ifndef NO_USE_UTIL_FUNC
    194          /**
    195          @brief	This function converts a integer number to a string.
    196          @return	a pointer to string
    197          */ 
    198          char* ITOA(
    199          	unsigned int value,	/**< is a integer value to be converted */
    200          	char* str,	/**< is a pointer to string to be returned */
    201          	unsigned int base	/**< is a base value (must be in the range 2 - 16) */
    202          	)
    203          {
    204          	char c;
    205          	char* tstr = str;
    206          	char* ret = str;
    207          	if(value == 0) *str++='0';
    208          	while(value > 0)
    209          	{
    210          		*str++ =(char)D2C((char)(value%base));
    211          		value /= base;
    212          	}
    213          	*str-- ='\0';
    214          	while(tstr < str )
    215          	{
    216          		c = *tstr;
    217          		*tstr++ = *str;	
    218          		*str-- = c;
    219          	}
    220          	return ret;
    221          }
    222          
    223          #endif

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     ATOI              16
     C2D                0
     D2C                0
     ValidATOI         24
     replacetochar      8
     strpbrk            8
     strspn             8
     strtok            16
     swapl              0
     swaps              0


   Section sizes:

     Function/Label Bytes
     -------------- -----
     strpbrk           4
     ___strtok         4
     D2C              24
     C2D              42
     ATOI             32
     ValidATOI        56
     strspn           48
     strtok           84
     replacetochar    24
     swaps            12
     swapl            24

 
   4 bytes in section .bss
 350 bytes in section .text
 
 346 bytes of CODE memory (+ 4 bytes shared)
   4 bytes of DATA memory

Errors: none
Warnings: 1

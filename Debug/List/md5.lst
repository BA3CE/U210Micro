###############################################################################
#                                                                             #
#                                                       16/Jun/2009  17:24:47 #
# IAR ANSI C/C++ Compiler V5.30.2.31295/W32 KICKSTART for ARM                 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Boards\NetWork\w5100\md5.c                            #
#    Command line =  "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\Boards\NetWork\w5100\md5.c" -D _DLIB_FILE_DESCRIPTOR  #
#                    -lC "F:\MyProjects\Tjinc\CAN & Uart over                 #
#                    IP\Debug\List\" -o "F:\MyProjects\Tjinc\CAN & Uart over  #
#                    IP\Debug\Obj\" --no_unroll --no_inline --no_tbaa         #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4                           #
#                    Kickstart\arm\INC\DLib_Config_Normal.h" -I               #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\Boards\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\uCOS-II\Source\" -I "F:\MyProjects\Tjinc\CAN & Uart   #
#                    over IP\uCOS-II\Ports\arm-cortex-m3\Generic\IAR\" -I     #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\uC-CPU\ARM-Cortex-M3\IAR\" -I                         #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\uC-CPU\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\uC-LIB\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\FWLib\library\inc\" -I "F:\MyProjects\Tjinc\CAN &     #
#                    Uart over IP\Boards\BSP\" -I "F:\MyProjects\Tjinc\CAN &  #
#                    Uart over IP\Interrupt\" -I "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4 Kickstart\arm\INC\" -Om   #
#    List file    =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Debug\List\md5.lst                                    #
#    Object file  =  F:\MyProjects\Tjinc\CAN & Uart over IP\Debug\Obj\md5.o   #
#                                                                             #
#                                                                             #
###############################################################################

F:\MyProjects\Tjinc\CAN & Uart over IP\Boards\NetWork\w5100\md5.c
      1          /**
      2           @file		md5.c
      3           @brief 		support MD5 for PPPoE CHAP mode
      4          
      5           taken from RFC-1321/Appendix A.3
      6           MD5C.C - RSA Data Security, Inc., MD5 message-digest algorithm
      7           */
      8          
      9          
     10          #include <string.h>

   \                                 In section .text, align 2
   \   __??Code16?? __intrinsic __code __interwork void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0446               MOV      R4,R0
   \   00000004   ........           BL       __aeabi_memcpy
   \   00000008   2046               MOV      R0,R4
   \   0000000A   10BD               POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __??Code16?? __intrinsic __code __interwork void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0446               MOV      R4,R0
   \   00000004   1046               MOV      R0,R2
   \   00000006   0A46               MOV      R2,R1
   \   00000008   0146               MOV      R1,R0
   \   0000000A   2046               MOV      R0,R4
   \   0000000C   ........           BL       __aeabi_memset
   \   00000010   2046               MOV      R0,R4
   \   00000012   10BD               POP      {R4,PC}          ;; return
     11          
     12          #include "md5.h"
     13          
     14          // Constants for Transform routine.
     15          #define S11    7
     16          #define S12   12
     17          #define S13   17
     18          #define S14   22
     19          #define S21    5
     20          #define S22    9
     21          #define S23   14
     22          #define S24   20
     23          #define S31    4
     24          #define S32   11
     25          #define S33   16
     26          #define S34   23
     27          #define S41    6
     28          #define S42   10
     29          #define S43   15
     30          #define S44   21
     31          
     32          static void md5_transform (INT32U[4], INT8U [64]);
     33          static void md5_encode    (INT8U *, INT32U *, INT32U);
     34          static void md5_decode    (INT32U *, INT8U *, INT32U);
     35          

   \                                 In section .data, align 4
     36          static INT8U padding[64] = {
   \                     padding:
   \   00000000   800000000000       DC8 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00000000    
   \   00000016   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000002D   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
     37          	0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     38          	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     39          	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     40          	0, 0
     41          };
     42          
     43          // F, G, H and I are basic md5 functions.
     44          #define F(x, y, z) (((x) & (y)) | ((~x) & (z)))
     45          #define G(x, y, z) (((x) & (z)) | ((y) & (~z)))
     46          #define H(x, y, z) ((x) ^ (y) ^ (z))
     47          #define I(x, y, z) ((y) ^ ((x) | (~z)))
     48          
     49          /**
     50           @brief ROTATE_LEFT rotates x left n bits.
     51           */
     52          #define ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> (32-(n))))
     53          	
     54          

   \                                 In section .text, align 2, keep-with-next
     55          	INT32U FF(INT32U a, INT32U b, INT32U c, INT32U d, INT32U x, INT32U s, INT32U ac)
     56          	{
   \                     FF:
   \   00000000   F0B4               PUSH     {R4-R7}
   \   00000002   049D               LDR      R5,[SP, #+16]
   \   00000004   059C               LDR      R4,[SP, #+20]
   \   00000006   069E               LDR      R6,[SP, #+24]
     57          		a += F (b, c, d) + x + (INT32U)(ac);
   \   00000008   0A40               ANDS     R2,R2,R1
   \   0000000A   CF43               MVNS     R7,R1
   \   0000000C   3B40               ANDS     R3,R3,R7
   \   0000000E   1A43               ORRS     R2,R3,R2
   \   00000010   AA18               ADDS     R2,R5,R2
   \   00000012   B218               ADDS     R2,R6,R2
   \   00000014   1018               ADDS     R0,R2,R0
     58          		a = ROTATE_LEFT (a, s);
     59          		a += b;
     60          		return a;
   \   00000016   C4F12002           RSB      R2,R4,#+32
   \   0000001A   D041               RORS     R0,R0,R2
   \   0000001C   0818               ADDS     R0,R1,R0
   \   0000001E   F0BC               POP      {R4-R7}
   \   00000020   7047               BX       LR               ;; return
     61          	}

   \                                 In section .text, align 2, keep-with-next
     62          	INT32U GG(INT32U a, INT32U b, INT32U c, INT32U d, INT32U x, INT32U s, INT32U ac)
     63          	{
   \                     GG:
   \   00000000   F0B4               PUSH     {R4-R7}
   \   00000002   049D               LDR      R5,[SP, #+16]
   \   00000004   059C               LDR      R4,[SP, #+20]
   \   00000006   069E               LDR      R6,[SP, #+24]
     64          		a += G (b, c, d) + x + (INT32U)(ac);
   \   00000008   03EA0107           AND      R7,R3,R1
   \   0000000C   DB43               MVNS     R3,R3
   \   0000000E   1A40               ANDS     R2,R3,R2
   \   00000010   3A43               ORRS     R2,R2,R7
   \   00000012   AA18               ADDS     R2,R5,R2
   \   00000014   B218               ADDS     R2,R6,R2
   \   00000016   1018               ADDS     R0,R2,R0
     65          		a = ROTATE_LEFT (a, s);
     66          		a += b;
     67          		return a;
   \   00000018   C4F12002           RSB      R2,R4,#+32
   \   0000001C   D041               RORS     R0,R0,R2
   \   0000001E   0818               ADDS     R0,R1,R0
   \   00000020   F0BC               POP      {R4-R7}
   \   00000022   7047               BX       LR               ;; return
     68          	}
     69          	

   \                                 In section .text, align 2, keep-with-next
     70          	INT32U HH(INT32U a, INT32U b, INT32U c, INT32U d, INT32U x, INT32U s, INT32U ac)
     71          	{
   \                     HH:
   \   00000000   78B4               PUSH     {R3-R6}
   \   00000002   049C               LDR      R4,[SP, #+16]
   \   00000004   059D               LDR      R5,[SP, #+20]
   \   00000006   069E               LDR      R6,[SP, #+24]
     72          		a += H (b, c, d) + x + (INT32U)(ac);
   \   00000008   4A40               EORS     R2,R2,R1
   \   0000000A   5A40               EORS     R2,R3,R2
   \   0000000C   A218               ADDS     R2,R4,R2
   \   0000000E   B218               ADDS     R2,R6,R2
   \   00000010   1018               ADDS     R0,R2,R0
     73          		a = ROTATE_LEFT (a, s);
     74          		a += b;
     75          		return a;
   \   00000012   C5F12002           RSB      R2,R5,#+32
   \   00000016   D041               RORS     R0,R0,R2
   \   00000018   0818               ADDS     R0,R1,R0
   \   0000001A   72BC               POP      {R1,R4-R6}
   \   0000001C   7047               BX       LR               ;; return
     76          	}
     77          

   \                                 In section .text, align 2, keep-with-next
     78          	INT32U II(INT32U a, INT32U b, INT32U c, INT32U d, INT32U x, INT32U s, INT32U ac)
     79          	{
   \                     II:
   \   00000000   78B4               PUSH     {R3-R6}
   \   00000002   049C               LDR      R4,[SP, #+16]
   \   00000004   059D               LDR      R5,[SP, #+20]
   \   00000006   069E               LDR      R6,[SP, #+24]
     80          		a += I (b, c, d) + x + (INT32U)(ac);
   \   00000008   DB43               MVNS     R3,R3
   \   0000000A   0B43               ORRS     R3,R3,R1
   \   0000000C   5A40               EORS     R2,R3,R2
   \   0000000E   A218               ADDS     R2,R4,R2
   \   00000010   B218               ADDS     R2,R6,R2
   \   00000012   1018               ADDS     R0,R2,R0
     81          		a = ROTATE_LEFT (a, s);
     82          		a += b;
     83          		return a;
   \   00000014   C5F12002           RSB      R2,R5,#+32
   \   00000018   D041               RORS     R0,R0,R2
   \   0000001A   0818               ADDS     R0,R1,R0
   \   0000001C   72BC               POP      {R1,R4-R6}
   \   0000001E   7047               BX       LR               ;; return
     84          	}
     85          
     86          /**
     87           @brief	md5 initialization. Begins an md5 operation, writing a new context.
     88           */

   \                                 In section .text, align 4, keep-with-next
     89          void md5_init(md5_ctx *context)
     90          {
     91          	context->count[0] = context->count[1] = 0;
   \                     md5_init:
   \   00000000   0021               MOVS     R1,#+0
   \   00000002   4161               STR      R1,[R0, #+20]
   \   00000004   0161               STR      R1,[R0, #+16]
     92          	
     93          	// Load magic initialization constants.
     94          	context->state[0] = 0x67452301;
   \   00000006   0449               LDR.N    R1,??md5_init_0  ;; 0x67452301
   \   00000008   0160               STR      R1,[R0, #+0]
     95          	context->state[1] = 0xefcdab89;
   \   0000000A   0449               LDR.N    R1,??md5_init_0+0x4  ;; 0xefcdab89
   \   0000000C   4160               STR      R1,[R0, #+4]
     96          	context->state[2] = 0x98badcfe;
   \   0000000E   0449               LDR.N    R1,??md5_init_0+0x8  ;; 0x98badcfe
   \   00000010   8160               STR      R1,[R0, #+8]
     97          	context->state[3] = 0x10325476;
   \   00000012   0449               LDR.N    R1,??md5_init_0+0xC  ;; 0x10325476
   \   00000014   C160               STR      R1,[R0, #+12]
     98          }
   \   00000016   7047               BX       LR               ;; return
   \                     ??md5_init_0:
   \   00000018   01234567           DC32     0x67452301
   \   0000001C   89ABCDEF           DC32     0xefcdab89
   \   00000020   FEDCBA98           DC32     0x98badcfe
   \   00000024   76543210           DC32     0x10325476
     99          
    100          /**
    101           @brief	md5 block update operation. Continues an md5 message-digest operation,
    102          		processing another message block, and updating the context.
    103          */		

   \                                 In section .text, align 2, keep-with-next
    104          void md5_update(md5_ctx * context, INT8U *input, INT32U inputLen)
    105          {
   \                     md5_update:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0446               MOV      R4,R0
   \   00000004   0D46               MOV      R5,R1
   \   00000006   1646               MOV      R6,R2
    106          	INT32U i, index, partLen;
    107          	
    108          	// Compute number of bytes mod 64
    109          	index = (INT32U)((context->count[0] >> 3) & 0x3F);
   \   00000008   2069               LDR      R0,[R4, #+16]
   \   0000000A   C008               LSRS     R0,R0,#+3
   \   0000000C   00F03F00           AND      R0,R0,#0x3F
    110          	
    111          	// Update number of bits
    112          	if ((context->count[0] += ((INT32U)inputLen << 3)) < ((INT32U)inputLen << 3))
   \   00000010   F100               LSLS     R1,R6,#+3
   \   00000012   2269               LDR      R2,[R4, #+16]
   \   00000014   8A18               ADDS     R2,R1,R2
   \   00000016   2261               STR      R2,[R4, #+16]
   \   00000018   8A42               CMP      R2,R1
   \   0000001A   02D2               BCS.N    ??md5_update_0
    113          		context->count[1]++;
   \   0000001C   6169               LDR      R1,[R4, #+20]
   \   0000001E   491C               ADDS     R1,R1,#+1
   \   00000020   6161               STR      R1,[R4, #+20]
    114          	context->count[1] += ((INT32U)inputLen >> 29);
   \                     ??md5_update_0:
   \   00000022   6169               LDR      R1,[R4, #+20]
   \   00000024   01EB5671           ADD      R1,R1,R6, LSR #+29
   \   00000028   6161               STR      R1,[R4, #+20]
    115          	
    116          	partLen = 64 - index;
   \   0000002A   C0F14007           RSB      R7,R0,#+64
    117          	
    118          	// md5_Transform as many times as possible.
    119          	if (inputLen >= partLen)
   \   0000002E   BE42               CMP      R6,R7
   \   00000030   16D3               BCC.N    ??md5_update_1
    120          	{
    121          		memcpy(&context->buffer[index], input, partLen);
   \   00000032   3A46               MOV      R2,R7
   \   00000034   2946               MOV      R1,R5
   \   00000036   0019               ADDS     R0,R0,R4
   \   00000038   1830               ADDS     R0,R0,#+24
   \   0000003A   ........           BL       memcpy
    122          		md5_transform(context->state, context->buffer);
   \   0000003E   04F11801           ADD      R1,R4,#+24
   \   00000042   2046               MOV      R0,R4
   \   00000044   ........           BL       md5_transform
    123          	
    124          		for (i = partLen; i + 63 < inputLen; i += 64)
   \   00000048   04E0               B.N      ??md5_update_2
    125          			md5_transform(context->state, &input[i]);
   \                     ??md5_update_3:
   \   0000004A   7919               ADDS     R1,R7,R5
   \   0000004C   2046               MOV      R0,R4
   \   0000004E   ........           BL       md5_transform
   \   00000052   4037               ADDS     R7,R7,#+64
   \                     ??md5_update_2:
   \   00000054   07F13F00           ADD      R0,R7,#+63
   \   00000058   B042               CMP      R0,R6
   \   0000005A   F6D3               BCC.N    ??md5_update_3
    126          		index = 0;
   \   0000005C   0020               MOVS     R0,#+0
   \   0000005E   00E0               B.N      ??md5_update_4
    127          	}
    128          	else
    129          		i = 0;
   \                     ??md5_update_1:
   \   00000060   0027               MOVS     R7,#+0
    130          	
    131          	// Buffer remaining input
    132          	memcpy(&context->buffer[index], &input[i], inputLen - i);
   \                     ??md5_update_4:
   \   00000062   F21B               SUBS     R2,R6,R7
   \   00000064   7919               ADDS     R1,R7,R5
   \   00000066   0019               ADDS     R0,R0,R4
   \   00000068   1830               ADDS     R0,R0,#+24
   \   0000006A   BDE8F840           POP      {R3-R7,LR}
   \   0000006E   ........           B.W      memcpy
    133          }
    134          
    135          /**
    136           @brief	md5 finalization. Ends an md5 message-digest operation, writing the
    137          		message digest and zeroizing the context.
    138          */		

   \                                 In section .text, align 4, keep-with-next
    139          void md5_final(INT8U digest[16], md5_ctx *context)
    140          {
   \                     md5_final:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
   \   00000004   0446               MOV      R4,R0
   \   00000006   0D46               MOV      R5,R1
    141          	INT8U  bits[8];
    142          	INT32U index, padLen;
    143          	
    144          	// Save number of bits
    145          	md5_encode(bits, context->count, 8);
   \   00000008   0822               MOVS     R2,#+8
   \   0000000A   05F11001           ADD      R1,R5,#+16
   \   0000000E   00A8               ADD      R0,SP,#+0
   \   00000010   ........           BL       md5_encode
    146          	
    147          	// Pad out to 56 mod 64.
    148          	index  = (INT32U)((context->count[0] >> 3) & 0x3f);
   \   00000014   2869               LDR      R0,[R5, #+16]
   \   00000016   C008               LSRS     R0,R0,#+3
   \   00000018   00F03F00           AND      R0,R0,#0x3F
    149          	padLen = (index < 56) ? (56 - index) : (120 - index);
   \   0000001C   3828               CMP      R0,#+56
   \   0000001E   02D2               BCS.N    ??md5_final_0
   \   00000020   C0F13802           RSB      R2,R0,#+56
   \   00000024   01E0               B.N      ??md5_final_1
   \                     ??md5_final_0:
   \   00000026   C0F17802           RSB      R2,R0,#+120
    150          	md5_update(context, padding, padLen);
   \                     ??md5_final_1:
   \   0000002A   0A49               LDR.N    R1,??md5_final_2  ;; padding
   \   0000002C   2846               MOV      R0,R5
   \   0000002E   ........           BL       md5_update
    151          	
    152          	// Append length (before padding)
    153          	md5_update(context, bits, 8);
   \   00000032   0822               MOVS     R2,#+8
   \   00000034   00A9               ADD      R1,SP,#+0
   \   00000036   2846               MOV      R0,R5
   \   00000038   ........           BL       md5_update
    154          	// Store state in digest
    155          	md5_encode(digest, context->state, 16);
   \   0000003C   1022               MOVS     R2,#+16
   \   0000003E   2946               MOV      R1,R5
   \   00000040   2046               MOV      R0,R4
   \   00000042   ........           BL       md5_encode
    156          	
    157          	// Zeroize sensitive information.
    158          	memset((void*)context,0,sizeof(*context));
   \   00000046   5822               MOVS     R2,#+88
   \   00000048   0021               MOVS     R1,#+0
   \   0000004A   2846               MOV      R0,R5
   \   0000004C   ........           BL       memset
    159          }
   \   00000050   37BD               POP      {R0-R2,R4,R5,PC}  ;; return
   \   00000052   00BF               Nop      
   \                     ??md5_final_2:
   \   00000054   ........           DC32     padding
    160          
    161          /**
    162           @brief	md5 basic transformation. Transforms state based on block.
    163           */

   \                                 In section .text, align 4, keep-with-next
    164          static void md5_transform(INT32U state[4], INT8U block[64])
    165          {
   \                     md5_transform:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   91B0               SUB      SP,SP,#+68
   \   00000006   8146               MOV      R9,R0
    166          	INT32U a = state[0];
   \   00000008   D9F80040           LDR      R4,[R9, #+0]
    167          	INT32U b = state[1];
   \   0000000C   D9F80480           LDR      R8,[R9, #+4]
    168          	INT32U c = state[2];
   \   00000010   D9F80850           LDR      R5,[R9, #+8]
    169          	INT32U d = state[3];
   \   00000014   D9F80C70           LDR      R7,[R9, #+12]
    170          	INT32U x[16];
    171          	
    172          	md5_decode(x, block, 64);
   \   00000018   4022               MOVS     R2,#+64
   \   0000001A   00A8               ADD      R0,SP,#+0
   \   0000001C   ........           BL       md5_decode
    173          
    174          	// Round 1
    175          	a = FF(a, b, c, d, x[0],  S11, 0xd76aa478);	// 1
   \   00000020   DFF80407           LDR.W    R0,??md5_transform_0  ;; 0xd76aa478
   \   00000024   01B5               PUSH     {R0,LR}
   \   00000026   0721               MOVS     R1,#+7
   \   00000028   0298               LDR      R0,[SP, #+8]
   \   0000002A   03B4               PUSH     {R0,R1}
   \   0000002C   3B46               MOV      R3,R7
   \   0000002E   2A46               MOV      R2,R5
   \   00000030   4146               MOV      R1,R8
   \   00000032   2046               MOV      R0,R4
   \   00000034   ........           BL       FF
   \   00000038   04B0               ADD      SP,SP,#+16
   \   0000003A   0646               MOV      R6,R0
    176          	d = FF(d, a, b, c, x[1],  S12, 0xe8c7b756); // 2
   \   0000003C   00AC               ADD      R4,SP,#+0
   \   0000003E   DFF8EC06           LDR.W    R0,??md5_transform_0+0x4  ;; 0xe8c7b756
   \   00000042   01B5               PUSH     {R0,LR}
   \   00000044   0C21               MOVS     R1,#+12
   \   00000046   6068               LDR      R0,[R4, #+4]
   \   00000048   03B4               PUSH     {R0,R1}
   \   0000004A   2B46               MOV      R3,R5
   \   0000004C   4246               MOV      R2,R8
   \   0000004E   3146               MOV      R1,R6
   \   00000050   3846               MOV      R0,R7
   \   00000052   ........           BL       FF
   \   00000056   04B0               ADD      SP,SP,#+16
   \   00000058   0746               MOV      R7,R0
   \   0000005A   DFF8D406           LDR.W    R0,??md5_transform_0+0x8  ;; 0x242070db
   \   0000005E   01B5               PUSH     {R0,LR}
   \   00000060   1121               MOVS     R1,#+17
   \   00000062   A068               LDR      R0,[R4, #+8]
   \   00000064   03B4               PUSH     {R0,R1}
   \   00000066   4346               MOV      R3,R8
   \   00000068   3246               MOV      R2,R6
   \   0000006A   3946               MOV      R1,R7
   \   0000006C   2846               MOV      R0,R5
    177          	c = FF(c, d, a, b, x[2],  S13, 0x242070db); // 3
   \   0000006E   ........           BL       FF
   \   00000072   04B0               ADD      SP,SP,#+16
   \   00000074   0546               MOV      R5,R0
   \   00000076   DFF8BC06           LDR.W    R0,??md5_transform_0+0xC  ;; 0xc1bdceee
   \   0000007A   01B5               PUSH     {R0,LR}
   \   0000007C   1621               MOVS     R1,#+22
   \   0000007E   E068               LDR      R0,[R4, #+12]
   \   00000080   03B4               PUSH     {R0,R1}
   \   00000082   3346               MOV      R3,R6
   \   00000084   3A46               MOV      R2,R7
   \   00000086   2946               MOV      R1,R5
   \   00000088   4046               MOV      R0,R8
    178          	b = FF(b, c, d, a, x[3],  S14, 0xc1bdceee); // 4
   \   0000008A   ........           BL       FF
   \   0000008E   04B0               ADD      SP,SP,#+16
   \   00000090   8046               MOV      R8,R0
   \   00000092   DFF8A406           LDR.W    R0,??md5_transform_0+0x10  ;; 0xf57c0faf
   \   00000096   01B5               PUSH     {R0,LR}
   \   00000098   0721               MOVS     R1,#+7
   \   0000009A   2069               LDR      R0,[R4, #+16]
   \   0000009C   03B4               PUSH     {R0,R1}
   \   0000009E   3B46               MOV      R3,R7
   \   000000A0   2A46               MOV      R2,R5
   \   000000A2   4146               MOV      R1,R8
   \   000000A4   3046               MOV      R0,R6
    179          	a = FF(a, b, c, d, x[4],  S11, 0xf57c0faf); // 5
   \   000000A6   ........           BL       FF
   \   000000AA   04B0               ADD      SP,SP,#+16
   \   000000AC   0646               MOV      R6,R0
   \   000000AE   DFF88C06           LDR.W    R0,??md5_transform_0+0x14  ;; 0x4787c62a
   \   000000B2   01B5               PUSH     {R0,LR}
   \   000000B4   0C21               MOVS     R1,#+12
   \   000000B6   6069               LDR      R0,[R4, #+20]
   \   000000B8   03B4               PUSH     {R0,R1}
   \   000000BA   2B46               MOV      R3,R5
   \   000000BC   4246               MOV      R2,R8
   \   000000BE   3146               MOV      R1,R6
   \   000000C0   3846               MOV      R0,R7
    180          	d = FF(d, a, b, c, x[5],  S12, 0x4787c62a); // 6
   \   000000C2   ........           BL       FF
   \   000000C6   04B0               ADD      SP,SP,#+16
   \   000000C8   0746               MOV      R7,R0
   \   000000CA   DFF87406           LDR.W    R0,??md5_transform_0+0x18  ;; 0xa8304613
   \   000000CE   01B5               PUSH     {R0,LR}
   \   000000D0   1121               MOVS     R1,#+17
   \   000000D2   A069               LDR      R0,[R4, #+24]
   \   000000D4   03B4               PUSH     {R0,R1}
   \   000000D6   4346               MOV      R3,R8
   \   000000D8   3246               MOV      R2,R6
   \   000000DA   3946               MOV      R1,R7
   \   000000DC   2846               MOV      R0,R5
    181          	c = FF(c, d, a, b, x[6],  S13, 0xa8304613); // 7
   \   000000DE   ........           BL       FF
   \   000000E2   04B0               ADD      SP,SP,#+16
   \   000000E4   0546               MOV      R5,R0
   \   000000E6   DFF85C06           LDR.W    R0,??md5_transform_0+0x1C  ;; 0xfd469501
   \   000000EA   01B5               PUSH     {R0,LR}
   \   000000EC   1621               MOVS     R1,#+22
   \   000000EE   E069               LDR      R0,[R4, #+28]
   \   000000F0   03B4               PUSH     {R0,R1}
   \   000000F2   3346               MOV      R3,R6
   \   000000F4   3A46               MOV      R2,R7
   \   000000F6   2946               MOV      R1,R5
   \   000000F8   4046               MOV      R0,R8
    182          	b = FF(b, c, d, a, x[7],  S14, 0xfd469501); // 8
   \   000000FA   ........           BL       FF
   \   000000FE   04B0               ADD      SP,SP,#+16
   \   00000100   8046               MOV      R8,R0
   \   00000102   DFF84406           LDR.W    R0,??md5_transform_0+0x20  ;; 0x698098d8
   \   00000106   01B5               PUSH     {R0,LR}
   \   00000108   0721               MOVS     R1,#+7
   \   0000010A   206A               LDR      R0,[R4, #+32]
   \   0000010C   03B4               PUSH     {R0,R1}
   \   0000010E   3B46               MOV      R3,R7
   \   00000110   2A46               MOV      R2,R5
   \   00000112   4146               MOV      R1,R8
   \   00000114   3046               MOV      R0,R6
    183          	a = FF(a, b, c, d, x[8],  S11, 0x698098d8); // 9
   \   00000116   ........           BL       FF
   \   0000011A   04B0               ADD      SP,SP,#+16
   \   0000011C   0646               MOV      R6,R0
   \   0000011E   DFF82C06           LDR.W    R0,??md5_transform_0+0x24  ;; 0x8b44f7af
   \   00000122   01B5               PUSH     {R0,LR}
   \   00000124   0C21               MOVS     R1,#+12
   \   00000126   606A               LDR      R0,[R4, #+36]
   \   00000128   03B4               PUSH     {R0,R1}
   \   0000012A   2B46               MOV      R3,R5
   \   0000012C   4246               MOV      R2,R8
   \   0000012E   3146               MOV      R1,R6
   \   00000130   3846               MOV      R0,R7
    184          	d = FF(d, a, b, c, x[9],  S12, 0x8b44f7af); // 10
   \   00000132   ........           BL       FF
   \   00000136   04B0               ADD      SP,SP,#+16
   \   00000138   0746               MOV      R7,R0
   \   0000013A   DFF81406           LDR.W    R0,??md5_transform_0+0x28  ;; 0xffff5bb1
   \   0000013E   01B5               PUSH     {R0,LR}
   \   00000140   1121               MOVS     R1,#+17
   \   00000142   A06A               LDR      R0,[R4, #+40]
   \   00000144   03B4               PUSH     {R0,R1}
   \   00000146   4346               MOV      R3,R8
   \   00000148   3246               MOV      R2,R6
   \   0000014A   3946               MOV      R1,R7
   \   0000014C   2846               MOV      R0,R5
    185          	c = FF(c, d, a, b, x[10], S13, 0xffff5bb1); // 11
   \   0000014E   ........           BL       FF
   \   00000152   04B0               ADD      SP,SP,#+16
   \   00000154   0546               MOV      R5,R0
   \   00000156   DFF8FC05           LDR.W    R0,??md5_transform_0+0x2C  ;; 0x895cd7be
   \   0000015A   01B5               PUSH     {R0,LR}
   \   0000015C   1621               MOVS     R1,#+22
   \   0000015E   E06A               LDR      R0,[R4, #+44]
   \   00000160   03B4               PUSH     {R0,R1}
   \   00000162   3346               MOV      R3,R6
   \   00000164   3A46               MOV      R2,R7
   \   00000166   2946               MOV      R1,R5
   \   00000168   4046               MOV      R0,R8
    186          	b = FF(b, c, d, a, x[11], S14, 0x895cd7be); // 12
   \   0000016A   ........           BL       FF
   \   0000016E   04B0               ADD      SP,SP,#+16
   \   00000170   8046               MOV      R8,R0
    187          	a = FF(a, b, c, d, x[12], S11, 0x6b901122); // 13
   \   00000172   D4F830B0           LDR      R11,[R4, #+48]
   \   00000176   DFF8E005           LDR.W    R0,??md5_transform_0+0x30  ;; 0x6b901122
   \   0000017A   01B5               PUSH     {R0,LR}
   \   0000017C   0721               MOVS     R1,#+7
   \   0000017E   5846               MOV      R0,R11
   \   00000180   03B4               PUSH     {R0,R1}
   \   00000182   3B46               MOV      R3,R7
   \   00000184   2A46               MOV      R2,R5
   \   00000186   4146               MOV      R1,R8
   \   00000188   3046               MOV      R0,R6
   \   0000018A   ........           BL       FF
   \   0000018E   04B0               ADD      SP,SP,#+16
   \   00000190   0646               MOV      R6,R0
   \   00000192   DFF8C805           LDR.W    R0,??md5_transform_0+0x34  ;; 0xfd987193
   \   00000196   01B5               PUSH     {R0,LR}
   \   00000198   0C21               MOVS     R1,#+12
   \   0000019A   606B               LDR      R0,[R4, #+52]
   \   0000019C   03B4               PUSH     {R0,R1}
   \   0000019E   2B46               MOV      R3,R5
   \   000001A0   4246               MOV      R2,R8
   \   000001A2   3146               MOV      R1,R6
   \   000001A4   3846               MOV      R0,R7
    188          	d = FF(d, a, b, c, x[13], S12, 0xfd987193); // 14
   \   000001A6   ........           BL       FF
   \   000001AA   04B0               ADD      SP,SP,#+16
   \   000001AC   0746               MOV      R7,R0
    189          	c = FF(c, d, a, b, x[14], S13, 0xa679438e); // 15
   \   000001AE   D4F838A0           LDR      R10,[R4, #+56]
   \   000001B2   DFF8AC05           LDR.W    R0,??md5_transform_0+0x38  ;; 0xa679438e
   \   000001B6   01B5               PUSH     {R0,LR}
   \   000001B8   1121               MOVS     R1,#+17
   \   000001BA   5046               MOV      R0,R10
   \   000001BC   03B4               PUSH     {R0,R1}
   \   000001BE   4346               MOV      R3,R8
   \   000001C0   3246               MOV      R2,R6
   \   000001C2   3946               MOV      R1,R7
   \   000001C4   2846               MOV      R0,R5
   \   000001C6   ........           BL       FF
   \   000001CA   04B0               ADD      SP,SP,#+16
   \   000001CC   0546               MOV      R5,R0
   \   000001CE   DFF89405           LDR.W    R0,??md5_transform_0+0x3C  ;; 0x49b40821
   \   000001D2   01B5               PUSH     {R0,LR}
   \   000001D4   1621               MOVS     R1,#+22
   \   000001D6   E06B               LDR      R0,[R4, #+60]
   \   000001D8   03B4               PUSH     {R0,R1}
   \   000001DA   3346               MOV      R3,R6
   \   000001DC   3A46               MOV      R2,R7
   \   000001DE   2946               MOV      R1,R5
   \   000001E0   4046               MOV      R0,R8
    190          	b = FF(b, c, d, a, x[15], S14, 0x49b40821); // 16
   \   000001E2   ........           BL       FF
   \   000001E6   04B0               ADD      SP,SP,#+16
   \   000001E8   8046               MOV      R8,R0
    191          
    192          	// Round 2
    193          	a = GG(a, b, c, d, x[1],  S21, 0xf61e2562); // 17
   \   000001EA   DFF87C05           LDR.W    R0,??md5_transform_0+0x40  ;; 0xf61e2562
   \   000001EE   01B5               PUSH     {R0,LR}
   \   000001F0   0521               MOVS     R1,#+5
   \   000001F2   6068               LDR      R0,[R4, #+4]
   \   000001F4   03B4               PUSH     {R0,R1}
   \   000001F6   3B46               MOV      R3,R7
   \   000001F8   2A46               MOV      R2,R5
   \   000001FA   4146               MOV      R1,R8
   \   000001FC   3046               MOV      R0,R6
   \   000001FE   ........           BL       GG
   \   00000202   04B0               ADD      SP,SP,#+16
   \   00000204   0646               MOV      R6,R0
    194          	d = GG(d, a, b, c, x[6],  S22, 0xc040b340); // 18
   \   00000206   DFF86405           LDR.W    R0,??md5_transform_0+0x44  ;; 0xc040b340
   \   0000020A   01B5               PUSH     {R0,LR}
   \   0000020C   0921               MOVS     R1,#+9
   \   0000020E   A069               LDR      R0,[R4, #+24]
   \   00000210   03B4               PUSH     {R0,R1}
   \   00000212   2B46               MOV      R3,R5
   \   00000214   4246               MOV      R2,R8
   \   00000216   3146               MOV      R1,R6
   \   00000218   3846               MOV      R0,R7
   \   0000021A   ........           BL       GG
   \   0000021E   04B0               ADD      SP,SP,#+16
   \   00000220   0746               MOV      R7,R0
    195          	c = GG(c, d, a, b, x[11], S23, 0x265e5a51); // 19
   \   00000222   DFF84C05           LDR.W    R0,??md5_transform_0+0x48  ;; 0x265e5a51
   \   00000226   01B5               PUSH     {R0,LR}
   \   00000228   0E21               MOVS     R1,#+14
   \   0000022A   E06A               LDR      R0,[R4, #+44]
   \   0000022C   03B4               PUSH     {R0,R1}
   \   0000022E   4346               MOV      R3,R8
   \   00000230   3246               MOV      R2,R6
   \   00000232   3946               MOV      R1,R7
   \   00000234   2846               MOV      R0,R5
   \   00000236   ........           BL       GG
   \   0000023A   04B0               ADD      SP,SP,#+16
   \   0000023C   0546               MOV      R5,R0
    196          	b = GG(b, c, d, a, x[0],  S24, 0xe9b6c7aa); // 20
   \   0000023E   DFF83405           LDR.W    R0,??md5_transform_0+0x4C  ;; 0xe9b6c7aa
   \   00000242   01B5               PUSH     {R0,LR}
   \   00000244   1421               MOVS     R1,#+20
   \   00000246   0298               LDR      R0,[SP, #+8]
   \   00000248   03B4               PUSH     {R0,R1}
   \   0000024A   3346               MOV      R3,R6
   \   0000024C   3A46               MOV      R2,R7
   \   0000024E   2946               MOV      R1,R5
   \   00000250   4046               MOV      R0,R8
   \   00000252   ........           BL       GG
   \   00000256   04B0               ADD      SP,SP,#+16
   \   00000258   8046               MOV      R8,R0
    197          	a = GG(a, b, c, d, x[5],  S21, 0xd62f105d); // 21
   \   0000025A   DFF81C05           LDR.W    R0,??md5_transform_0+0x50  ;; 0xd62f105d
   \   0000025E   01B5               PUSH     {R0,LR}
   \   00000260   0521               MOVS     R1,#+5
   \   00000262   6069               LDR      R0,[R4, #+20]
   \   00000264   03B4               PUSH     {R0,R1}
   \   00000266   3B46               MOV      R3,R7
   \   00000268   2A46               MOV      R2,R5
   \   0000026A   4146               MOV      R1,R8
   \   0000026C   3046               MOV      R0,R6
   \   0000026E   ........           BL       GG
   \   00000272   04B0               ADD      SP,SP,#+16
   \   00000274   0646               MOV      R6,R0
    198          	d = GG(d, a, b, c, x[10], S22, 0x2441453);  // 22
   \   00000276   DFF80405           LDR.W    R0,??md5_transform_0+0x54  ;; 0x2441453
   \   0000027A   01B5               PUSH     {R0,LR}
   \   0000027C   0921               MOVS     R1,#+9
   \   0000027E   A06A               LDR      R0,[R4, #+40]
   \   00000280   03B4               PUSH     {R0,R1}
   \   00000282   2B46               MOV      R3,R5
   \   00000284   4246               MOV      R2,R8
   \   00000286   3146               MOV      R1,R6
   \   00000288   3846               MOV      R0,R7
   \   0000028A   ........           BL       GG
   \   0000028E   04B0               ADD      SP,SP,#+16
   \   00000290   0746               MOV      R7,R0
    199          	c = GG(c, d, a, b, x[15], S23, 0xd8a1e681); // 23
   \   00000292   DFF8EC04           LDR.W    R0,??md5_transform_0+0x58  ;; 0xd8a1e681
   \   00000296   01B5               PUSH     {R0,LR}
   \   00000298   0E21               MOVS     R1,#+14
   \   0000029A   E06B               LDR      R0,[R4, #+60]
   \   0000029C   03B4               PUSH     {R0,R1}
   \   0000029E   4346               MOV      R3,R8
   \   000002A0   3246               MOV      R2,R6
   \   000002A2   3946               MOV      R1,R7
   \   000002A4   2846               MOV      R0,R5
   \   000002A6   ........           BL       GG
   \   000002AA   04B0               ADD      SP,SP,#+16
   \   000002AC   0546               MOV      R5,R0
    200          	b = GG(b, c, d, a, x[4],  S24, 0xe7d3fbc8); // 24
   \   000002AE   DFF8D404           LDR.W    R0,??md5_transform_0+0x5C  ;; 0xe7d3fbc8
   \   000002B2   01B5               PUSH     {R0,LR}
   \   000002B4   1421               MOVS     R1,#+20
   \   000002B6   2069               LDR      R0,[R4, #+16]
   \   000002B8   03B4               PUSH     {R0,R1}
   \   000002BA   3346               MOV      R3,R6
   \   000002BC   3A46               MOV      R2,R7
   \   000002BE   2946               MOV      R1,R5
   \   000002C0   4046               MOV      R0,R8
   \   000002C2   ........           BL       GG
   \   000002C6   04B0               ADD      SP,SP,#+16
   \   000002C8   8046               MOV      R8,R0
    201          	a = GG(a, b, c, d, x[9],  S21, 0x21e1cde6); // 25
   \   000002CA   DFF8BC04           LDR.W    R0,??md5_transform_0+0x60  ;; 0x21e1cde6
   \   000002CE   01B5               PUSH     {R0,LR}
   \   000002D0   0521               MOVS     R1,#+5
   \   000002D2   606A               LDR      R0,[R4, #+36]
   \   000002D4   03B4               PUSH     {R0,R1}
   \   000002D6   3B46               MOV      R3,R7
   \   000002D8   2A46               MOV      R2,R5
   \   000002DA   4146               MOV      R1,R8
   \   000002DC   3046               MOV      R0,R6
   \   000002DE   ........           BL       GG
   \   000002E2   04B0               ADD      SP,SP,#+16
   \   000002E4   0646               MOV      R6,R0
    202          	d = GG(d, a, b, c, x[14], S22, 0xc33707d6); // 26
   \   000002E6   DFF8A404           LDR.W    R0,??md5_transform_0+0x64  ;; 0xc33707d6
   \   000002EA   01B5               PUSH     {R0,LR}
   \   000002EC   0921               MOVS     R1,#+9
   \   000002EE   5046               MOV      R0,R10
   \   000002F0   03B4               PUSH     {R0,R1}
   \   000002F2   2B46               MOV      R3,R5
   \   000002F4   4246               MOV      R2,R8
   \   000002F6   3146               MOV      R1,R6
   \   000002F8   3846               MOV      R0,R7
   \   000002FA   ........           BL       GG
   \   000002FE   04B0               ADD      SP,SP,#+16
   \   00000300   0746               MOV      R7,R0
    203          	c = GG(c, d, a, b, x[3],  S23, 0xf4d50d87); // 27
   \   00000302   DFF88C04           LDR.W    R0,??md5_transform_0+0x68  ;; 0xf4d50d87
   \   00000306   01B5               PUSH     {R0,LR}
   \   00000308   0E21               MOVS     R1,#+14
   \   0000030A   E068               LDR      R0,[R4, #+12]
   \   0000030C   03B4               PUSH     {R0,R1}
   \   0000030E   4346               MOV      R3,R8
   \   00000310   3246               MOV      R2,R6
   \   00000312   3946               MOV      R1,R7
   \   00000314   2846               MOV      R0,R5
   \   00000316   ........           BL       GG
   \   0000031A   04B0               ADD      SP,SP,#+16
   \   0000031C   0546               MOV      R5,R0
    204          	b = GG(b, c, d, a, x[8],  S24, 0x455a14ed); // 28
   \   0000031E   DFF87404           LDR.W    R0,??md5_transform_0+0x6C  ;; 0x455a14ed
   \   00000322   01B5               PUSH     {R0,LR}
   \   00000324   1421               MOVS     R1,#+20
   \   00000326   206A               LDR      R0,[R4, #+32]
   \   00000328   03B4               PUSH     {R0,R1}
   \   0000032A   3346               MOV      R3,R6
   \   0000032C   3A46               MOV      R2,R7
   \   0000032E   2946               MOV      R1,R5
   \   00000330   4046               MOV      R0,R8
   \   00000332   ........           BL       GG
   \   00000336   04B0               ADD      SP,SP,#+16
   \   00000338   8046               MOV      R8,R0
    205          	a = GG(a, b, c, d, x[13], S21, 0xa9e3e905); // 29
   \   0000033A   DFF85C04           LDR.W    R0,??md5_transform_0+0x70  ;; 0xa9e3e905
   \   0000033E   01B5               PUSH     {R0,LR}
   \   00000340   0521               MOVS     R1,#+5
   \   00000342   606B               LDR      R0,[R4, #+52]
   \   00000344   03B4               PUSH     {R0,R1}
   \   00000346   3B46               MOV      R3,R7
   \   00000348   2A46               MOV      R2,R5
   \   0000034A   4146               MOV      R1,R8
   \   0000034C   3046               MOV      R0,R6
   \   0000034E   ........           BL       GG
   \   00000352   04B0               ADD      SP,SP,#+16
   \   00000354   0646               MOV      R6,R0
    206          	d = GG(d, a, b, c, x[2],  S22, 0xfcefa3f8); // 30
   \   00000356   DFF84404           LDR.W    R0,??md5_transform_0+0x74  ;; 0xfcefa3f8
   \   0000035A   01B5               PUSH     {R0,LR}
   \   0000035C   0921               MOVS     R1,#+9
   \   0000035E   A068               LDR      R0,[R4, #+8]
   \   00000360   03B4               PUSH     {R0,R1}
   \   00000362   2B46               MOV      R3,R5
   \   00000364   4246               MOV      R2,R8
   \   00000366   3146               MOV      R1,R6
   \   00000368   3846               MOV      R0,R7
   \   0000036A   ........           BL       GG
   \   0000036E   04B0               ADD      SP,SP,#+16
   \   00000370   0746               MOV      R7,R0
    207          	c = GG(c, d, a, b, x[7],  S23, 0x676f02d9); // 31
   \   00000372   DFF82C04           LDR.W    R0,??md5_transform_0+0x78  ;; 0x676f02d9
   \   00000376   01B5               PUSH     {R0,LR}
   \   00000378   0E21               MOVS     R1,#+14
   \   0000037A   E069               LDR      R0,[R4, #+28]
   \   0000037C   03B4               PUSH     {R0,R1}
   \   0000037E   4346               MOV      R3,R8
   \   00000380   3246               MOV      R2,R6
   \   00000382   3946               MOV      R1,R7
   \   00000384   2846               MOV      R0,R5
   \   00000386   ........           BL       GG
   \   0000038A   04B0               ADD      SP,SP,#+16
   \   0000038C   0546               MOV      R5,R0
    208          	b = GG(b, c, d, a, x[12], S24, 0x8d2a4c8a); // 32
   \   0000038E   DFF81404           LDR.W    R0,??md5_transform_0+0x7C  ;; 0x8d2a4c8a
   \   00000392   01B5               PUSH     {R0,LR}
   \   00000394   1421               MOVS     R1,#+20
   \   00000396   5846               MOV      R0,R11
   \   00000398   03B4               PUSH     {R0,R1}
   \   0000039A   3346               MOV      R3,R6
   \   0000039C   3A46               MOV      R2,R7
   \   0000039E   2946               MOV      R1,R5
   \   000003A0   4046               MOV      R0,R8
   \   000003A2   ........           BL       GG
   \   000003A6   04B0               ADD      SP,SP,#+16
   \   000003A8   8046               MOV      R8,R0
    209          	
    210          	// Round 3
    211          	a = HH(a, b, c, d, x[5],  S31, 0xfffa3942); // 33
   \   000003AA   DFF8FC03           LDR.W    R0,??md5_transform_0+0x80  ;; 0xfffa3942
   \   000003AE   01B5               PUSH     {R0,LR}
   \   000003B0   0421               MOVS     R1,#+4
   \   000003B2   6069               LDR      R0,[R4, #+20]
   \   000003B4   03B4               PUSH     {R0,R1}
   \   000003B6   3B46               MOV      R3,R7
   \   000003B8   2A46               MOV      R2,R5
   \   000003BA   4146               MOV      R1,R8
   \   000003BC   3046               MOV      R0,R6
   \   000003BE   ........           BL       HH
   \   000003C2   04B0               ADD      SP,SP,#+16
   \   000003C4   0646               MOV      R6,R0
    212          	d = HH(d, a, b, c, x[8],  S32, 0x8771f681); // 34
   \   000003C6   DFF8E403           LDR.W    R0,??md5_transform_0+0x84  ;; 0x8771f681
   \   000003CA   01B5               PUSH     {R0,LR}
   \   000003CC   0B21               MOVS     R1,#+11
   \   000003CE   206A               LDR      R0,[R4, #+32]
   \   000003D0   03B4               PUSH     {R0,R1}
   \   000003D2   2B46               MOV      R3,R5
   \   000003D4   4246               MOV      R2,R8
   \   000003D6   3146               MOV      R1,R6
   \   000003D8   3846               MOV      R0,R7
   \   000003DA   ........           BL       HH
   \   000003DE   04B0               ADD      SP,SP,#+16
   \   000003E0   0746               MOV      R7,R0
    213          	c = HH(c, d, a, b, x[11], S33, 0x6d9d6122); // 35
   \   000003E2   DFF8CC03           LDR.W    R0,??md5_transform_0+0x88  ;; 0x6d9d6122
   \   000003E6   01B5               PUSH     {R0,LR}
   \   000003E8   1021               MOVS     R1,#+16
   \   000003EA   E06A               LDR      R0,[R4, #+44]
   \   000003EC   03B4               PUSH     {R0,R1}
   \   000003EE   4346               MOV      R3,R8
   \   000003F0   3246               MOV      R2,R6
   \   000003F2   3946               MOV      R1,R7
   \   000003F4   2846               MOV      R0,R5
   \   000003F6   ........           BL       HH
   \   000003FA   04B0               ADD      SP,SP,#+16
   \   000003FC   0546               MOV      R5,R0
    214          	b = HH(b, c, d, a, x[14], S34, 0xfde5380c); // 36
   \   000003FE   DFF8B403           LDR.W    R0,??md5_transform_0+0x8C  ;; 0xfde5380c
   \   00000402   01B5               PUSH     {R0,LR}
   \   00000404   1721               MOVS     R1,#+23
   \   00000406   5046               MOV      R0,R10
   \   00000408   03B4               PUSH     {R0,R1}
   \   0000040A   3346               MOV      R3,R6
   \   0000040C   3A46               MOV      R2,R7
   \   0000040E   2946               MOV      R1,R5
   \   00000410   4046               MOV      R0,R8
   \   00000412   ........           BL       HH
   \   00000416   04B0               ADD      SP,SP,#+16
   \   00000418   8046               MOV      R8,R0
    215          	a = HH(a, b, c, d, x[1],  S31, 0xa4beea44); // 37
   \   0000041A   E748               LDR.N    R0,??md5_transform_0+0x90  ;; 0xa4beea44
   \   0000041C   01B5               PUSH     {R0,LR}
   \   0000041E   0421               MOVS     R1,#+4
   \   00000420   6068               LDR      R0,[R4, #+4]
   \   00000422   03B4               PUSH     {R0,R1}
   \   00000424   3B46               MOV      R3,R7
   \   00000426   2A46               MOV      R2,R5
   \   00000428   4146               MOV      R1,R8
   \   0000042A   3046               MOV      R0,R6
   \   0000042C   ........           BL       HH
   \   00000430   04B0               ADD      SP,SP,#+16
   \   00000432   0646               MOV      R6,R0
    216          	d = HH(d, a, b, c, x[4],  S32, 0x4bdecfa9); // 38
   \   00000434   E148               LDR.N    R0,??md5_transform_0+0x94  ;; 0x4bdecfa9
   \   00000436   01B5               PUSH     {R0,LR}
   \   00000438   0B21               MOVS     R1,#+11
   \   0000043A   2069               LDR      R0,[R4, #+16]
   \   0000043C   03B4               PUSH     {R0,R1}
   \   0000043E   2B46               MOV      R3,R5
   \   00000440   4246               MOV      R2,R8
   \   00000442   3146               MOV      R1,R6
   \   00000444   3846               MOV      R0,R7
   \   00000446   ........           BL       HH
   \   0000044A   04B0               ADD      SP,SP,#+16
   \   0000044C   0746               MOV      R7,R0
    217          	c = HH(c, d, a, b, x[7],  S33, 0xf6bb4b60); // 39
   \   0000044E   DC48               LDR.N    R0,??md5_transform_0+0x98  ;; 0xf6bb4b60
   \   00000450   01B5               PUSH     {R0,LR}
   \   00000452   1021               MOVS     R1,#+16
   \   00000454   E069               LDR      R0,[R4, #+28]
   \   00000456   03B4               PUSH     {R0,R1}
   \   00000458   4346               MOV      R3,R8
   \   0000045A   3246               MOV      R2,R6
   \   0000045C   3946               MOV      R1,R7
   \   0000045E   2846               MOV      R0,R5
   \   00000460   ........           BL       HH
   \   00000464   04B0               ADD      SP,SP,#+16
   \   00000466   0546               MOV      R5,R0
    218          	b = HH(b, c, d, a, x[10], S34, 0xbebfbc70); // 40
   \   00000468   D648               LDR.N    R0,??md5_transform_0+0x9C  ;; 0xbebfbc70
   \   0000046A   01B5               PUSH     {R0,LR}
   \   0000046C   1721               MOVS     R1,#+23
   \   0000046E   A06A               LDR      R0,[R4, #+40]
   \   00000470   03B4               PUSH     {R0,R1}
   \   00000472   3346               MOV      R3,R6
   \   00000474   3A46               MOV      R2,R7
   \   00000476   2946               MOV      R1,R5
   \   00000478   4046               MOV      R0,R8
   \   0000047A   ........           BL       HH
   \   0000047E   04B0               ADD      SP,SP,#+16
   \   00000480   8046               MOV      R8,R0
    219          	a = HH(a, b, c, d, x[13], S31, 0x289b7ec6); // 41
   \   00000482   D148               LDR.N    R0,??md5_transform_0+0xA0  ;; 0x289b7ec6
   \   00000484   01B5               PUSH     {R0,LR}
   \   00000486   0421               MOVS     R1,#+4
   \   00000488   606B               LDR      R0,[R4, #+52]
   \   0000048A   03B4               PUSH     {R0,R1}
   \   0000048C   3B46               MOV      R3,R7
   \   0000048E   2A46               MOV      R2,R5
   \   00000490   4146               MOV      R1,R8
   \   00000492   3046               MOV      R0,R6
   \   00000494   ........           BL       HH
   \   00000498   04B0               ADD      SP,SP,#+16
   \   0000049A   0646               MOV      R6,R0
    220          	d = HH(d, a, b, c, x[0],  S32, 0xeaa127fa); // 42
   \   0000049C   CB48               LDR.N    R0,??md5_transform_0+0xA4  ;; 0xeaa127fa
   \   0000049E   01B5               PUSH     {R0,LR}
   \   000004A0   0B21               MOVS     R1,#+11
   \   000004A2   0298               LDR      R0,[SP, #+8]
   \   000004A4   03B4               PUSH     {R0,R1}
   \   000004A6   2B46               MOV      R3,R5
   \   000004A8   4246               MOV      R2,R8
   \   000004AA   3146               MOV      R1,R6
   \   000004AC   3846               MOV      R0,R7
   \   000004AE   ........           BL       HH
   \   000004B2   04B0               ADD      SP,SP,#+16
   \   000004B4   0746               MOV      R7,R0
    221          	c = HH(c, d, a, b, x[3],  S33, 0xd4ef3085); // 43
   \   000004B6   C648               LDR.N    R0,??md5_transform_0+0xA8  ;; 0xd4ef3085
   \   000004B8   01B5               PUSH     {R0,LR}
   \   000004BA   1021               MOVS     R1,#+16
   \   000004BC   E068               LDR      R0,[R4, #+12]
   \   000004BE   03B4               PUSH     {R0,R1}
   \   000004C0   4346               MOV      R3,R8
   \   000004C2   3246               MOV      R2,R6
   \   000004C4   3946               MOV      R1,R7
   \   000004C6   2846               MOV      R0,R5
   \   000004C8   ........           BL       HH
   \   000004CC   04B0               ADD      SP,SP,#+16
   \   000004CE   0546               MOV      R5,R0
    222          	b = HH(b, c, d, a, x[6],  S34, 0x4881d05);  // 44
   \   000004D0   C048               LDR.N    R0,??md5_transform_0+0xAC  ;; 0x4881d05
   \   000004D2   01B5               PUSH     {R0,LR}
   \   000004D4   1721               MOVS     R1,#+23
   \   000004D6   A069               LDR      R0,[R4, #+24]
   \   000004D8   03B4               PUSH     {R0,R1}
   \   000004DA   3346               MOV      R3,R6
   \   000004DC   3A46               MOV      R2,R7
   \   000004DE   2946               MOV      R1,R5
   \   000004E0   4046               MOV      R0,R8
   \   000004E2   ........           BL       HH
   \   000004E6   04B0               ADD      SP,SP,#+16
   \   000004E8   8046               MOV      R8,R0
    223          	a = HH(a, b, c, d, x[9],  S31, 0xd9d4d039); // 45
   \   000004EA   BB48               LDR.N    R0,??md5_transform_0+0xB0  ;; 0xd9d4d039
   \   000004EC   01B5               PUSH     {R0,LR}
   \   000004EE   0421               MOVS     R1,#+4
   \   000004F0   606A               LDR      R0,[R4, #+36]
   \   000004F2   03B4               PUSH     {R0,R1}
   \   000004F4   3B46               MOV      R3,R7
   \   000004F6   2A46               MOV      R2,R5
   \   000004F8   4146               MOV      R1,R8
   \   000004FA   3046               MOV      R0,R6
   \   000004FC   ........           BL       HH
   \   00000500   04B0               ADD      SP,SP,#+16
   \   00000502   0646               MOV      R6,R0
    224          	d = HH(d, a, b, c, x[12], S32, 0xe6db99e5); // 46
   \   00000504   B548               LDR.N    R0,??md5_transform_0+0xB4  ;; 0xe6db99e5
   \   00000506   01B5               PUSH     {R0,LR}
   \   00000508   0B21               MOVS     R1,#+11
   \   0000050A   5846               MOV      R0,R11
   \   0000050C   03B4               PUSH     {R0,R1}
   \   0000050E   2B46               MOV      R3,R5
   \   00000510   4246               MOV      R2,R8
   \   00000512   3146               MOV      R1,R6
   \   00000514   3846               MOV      R0,R7
   \   00000516   ........           BL       HH
   \   0000051A   04B0               ADD      SP,SP,#+16
   \   0000051C   0746               MOV      R7,R0
    225          	c = HH(c, d, a, b, x[15], S33, 0x1fa27cf8); // 47
   \   0000051E   B048               LDR.N    R0,??md5_transform_0+0xB8  ;; 0x1fa27cf8
   \   00000520   01B5               PUSH     {R0,LR}
   \   00000522   1021               MOVS     R1,#+16
   \   00000524   E06B               LDR      R0,[R4, #+60]
   \   00000526   03B4               PUSH     {R0,R1}
   \   00000528   4346               MOV      R3,R8
   \   0000052A   3246               MOV      R2,R6
   \   0000052C   3946               MOV      R1,R7
   \   0000052E   2846               MOV      R0,R5
   \   00000530   ........           BL       HH
   \   00000534   04B0               ADD      SP,SP,#+16
   \   00000536   0546               MOV      R5,R0
    226          	b = HH(b, c, d, a, x[2],  S34, 0xc4ac5665); // 48
   \   00000538   AA48               LDR.N    R0,??md5_transform_0+0xBC  ;; 0xc4ac5665
   \   0000053A   01B5               PUSH     {R0,LR}
   \   0000053C   1721               MOVS     R1,#+23
   \   0000053E   A068               LDR      R0,[R4, #+8]
   \   00000540   03B4               PUSH     {R0,R1}
   \   00000542   3346               MOV      R3,R6
   \   00000544   3A46               MOV      R2,R7
   \   00000546   2946               MOV      R1,R5
   \   00000548   4046               MOV      R0,R8
   \   0000054A   ........           BL       HH
   \   0000054E   04B0               ADD      SP,SP,#+16
   \   00000550   8046               MOV      R8,R0
    227          
    228          	// Round 4
    229          	a = II(a, b, c, d, x[0],  S41, 0xf4292244); // 49
   \   00000552   A548               LDR.N    R0,??md5_transform_0+0xC0  ;; 0xf4292244
   \   00000554   01B5               PUSH     {R0,LR}
   \   00000556   0621               MOVS     R1,#+6
   \   00000558   0298               LDR      R0,[SP, #+8]
   \   0000055A   03B4               PUSH     {R0,R1}
   \   0000055C   3B46               MOV      R3,R7
   \   0000055E   2A46               MOV      R2,R5
   \   00000560   4146               MOV      R1,R8
   \   00000562   3046               MOV      R0,R6
   \   00000564   ........           BL       II
   \   00000568   04B0               ADD      SP,SP,#+16
   \   0000056A   0646               MOV      R6,R0
    230          	d = II(d, a, b, c, x[7],  S42, 0x432aff97); // 50
   \   0000056C   9F48               LDR.N    R0,??md5_transform_0+0xC4  ;; 0x432aff97
   \   0000056E   01B5               PUSH     {R0,LR}
   \   00000570   0A21               MOVS     R1,#+10
   \   00000572   E069               LDR      R0,[R4, #+28]
   \   00000574   03B4               PUSH     {R0,R1}
   \   00000576   2B46               MOV      R3,R5
   \   00000578   4246               MOV      R2,R8
   \   0000057A   3146               MOV      R1,R6
   \   0000057C   3846               MOV      R0,R7
   \   0000057E   ........           BL       II
   \   00000582   04B0               ADD      SP,SP,#+16
   \   00000584   0746               MOV      R7,R0
    231          	c = II(c, d, a, b, x[14], S43, 0xab9423a7); // 51
   \   00000586   9A48               LDR.N    R0,??md5_transform_0+0xC8  ;; 0xab9423a7
   \   00000588   01B5               PUSH     {R0,LR}
   \   0000058A   0F21               MOVS     R1,#+15
   \   0000058C   5046               MOV      R0,R10
   \   0000058E   03B4               PUSH     {R0,R1}
   \   00000590   4346               MOV      R3,R8
   \   00000592   3246               MOV      R2,R6
   \   00000594   3946               MOV      R1,R7
   \   00000596   2846               MOV      R0,R5
   \   00000598   ........           BL       II
   \   0000059C   04B0               ADD      SP,SP,#+16
   \   0000059E   0546               MOV      R5,R0
    232          	b = II(b, c, d, a, x[5],  S44, 0xfc93a039); // 52
   \   000005A0   9448               LDR.N    R0,??md5_transform_0+0xCC  ;; 0xfc93a039
   \   000005A2   01B5               PUSH     {R0,LR}
   \   000005A4   1521               MOVS     R1,#+21
   \   000005A6   6069               LDR      R0,[R4, #+20]
   \   000005A8   03B4               PUSH     {R0,R1}
   \   000005AA   3346               MOV      R3,R6
   \   000005AC   3A46               MOV      R2,R7
   \   000005AE   2946               MOV      R1,R5
   \   000005B0   4046               MOV      R0,R8
   \   000005B2   ........           BL       II
   \   000005B6   04B0               ADD      SP,SP,#+16
   \   000005B8   8046               MOV      R8,R0
    233          	a = II(a, b, c, d, x[12], S41, 0x655b59c3); // 53
   \   000005BA   8F48               LDR.N    R0,??md5_transform_0+0xD0  ;; 0x655b59c3
   \   000005BC   01B5               PUSH     {R0,LR}
   \   000005BE   0621               MOVS     R1,#+6
   \   000005C0   5846               MOV      R0,R11
   \   000005C2   03B4               PUSH     {R0,R1}
   \   000005C4   3B46               MOV      R3,R7
   \   000005C6   2A46               MOV      R2,R5
   \   000005C8   4146               MOV      R1,R8
   \   000005CA   3046               MOV      R0,R6
   \   000005CC   ........           BL       II
   \   000005D0   04B0               ADD      SP,SP,#+16
   \   000005D2   0646               MOV      R6,R0
    234          	d = II(d, a, b, c, x[3],  S42, 0x8f0ccc92); // 54
   \   000005D4   8948               LDR.N    R0,??md5_transform_0+0xD4  ;; 0x8f0ccc92
   \   000005D6   01B5               PUSH     {R0,LR}
   \   000005D8   0A21               MOVS     R1,#+10
   \   000005DA   E068               LDR      R0,[R4, #+12]
   \   000005DC   03B4               PUSH     {R0,R1}
   \   000005DE   2B46               MOV      R3,R5
   \   000005E0   4246               MOV      R2,R8
   \   000005E2   3146               MOV      R1,R6
   \   000005E4   3846               MOV      R0,R7
   \   000005E6   ........           BL       II
   \   000005EA   04B0               ADD      SP,SP,#+16
   \   000005EC   0746               MOV      R7,R0
    235          	c = II(c, d, a, b, x[10], S43, 0xffeff47d); // 55
   \   000005EE   8448               LDR.N    R0,??md5_transform_0+0xD8  ;; 0xffeff47d
   \   000005F0   01B5               PUSH     {R0,LR}
   \   000005F2   0F21               MOVS     R1,#+15
   \   000005F4   A06A               LDR      R0,[R4, #+40]
   \   000005F6   03B4               PUSH     {R0,R1}
   \   000005F8   4346               MOV      R3,R8
   \   000005FA   3246               MOV      R2,R6
   \   000005FC   3946               MOV      R1,R7
   \   000005FE   2846               MOV      R0,R5
   \   00000600   ........           BL       II
   \   00000604   04B0               ADD      SP,SP,#+16
   \   00000606   0546               MOV      R5,R0
    236          	b = II(b, c, d, a, x[1],  S44, 0x85845dd1); // 56
   \   00000608   7E48               LDR.N    R0,??md5_transform_0+0xDC  ;; 0x85845dd1
   \   0000060A   01B5               PUSH     {R0,LR}
   \   0000060C   1521               MOVS     R1,#+21
   \   0000060E   6068               LDR      R0,[R4, #+4]
   \   00000610   03B4               PUSH     {R0,R1}
   \   00000612   3346               MOV      R3,R6
   \   00000614   3A46               MOV      R2,R7
   \   00000616   2946               MOV      R1,R5
   \   00000618   4046               MOV      R0,R8
   \   0000061A   ........           BL       II
   \   0000061E   04B0               ADD      SP,SP,#+16
   \   00000620   8046               MOV      R8,R0
    237          	a = II(a, b, c, d, x[8],  S41, 0x6fa87e4f); // 57
   \   00000622   7948               LDR.N    R0,??md5_transform_0+0xE0  ;; 0x6fa87e4f
   \   00000624   01B5               PUSH     {R0,LR}
   \   00000626   0621               MOVS     R1,#+6
   \   00000628   206A               LDR      R0,[R4, #+32]
   \   0000062A   03B4               PUSH     {R0,R1}
   \   0000062C   3B46               MOV      R3,R7
   \   0000062E   2A46               MOV      R2,R5
   \   00000630   4146               MOV      R1,R8
   \   00000632   3046               MOV      R0,R6
   \   00000634   ........           BL       II
   \   00000638   04B0               ADD      SP,SP,#+16
   \   0000063A   0646               MOV      R6,R0
    238          	d = II(d, a, b, c, x[15], S42, 0xfe2ce6e0); // 58
   \   0000063C   7348               LDR.N    R0,??md5_transform_0+0xE4  ;; 0xfe2ce6e0
   \   0000063E   01B5               PUSH     {R0,LR}
   \   00000640   0A21               MOVS     R1,#+10
   \   00000642   E06B               LDR      R0,[R4, #+60]
   \   00000644   03B4               PUSH     {R0,R1}
   \   00000646   2B46               MOV      R3,R5
   \   00000648   4246               MOV      R2,R8
   \   0000064A   3146               MOV      R1,R6
   \   0000064C   3846               MOV      R0,R7
   \   0000064E   ........           BL       II
   \   00000652   04B0               ADD      SP,SP,#+16
   \   00000654   0746               MOV      R7,R0
    239          	c = II(c, d, a, b, x[6],  S43, 0xa3014314); // 59
   \   00000656   6E48               LDR.N    R0,??md5_transform_0+0xE8  ;; 0xa3014314
   \   00000658   01B5               PUSH     {R0,LR}
   \   0000065A   0F21               MOVS     R1,#+15
   \   0000065C   A069               LDR      R0,[R4, #+24]
   \   0000065E   03B4               PUSH     {R0,R1}
   \   00000660   4346               MOV      R3,R8
   \   00000662   3246               MOV      R2,R6
   \   00000664   3946               MOV      R1,R7
   \   00000666   2846               MOV      R0,R5
   \   00000668   ........           BL       II
   \   0000066C   04B0               ADD      SP,SP,#+16
   \   0000066E   0546               MOV      R5,R0
    240          	b = II(b, c, d, a, x[13], S44, 0x4e0811a1); // 60
   \   00000670   6848               LDR.N    R0,??md5_transform_0+0xEC  ;; 0x4e0811a1
   \   00000672   01B5               PUSH     {R0,LR}
   \   00000674   1521               MOVS     R1,#+21
   \   00000676   606B               LDR      R0,[R4, #+52]
   \   00000678   03B4               PUSH     {R0,R1}
   \   0000067A   3346               MOV      R3,R6
   \   0000067C   3A46               MOV      R2,R7
   \   0000067E   2946               MOV      R1,R5
   \   00000680   4046               MOV      R0,R8
   \   00000682   ........           BL       II
   \   00000686   04B0               ADD      SP,SP,#+16
   \   00000688   8046               MOV      R8,R0
    241          	a = II(a, b, c, d, x[4],  S41, 0xf7537e82); // 61
   \   0000068A   6348               LDR.N    R0,??md5_transform_0+0xF0  ;; 0xf7537e82
   \   0000068C   01B5               PUSH     {R0,LR}
   \   0000068E   0621               MOVS     R1,#+6
   \   00000690   2069               LDR      R0,[R4, #+16]
   \   00000692   03B4               PUSH     {R0,R1}
   \   00000694   3B46               MOV      R3,R7
   \   00000696   2A46               MOV      R2,R5
   \   00000698   4146               MOV      R1,R8
   \   0000069A   3046               MOV      R0,R6
   \   0000069C   ........           BL       II
   \   000006A0   04B0               ADD      SP,SP,#+16
   \   000006A2   0646               MOV      R6,R0
    242          	d = II(d, a, b, c, x[11], S42, 0xbd3af235); // 62
   \   000006A4   5D48               LDR.N    R0,??md5_transform_0+0xF4  ;; 0xbd3af235
   \   000006A6   01B5               PUSH     {R0,LR}
   \   000006A8   0A21               MOVS     R1,#+10
   \   000006AA   E06A               LDR      R0,[R4, #+44]
   \   000006AC   03B4               PUSH     {R0,R1}
   \   000006AE   2B46               MOV      R3,R5
   \   000006B0   4246               MOV      R2,R8
   \   000006B2   3146               MOV      R1,R6
   \   000006B4   3846               MOV      R0,R7
   \   000006B6   ........           BL       II
   \   000006BA   04B0               ADD      SP,SP,#+16
   \   000006BC   0746               MOV      R7,R0
    243          	c = II(c, d, a, b, x[2],  S43, 0x2ad7d2bb); // 63
   \   000006BE   5848               LDR.N    R0,??md5_transform_0+0xF8  ;; 0x2ad7d2bb
   \   000006C0   01B5               PUSH     {R0,LR}
   \   000006C2   0F21               MOVS     R1,#+15
   \   000006C4   A068               LDR      R0,[R4, #+8]
   \   000006C6   03B4               PUSH     {R0,R1}
   \   000006C8   4346               MOV      R3,R8
   \   000006CA   3246               MOV      R2,R6
   \   000006CC   3946               MOV      R1,R7
   \   000006CE   2846               MOV      R0,R5
   \   000006D0   ........           BL       II
   \   000006D4   04B0               ADD      SP,SP,#+16
   \   000006D6   0546               MOV      R5,R0
    244          	b = II(b, c, d, a, x[9],  S44, 0xeb86d391); // 64
   \   000006D8   5248               LDR.N    R0,??md5_transform_0+0xFC  ;; 0xeb86d391
   \   000006DA   01B5               PUSH     {R0,LR}
   \   000006DC   1521               MOVS     R1,#+21
   \   000006DE   606A               LDR      R0,[R4, #+36]
   \   000006E0   03B4               PUSH     {R0,R1}
   \   000006E2   3346               MOV      R3,R6
   \   000006E4   3A46               MOV      R2,R7
   \   000006E6   2946               MOV      R1,R5
   \   000006E8   4046               MOV      R0,R8
   \   000006EA   ........           BL       II
   \   000006EE   04B0               ADD      SP,SP,#+16
    245          
    246          	state[0] += a;
   \   000006F0   D9F80010           LDR      R1,[R9, #+0]
   \   000006F4   7118               ADDS     R1,R6,R1
   \   000006F6   C9F80010           STR      R1,[R9, #+0]
    247          	state[1] += b;
   \   000006FA   D9F80410           LDR      R1,[R9, #+4]
   \   000006FE   4018               ADDS     R0,R0,R1
   \   00000700   C9F80400           STR      R0,[R9, #+4]
    248          	state[2] += c;
   \   00000704   D9F80800           LDR      R0,[R9, #+8]
   \   00000708   2818               ADDS     R0,R5,R0
   \   0000070A   C9F80800           STR      R0,[R9, #+8]
    249          	state[3] += d;
   \   0000070E   D9F80C00           LDR      R0,[R9, #+12]
   \   00000712   3818               ADDS     R0,R7,R0
   \   00000714   C9F80C00           STR      R0,[R9, #+12]
    250          	
    251          	// Zeroize sensitive information.
    252          	memset(&x,0,sizeof(x));
   \   00000718   4022               MOVS     R2,#+64
   \   0000071A   0021               MOVS     R1,#+0
   \   0000071C   00A8               ADD      R0,SP,#+0
   \   0000071E   ........           BL       memset
    253          }
   \   00000722   11B0               ADD      SP,SP,#+68
   \   00000724   BDE8F08F           POP      {R4-R11,PC}      ;; return
   \                     ??md5_transform_0:
   \   00000728   78A46AD7           DC32     0xd76aa478
   \   0000072C   56B7C7E8           DC32     0xe8c7b756
   \   00000730   DB702024           DC32     0x242070db
   \   00000734   EECEBDC1           DC32     0xc1bdceee
   \   00000738   AF0F7CF5           DC32     0xf57c0faf
   \   0000073C   2AC68747           DC32     0x4787c62a
   \   00000740   134630A8           DC32     0xa8304613
   \   00000744   019546FD           DC32     0xfd469501
   \   00000748   D8988069           DC32     0x698098d8
   \   0000074C   AFF7448B           DC32     0x8b44f7af
   \   00000750   B15BFFFF           DC32     0xffff5bb1
   \   00000754   BED75C89           DC32     0x895cd7be
   \   00000758   2211906B           DC32     0x6b901122
   \   0000075C   937198FD           DC32     0xfd987193
   \   00000760   8E4379A6           DC32     0xa679438e
   \   00000764   2108B449           DC32     0x49b40821
   \   00000768   62251EF6           DC32     0xf61e2562
   \   0000076C   40B340C0           DC32     0xc040b340
   \   00000770   515A5E26           DC32     0x265e5a51
   \   00000774   AAC7B6E9           DC32     0xe9b6c7aa
   \   00000778   5D102FD6           DC32     0xd62f105d
   \   0000077C   53144402           DC32     0x2441453
   \   00000780   81E6A1D8           DC32     0xd8a1e681
   \   00000784   C8FBD3E7           DC32     0xe7d3fbc8
   \   00000788   E6CDE121           DC32     0x21e1cde6
   \   0000078C   D60737C3           DC32     0xc33707d6
   \   00000790   870DD5F4           DC32     0xf4d50d87
   \   00000794   ED145A45           DC32     0x455a14ed
   \   00000798   05E9E3A9           DC32     0xa9e3e905
   \   0000079C   F8A3EFFC           DC32     0xfcefa3f8
   \   000007A0   D9026F67           DC32     0x676f02d9
   \   000007A4   8A4C2A8D           DC32     0x8d2a4c8a
   \   000007A8   4239FAFF           DC32     0xfffa3942
   \   000007AC   81F67187           DC32     0x8771f681
   \   000007B0   22619D6D           DC32     0x6d9d6122
   \   000007B4   0C38E5FD           DC32     0xfde5380c
   \   000007B8   44EABEA4           DC32     0xa4beea44
   \   000007BC   A9CFDE4B           DC32     0x4bdecfa9
   \   000007C0   604BBBF6           DC32     0xf6bb4b60
   \   000007C4   70BCBFBE           DC32     0xbebfbc70
   \   000007C8   C67E9B28           DC32     0x289b7ec6
   \   000007CC   FA27A1EA           DC32     0xeaa127fa
   \   000007D0   8530EFD4           DC32     0xd4ef3085
   \   000007D4   051D8804           DC32     0x4881d05
   \   000007D8   39D0D4D9           DC32     0xd9d4d039
   \   000007DC   E599DBE6           DC32     0xe6db99e5
   \   000007E0   F87CA21F           DC32     0x1fa27cf8
   \   000007E4   6556ACC4           DC32     0xc4ac5665
   \   000007E8   442229F4           DC32     0xf4292244
   \   000007EC   97FF2A43           DC32     0x432aff97
   \   000007F0   A72394AB           DC32     0xab9423a7
   \   000007F4   39A093FC           DC32     0xfc93a039
   \   000007F8   C3595B65           DC32     0x655b59c3
   \   000007FC   92CC0C8F           DC32     0x8f0ccc92
   \   00000800   7DF4EFFF           DC32     0xffeff47d
   \   00000804   D15D8485           DC32     0x85845dd1
   \   00000808   4F7EA86F           DC32     0x6fa87e4f
   \   0000080C   E0E62CFE           DC32     0xfe2ce6e0
   \   00000810   144301A3           DC32     0xa3014314
   \   00000814   A111084E           DC32     0x4e0811a1
   \   00000818   827E53F7           DC32     0xf7537e82
   \   0000081C   35F23ABD           DC32     0xbd3af235
   \   00000820   BBD2D72A           DC32     0x2ad7d2bb
   \   00000824   91D386EB           DC32     0xeb86d391
    254          
    255          /**
    256           @brief	Encodes input (INT32U) into output (INT8U). Assumes len is a multiple of 4.
    257           */

   \                                 In section .text, align 2, keep-with-next
    258          static void md5_encode(INT8U *output, INT32U *input, INT32U len)
    259          {
   \                     md5_encode:
   \   00000000   78B4               PUSH     {R3-R6}
    260          	INT32U i, j;
    261          	
    262          	for (i = 0, j = 0; j < len; i++, j += 4)
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   1C46               MOV      R4,R3
   \   00000006   11E0               B.N      ??md5_encode_0
    263          	{
    264          		output[j]     = (INT8U)(input[i] & 0xff);
   \                     ??md5_encode_1:
   \   00000008   51F82350           LDR      R5,[R1, R3, LSL #+2]
   \   0000000C   2554               STRB     R5,[R4, R0]
    265          		output[j + 1] = (INT8U)((input[i] >> 8) & 0xff);
   \   0000000E   2518               ADDS     R5,R4,R0
   \   00000010   51F82360           LDR      R6,[R1, R3, LSL #+2]
   \   00000014   360A               LSRS     R6,R6,#+8
   \   00000016   6E70               STRB     R6,[R5, #+1]
    266          		output[j + 2] = (INT8U)((input[i] >> 16) & 0xff);
   \   00000018   51F82360           LDR      R6,[R1, R3, LSL #+2]
   \   0000001C   360C               LSRS     R6,R6,#+16
   \   0000001E   AE70               STRB     R6,[R5, #+2]
    267          		output[j + 3] = (INT8U)((input[i] >> 24) & 0xff);
   \   00000020   51F82360           LDR      R6,[R1, R3, LSL #+2]
   \   00000024   360E               LSRS     R6,R6,#+24
   \   00000026   EE70               STRB     R6,[R5, #+3]
    268          	}
   \   00000028   5B1C               ADDS     R3,R3,#+1
   \   0000002A   241D               ADDS     R4,R4,#+4
   \                     ??md5_encode_0:
   \   0000002C   9442               CMP      R4,R2
   \   0000002E   EBD3               BCC.N    ??md5_encode_1
    269          }
   \   00000030   71BC               POP      {R0,R4-R6}
   \   00000032   7047               BX       LR               ;; return
    270          
    271          /**
    272           @brief Decodes input (INT8U) into output (INT32U). Assumes len is a multiple of 4.
    273           */

   \                                 In section .text, align 2, keep-with-next
    274          static void md5_decode(INT32U *output, INT8U *input, INT32U len)
    275          {
   \                     md5_decode:
   \   00000000   F0B4               PUSH     {R4-R7}
    276          	INT32U i, j;
    277          	for (i = 0, j = 0; j < len; i++, j += 4)
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   1C46               MOV      R4,R3
   \   00000006   0EE0               B.N      ??md5_decode_0
    278          		output[i] = ((INT32U) input[j]) | (((INT32U) input[j + 1]) << 8) |
    279          				(((INT32U)input[j + 2]) << 16) | (((INT32U)input[j + 3]) << 24);
   \                     ??md5_decode_1:
   \   00000008   6518               ADDS     R5,R4,R1
   \   0000000A   665C               LDRB     R6,[R4, R1]
   \   0000000C   6F78               LDRB     R7,[R5, #+1]
   \   0000000E   46EA0726           ORR      R6,R6,R7, LSL #+8
   \   00000012   AF78               LDRB     R7,[R5, #+2]
   \   00000014   46EA0746           ORR      R6,R6,R7, LSL #+16
   \   00000018   ED78               LDRB     R5,[R5, #+3]
   \   0000001A   46EA0565           ORR      R5,R6,R5, LSL #+24
   \   0000001E   40F82350           STR      R5,[R0, R3, LSL #+2]
   \   00000022   5B1C               ADDS     R3,R3,#+1
   \   00000024   241D               ADDS     R4,R4,#+4
   \                     ??md5_decode_0:
   \   00000026   9442               CMP      R4,R2
   \   00000028   EED3               BCC.N    ??md5_decode_1
    280          }
   \   0000002A   F0BC               POP      {R4-R7}
   \   0000002C   7047               BX       LR               ;; return
    281          

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     FF                16
     GG                16
     HH                16
     II                16
     md5_decode        16
     md5_encode        16
     md5_final         24
     md5_init           0
     md5_transform    120
     md5_update        24
     memcpy             8
     memset             8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     memcpy           12
     memset           20
     padding          64
     FF               34
     GG               36
     HH               30
     II               32
     md5_init         40
     md5_update      114
     md5_final        88
     md5_transform  2088
     md5_encode       52
     md5_decode       46

 
    64 bytes in section .data
 2 592 bytes in section .text
 
 2 560 bytes of CODE memory (+ 32 bytes shared)
    64 bytes of DATA memory

Errors: none
Warnings: none

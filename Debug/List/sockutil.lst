###############################################################################
#                                                                             #
#                                                       16/Jun/2009  22:57:19 #
# IAR ANSI C/C++ Compiler V5.30.2.31295/W32 KICKSTART for ARM                 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Boards\NetWork\util\sockutil.c                        #
#    Command line =  "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\Boards\NetWork\util\sockutil.c" -D                    #
#                    _DLIB_FILE_DESCRIPTOR -lC "F:\MyProjects\Tjinc\CAN &     #
#                    Uart over IP\Debug\List\" -o "F:\MyProjects\Tjinc\CAN &  #
#                    Uart over IP\Debug\Obj\" --no_unroll --no_inline         #
#                    --no_tbaa --no_scheduling --debug --endian=little        #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench 5.4                 #
#                    Kickstart\arm\INC\DLib_Config_Normal.h" -I               #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\Boards\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\uCOS-II\Source\" -I "F:\MyProjects\Tjinc\CAN & Uart   #
#                    over IP\uCOS-II\Ports\arm-cortex-m3\Generic\IAR\" -I     #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\uC-CPU\ARM-Cortex-M3\IAR\" -I                         #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\uC-CPU\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over IP\uC-LIB\" -I      #
#                    "F:\MyProjects\Tjinc\CAN & Uart over                     #
#                    IP\FWLib\library\inc\" -I "F:\MyProjects\Tjinc\CAN &     #
#                    Uart over IP\Boards\BSP\" -I "F:\MyProjects\Tjinc\CAN &  #
#                    Uart over IP\Interrupt\" -I "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4 Kickstart\arm\INC\" -Om   #
#    List file    =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Debug\List\sockutil.lst                               #
#    Object file  =  F:\MyProjects\Tjinc\CAN & Uart over                      #
#                    IP\Debug\Obj\sockutil.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

F:\MyProjects\Tjinc\CAN & Uart over IP\Boards\NetWork\util\sockutil.c
      1          #include <stdio.h>
      2          #include <string.h>

   \                                 In section .text, align 2
   \   __??Code16?? __intrinsic __code __interwork void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0446               MOV      R4,R0
   \   00000004   1046               MOV      R0,R2
   \   00000006   0A46               MOV      R2,R1
   \   00000008   0146               MOV      R1,R0
   \   0000000A   2046               MOV      R0,R4
   \   0000000C   ........           BL       __aeabi_memset
   \   00000010   2046               MOV      R0,R4
   \   00000012   10BD               POP      {R4,PC}          ;; return
      3          
      4          #include "util.h"
      5          #include "sockutil.h"
      6          #include "../w5100/w5100.h"
      7          #include "NetWork/w5100_inter.h"
      8          
      9          
     10          /**
     11          @brief	Convert 32bit Address(Host Ordering) into Dotted Decimal Format
     12          @return 	a char pointer to a static buffer containing the text address in standard ".'' notation. Otherwise, it returns NULL. 
     13          */  

   \                                 In section .text, align 4, keep-with-next
     14          char* inet_ntoa(unsigned long addr)
     15          {
   \                     inet_ntoa:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0446               MOV      R4,R0
     16          	static char addr_str[16];
     17          	memset(addr_str,0,16);
   \   00000004   094D               LDR.N    R5,??inet_ntoa_0  ;; ??addr_str
   \   00000006   1022               MOVS     R2,#+16
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   2846               MOV      R0,R5
   \   0000000C   ........           BL       memset
     18          	sprintf(addr_str,"%d.%d.%d.%d",(int)(addr & 0xFF),(int)(addr>>8 & 0xFF),(int)(addr>>16 & 0xFF),(int)(addr>>24 & 0xFF));
   \   00000010   210E               LSRS     R1,R4,#+24
   \   00000012   200C               LSRS     R0,R4,#+16
   \   00000014   C0B2               UXTB     R0,R0
   \   00000016   03B4               PUSH     {R0,R1}
   \   00000018   200A               LSRS     R0,R4,#+8
   \   0000001A   C3B2               UXTB     R3,R0
   \   0000001C   E2B2               UXTB     R2,R4
   \   0000001E   0449               LDR.N    R1,??inet_ntoa_0+0x4  ;; `?<Constant "%d.%d.%d.%d">`
   \   00000020   2846               MOV      R0,R5
   \   00000022   ........           BL       sprintf
   \   00000026   02B0               ADD      SP,SP,#+8
     19          	return addr_str;
   \   00000028   2846               MOV      R0,R5
   \   0000002A   32BD               POP      {R1,R4,R5,PC}    ;; return
   \                     ??inet_ntoa_0:
   \   0000002C   ........           DC32     ??addr_str
   \   00000030   ........           DC32     `?<Constant "%d.%d.%d.%d">`
     20          }

   \                                 In section .bss, align 4
   \                     ??addr_str:
   \   00000000                      DS8 16
     21          

   \                                 In section .text, align 4, keep-with-next
     22          char* inet_ntoa_pad(unsigned long addr)
     23          {
   \                     inet_ntoa_pad:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0446               MOV      R4,R0
     24          	static char addr_str[16];
     25          	memset(addr_str,0,16);
   \   00000004   094D               LDR.N    R5,??inet_ntoa_pad_0  ;; ??addr_str_1
   \   00000006   1022               MOVS     R2,#+16
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   2846               MOV      R0,R5
   \   0000000C   ........           BL       memset
     26          	sprintf(addr_str,"%03d.%03d.%03d.%03d",(int)(addr & 0xFF),(int)(addr>>8 & 0xFF),(int)(addr>>16 & 0xFF),(int)(addr>>24 & 0xFF));
   \   00000010   210E               LSRS     R1,R4,#+24
   \   00000012   200C               LSRS     R0,R4,#+16
   \   00000014   C0B2               UXTB     R0,R0
   \   00000016   03B4               PUSH     {R0,R1}
   \   00000018   200A               LSRS     R0,R4,#+8
   \   0000001A   C3B2               UXTB     R3,R0
   \   0000001C   E2B2               UXTB     R2,R4
   \   0000001E   0449               LDR.N    R1,??inet_ntoa_pad_0+0x4  ;; `?<Constant "%03d.%03d.%03d.%03d">`
   \   00000020   2846               MOV      R0,R5
   \   00000022   ........           BL       sprintf
   \   00000026   02B0               ADD      SP,SP,#+8
     27          	return addr_str;
   \   00000028   2846               MOV      R0,R5
   \   0000002A   32BD               POP      {R1,R4,R5,PC}    ;; return
   \                     ??inet_ntoa_pad_0:
   \   0000002C   ........           DC32     ??addr_str_1
   \   00000030   ........           DC32     `?<Constant "%03d.%03d.%03d.%03d">`
     28          }

   \                                 In section .bss, align 4
   \                     ??addr_str_1:
   \   00000000                      DS8 16
     29          
     30          /**
     31          @brief	Converts a string containing an (Ipv4) Internet Protocol decimal dotted address into a 32bit address 
     32          @return 	32bit address (Host Odering)
     33          */  

   \                                 In section .text, align 4, keep-with-next
     34          unsigned long inet_addr(unsigned char* addr)  /**< dotted notation address string.  */
     35          {
   \                     inet_addr:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   89B0               SUB      SP,SP,#+36
   \   00000004   0146               MOV      R1,R0
     36              char i;
     37              unsigned long inetaddr = 0;
   \   00000006   0024               MOVS     R4,#+0
     38              char taddr[30];
     39              char * nexttok;
     40              int num;
     41              strcpy(taddr,(char*)addr);
   \   00000008   00A8               ADD      R0,SP,#+0
   \   0000000A   ........           BL       strcpy
     42          	
     43              nexttok = taddr;
   \   0000000E   00A8               ADD      R0,SP,#+0
     44              for(i = 0; i < 4 ; i++){
   \   00000010   2546               MOV      R5,R4
   \   00000012   08E0               B.N      ??inet_addr_0
     45          	nexttok = strtok(nexttok,".");
     46          	if(nexttok[0] == '0' && nexttok[1] == 'x') 
     47              	num = ATOI(nexttok+2,0x10);
     48          	else 
     49                  num = ATOI(nexttok,10);
   \                     ??inet_addr_1:
   \   00000014   0A21               MOVS     R1,#+10
   \   00000016   ........           BL       ATOI
     50                  inetaddr |= (num << i*8);   // 2008.05.27 in BA3CE
   \                     ??inet_addr_2:
   \   0000001A   E900               LSLS     R1,R5,#+3
   \   0000001C   8840               LSLS     R0,R0,R1
   \   0000001E   0443               ORRS     R4,R0,R4
     51          	    nexttok = NULL;
   \   00000020   0020               MOVS     R0,#+0
   \   00000022   6D1C               ADDS     R5,R5,#+1
   \   00000024   EDB2               UXTB     R5,R5
   \                     ??inet_addr_0:
   \   00000026   2946               MOV      R1,R5
   \   00000028   0429               CMP      R1,#+4
   \   0000002A   0DD2               BCS.N    ??inet_addr_3
   \   0000002C   08A1               ADR.N    R1,??inet_addr_4  ;; "."
   \   0000002E   ........           BL       strtok
   \   00000032   0178               LDRB     R1,[R0, #+0]
   \   00000034   3029               CMP      R1,#+48
   \   00000036   EDD1               BNE.N    ??inet_addr_1
   \   00000038   4178               LDRB     R1,[R0, #+1]
   \   0000003A   7829               CMP      R1,#+120
   \   0000003C   EAD1               BNE.N    ??inet_addr_1
   \   0000003E   1021               MOVS     R1,#+16
   \   00000040   801C               ADDS     R0,R0,#+2
   \   00000042   ........           BL       ATOI
   \   00000046   E8E7               B.N      ??inet_addr_2
     52          	}
     53          	return inetaddr;	
   \                     ??inet_addr_3:
   \   00000048   2046               MOV      R0,R4
   \   0000004A   09B0               ADD      SP,SP,#+36
   \   0000004C   30BD               POP      {R4,R5,PC}       ;; return
   \   0000004E   00BF               Nop      
   \                     ??inet_addr_4:
   \   00000050   2E000000           DC8      ".",+0,+0
     54          }	
     55          
     56          
     57          /**
     58          @brief	Verify dotted notation IP address string
     59          @return 	success - 1, fail - 0
     60          */ 

   \                                 In section .text, align 4, keep-with-next
     61          char VerifyIPAddress(char* src)	/**< pointer to IP address string */
     62          {
   \                     VerifyIPAddress:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   8FB0               SUB      SP,SP,#+60
     63          	int i;
     64          	int tnum;
     65          	char tsrc[50];
     66          	char* tok = tsrc;
   \   00000004   01AD               ADD      R5,SP,#+4
     67          	
     68          	strcpy(tsrc,src);
   \   00000006   0146               MOV      R1,R0
   \   00000008   01A8               ADD      R0,SP,#+4
   \   0000000A   ........           BL       strcpy
     69          	
     70          	for(i = 0; i < 4; i++)
   \   0000000E   0024               MOVS     R4,#+0
   \   00000010   0DE0               B.N      ??VerifyIPAddress_0
     71          	{
     72          		tok = strtok(tok,".");
     73          		if ( !tok ) 
     74          			return 0;
     75          		if(tok[0] == '0' && tok[1] == 'x')
     76          		{
     77          			if(!ValidATOI(tok+2,0x10,&tnum)) 
     78          			  	return 0;
     79          		}
     80          		else if(!ValidATOI(tok,10,&tnum)) 
   \                     ??VerifyIPAddress_1:
   \   00000012   00AA               ADD      R2,SP,#+0
   \   00000014   0A21               MOVS     R1,#+10
   \   00000016   2846               MOV      R0,R5
   \   00000018   ........           BL       ValidATOI
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   0ED0               BEQ.N    ??VerifyIPAddress_2
     81          			return 0;
     82          		
     83          		if(tnum < 0 || tnum > 255) 
   \                     ??VerifyIPAddress_3:
   \   00000020   0098               LDR      R0,[SP, #+0]
   \   00000022   0028               CMP      R0,#+0
   \   00000024   0BD4               BMI.N    ??VerifyIPAddress_2
   \   00000026   FF28               CMP      R0,#+255
   \   00000028   09DC               BGT.N    ??VerifyIPAddress_2
     84          			return 0;
     85          		tok = NULL;
   \   0000002A   0025               MOVS     R5,#+0
   \   0000002C   641C               ADDS     R4,R4,#+1
   \                     ??VerifyIPAddress_0:
   \   0000002E   042C               CMP      R4,#+4
   \   00000030   16DA               BGE.N    ??VerifyIPAddress_4
   \   00000032   0DA1               ADR.N    R1,??VerifyIPAddress_5  ;; "."
   \   00000034   2846               MOV      R0,R5
   \   00000036   ........           BL       strtok
   \   0000003A   0500               MOVS     R5,R0
   \   0000003C   02D1               BNE.N    ??VerifyIPAddress_6
   \                     ??VerifyIPAddress_2:
   \   0000003E   0020               MOVS     R0,#+0
   \   00000040   0FB0               ADD      SP,SP,#+60
   \   00000042   30BD               POP      {R4,R5,PC}
   \                     ??VerifyIPAddress_6:
   \   00000044   2878               LDRB     R0,[R5, #+0]
   \   00000046   3028               CMP      R0,#+48
   \   00000048   E3D1               BNE.N    ??VerifyIPAddress_1
   \   0000004A   6878               LDRB     R0,[R5, #+1]
   \   0000004C   7828               CMP      R0,#+120
   \   0000004E   E0D1               BNE.N    ??VerifyIPAddress_1
   \   00000050   00AA               ADD      R2,SP,#+0
   \   00000052   1021               MOVS     R1,#+16
   \   00000054   A81C               ADDS     R0,R5,#+2
   \   00000056   ........           BL       ValidATOI
   \   0000005A   0028               CMP      R0,#+0
   \   0000005C   E0D1               BNE.N    ??VerifyIPAddress_3
   \   0000005E   EEE7               B.N      ??VerifyIPAddress_2
     86          	}
     87          	return 1;	
   \                     ??VerifyIPAddress_4:
   \   00000060   0120               MOVS     R0,#+1
   \   00000062   0FB0               ADD      SP,SP,#+60
   \   00000064   30BD               POP      {R4,R5,PC}       ;; return
   \   00000066   00BF               Nop      
   \                     ??VerifyIPAddress_5:
   \   00000068   2E000000           DC8      ".",+0,+0
     88          }
     89          
     90          
     91          /**
     92          @brief	Output destination IP address of appropriate channel
     93          @return 	32bit destination address (Host Ordering)
     94          */ 

   \                                 In section .text, align 2, keep-with-next
     95          unsigned long GetDestAddr(
     96          	SOCKET s	/**< Channel number which try to get destination IP Address */
     97          	)
     98          {
   \                     GetDestAddr:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0446               MOV      R4,R0
     99          	unsigned long addr=0;
   \   00000004   0025               MOVS     R5,#+0
    100          	int i = 0;
    101          	for(i=0; i < 4; i++)
   \   00000006   2E46               MOV      R6,R5
   \   00000008   09E0               B.N      ??GetDestAddr_0
    102          	{
    103          		addr <<=8;
    104          		addr += IINCHIP_READ(Sn_DIPR0(s)+i);
   \                     ??GetDestAddr_1:
   \   0000000A   06EB0420           ADD      R0,R6,R4, LSL #+8
   \   0000000E   00F20C40           ADDW     R0,R0,#+1036
   \   00000012   80B2               UXTH     R0,R0
   \   00000014   ........           BL       IINCHIP_READ
   \   00000018   00EB0525           ADD      R5,R0,R5, LSL #+8
    105          	}
   \   0000001C   761C               ADDS     R6,R6,#+1
   \                     ??GetDestAddr_0:
   \   0000001E   042E               CMP      R6,#+4
   \   00000020   F3DB               BLT.N    ??GetDestAddr_1
    106          	return addr;
   \   00000022   2846               MOV      R0,R5
   \   00000024   70BD               POP      {R4-R6,PC}       ;; return
    107          }
    108          
    109          /**
    110          @brief	Output destination port number of appropriate channel
    111          @return 	16bit destination port number
    112          */ 

   \                                 In section .text, align 2, keep-with-next
    113          unsigned int GetDestPort(
    114          	SOCKET s	/**< Channel number which try to get destination port */
    115          	)
    116          {
   \                     GetDestPort:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    117          	unsigned int port;
    118          	port = ((unsigned int) IINCHIP_READ(Sn_DPORT0(s))) & 0x00FF;
   \   00000002   0402               LSLS     R4,R0,#+8
   \   00000004   04F58260           ADD      R0,R4,#+1040
   \   00000008   80B2               UXTH     R0,R0
   \   0000000A   ........           BL       IINCHIP_READ
   \   0000000E   0546               MOV      R5,R0
    119          	port <<= 8;
    120          	port += ((unsigned int) IINCHIP_READ(Sn_DPORT0(s)+1)) & 0x00FF;
   \   00000010   04F21140           ADDW     R0,R4,#+1041
   \   00000014   80B2               UXTH     R0,R0
   \   00000016   ........           BL       IINCHIP_READ
   \   0000001A   00EB0520           ADD      R0,R0,R5, LSL #+8
    121          	return port;
   \   0000001E   32BD               POP      {R1,R4,R5,PC}    ;; return
    122          }
    123          
    124          
    125          /**
    126          @brief	htons function converts a unsigned short from host to TCP/IP network byte order (which is big-endian).
    127          @return 	the value in TCP/IP network byte order
    128          */ 

   \                                 In section .text, align 2, keep-with-next
    129          unsigned short htons( 
    130          	unsigned short hostshort	/**< A 16-bit number in host byte order.  */
    131          	)
    132          {
    133          #if ( SYSTEM_ENDIAN == _ENDIAN_LITTLE_ )
    134          	return swaps(hostshort);
   \                     htons:
   \   00000000   ........           B.W      swaps
    135          #else
    136          	return hostshort;
    137          #endif		
    138          }
    139          
    140          
    141          /**
    142          @brief	htonl function converts a unsigned long from host to TCP/IP network byte order (which is big-endian).
    143          @return 	the value in TCP/IP network byte order
    144          */ 

   \                                 In section .text, align 2, keep-with-next
    145          unsigned long htonl(
    146          	unsigned long hostlong		/**< hostshort  - A 32-bit number in host byte order.  */
    147          	)
    148          {
    149          #if ( SYSTEM_ENDIAN == _ENDIAN_LITTLE_ )
    150          	return swapl(hostlong);
   \                     htonl:
   \   00000000   ........           B.W      swapl
    151          #else
    152          	return hostlong;
    153          #endif	
    154          }
    155          
    156          
    157          /**
    158          @brief	ntohs function converts a unsigned short from TCP/IP network byte order to host byte order (which is little-endian on Intel processors).
    159          @return 	a 16-bit number in host byte order
    160          */ 

   \                                 In section .text, align 2, keep-with-next
    161          unsigned long ntohs(
    162          	unsigned short netshort	/**< netshort - network odering 16bit value */
    163          	)
    164          {
    165          #if ( SYSTEM_ENDIAN == _ENDIAN_LITTLE_ )	
    166          	return htons(netshort);
   \                     ntohs:
   \   00000000   ....               B.N      htons
    167          #else
    168          	return netshort;
    169          #endif		
    170          }
    171          
    172          
    173          /**
    174          @brief	converts a unsigned long from TCP/IP network byte order to host byte order (which is little-endian on Intel processors).
    175          @return 	a 16-bit number in host byte order
    176          */ 

   \                                 In section .text, align 2, keep-with-next
    177          unsigned long ntohl(unsigned long netlong)
    178          {
    179          #if ( SYSTEM_ENDIAN == _ENDIAN_LITTLE_ )
    180          	return htonl(netlong);
   \                     ntohl:
   \   00000000   ....               B.N      htonl
    181          #else
    182          	return netlong;
    183          #endif		
    184          }
    185          
    186          // destip : BigEndian

   \                                 In section .text, align 2, keep-with-next
    187          unsigned char CheckDestInLocal(unsigned long destip)
    188          {
   \                     CheckDestInLocal:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    189          	int i = 0;
    190          	unsigned char * pdestip = (unsigned char*)&destip;
    191          	for(i =0; i < 4; i++)
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   00E0               B.N      ??CheckDestInLocal_0
   \                     ??CheckDestInLocal_1:
   \   00000006   641C               ADDS     R4,R4,#+1
   \                     ??CheckDestInLocal_0:
   \   00000008   042C               CMP      R4,#+4
   \   0000000A   17DA               BGE.N    ??CheckDestInLocal_2
    192          	{
    193          		if((pdestip[i] & IINCHIP_READ(SUBR0+i)) != (IINCHIP_READ(SIPR0+i) & IINCHIP_READ(SUBR0+i)))
   \   0000000C   651D               ADDS     R5,R4,#+5
   \   0000000E   2846               MOV      R0,R5
   \   00000010   80B2               UXTH     R0,R0
   \   00000012   ........           BL       IINCHIP_READ
   \   00000016   0646               MOV      R6,R0
   \   00000018   04F10F00           ADD      R0,R4,#+15
   \   0000001C   80B2               UXTH     R0,R0
   \   0000001E   ........           BL       IINCHIP_READ
   \   00000022   0746               MOV      R7,R0
   \   00000024   00A8               ADD      R0,SP,#+0
   \   00000026   205C               LDRB     R0,[R4, R0]
   \   00000028   0640               ANDS     R6,R6,R0
   \   0000002A   2846               MOV      R0,R5
   \   0000002C   80B2               UXTH     R0,R0
   \   0000002E   ........           BL       IINCHIP_READ
   \   00000032   3840               ANDS     R0,R0,R7
   \   00000034   8642               CMP      R6,R0
   \   00000036   E6D0               BEQ.N    ??CheckDestInLocal_1
    194          			return 1;	// Remote
   \   00000038   0120               MOVS     R0,#+1
   \   0000003A   F2BD               POP      {R1,R4-R7,PC}
    195          	}
    196          	return 0;
   \                     ??CheckDestInLocal_2:
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   F2BD               POP      {R1,R4-R7,PC}    ;; return
    197          }
    198          
    199          
    200          /**
    201          @brief	Get handle of socket which status is same to 'status'
    202          @return 	socket number
    203          */ 

   \                                 In section .text, align 2, keep-with-next
    204          SOCKET getSocket(
    205          	unsigned char status, 	/**< socket's status to be found */
    206          	SOCKET start			/**< base of socket to be found */
    207          	)
    208          {
   \                     getSocket:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0546               MOV      R5,R0
   \   00000004   0C46               MOV      R4,R1
    209          	SOCKET i;
    210          	if(start > 3) start = 0;
   \   00000006   042C               CMP      R4,#+4
   \   00000008   03D3               BCC.N    ??getSocket_0
   \   0000000A   0024               MOVS     R4,#+0
    211          
    212          	for(i = start; i < MAX_SOCK_NUM ; i++) if( getSn_SR(i)==status ) return i;
   \   0000000C   01E0               B.N      ??getSocket_0
   \                     ??getSocket_1:
   \   0000000E   641C               ADDS     R4,R4,#+1
   \   00000010   E4B2               UXTB     R4,R4
   \                     ??getSocket_0:
   \   00000012   2046               MOV      R0,R4
   \   00000014   0428               CMP      R0,#+4
   \   00000016   05D2               BCS.N    ??getSocket_2
   \   00000018   ........           BL       getSn_SR
   \   0000001C   A842               CMP      R0,R5
   \   0000001E   F6D1               BNE.N    ??getSocket_1
   \   00000020   2046               MOV      R0,R4
   \   00000022   32BD               POP      {R1,R4,R5,PC}
    213          	return MAX_SOCK_NUM;	
   \                     ??getSocket_2:
   \   00000024   0420               MOVS     R0,#+4
   \   00000026   32BD               POP      {R1,R4,R5,PC}    ;; return
    214          }
    215          
    216          
    217          /**
    218          @brief	Calculate checksum of a stream
    219          @return 	checksum
    220          */ 

   \                                 In section .text, align 2, keep-with-next
    221          unsigned short checksum(
    222          	unsigned char * src, 	/**< pointer to stream  */
    223          	unsigned int len		/**< size of stream */
    224          	)
    225          {
   \                     checksum:
   \   00000000   78B4               PUSH     {R3-R6}
    226          	unsigned int sum, tsum, i, j;
    227          	unsigned long lsum;
    228          
    229          	j = len >> 1;
   \   00000002   4A08               LSRS     R2,R1,#+1
    230          
    231          	lsum = 0;
   \   00000004   0023               MOVS     R3,#+0
    232          
    233          	for (i = 0; i < j; i++) 
   \   00000006   1C46               MOV      R4,R3
   \   00000008   07E0               B.N      ??checksum_0
   \                     ??checksum_1:
   \   0000000A   6500               LSLS     R5,R4,#+1
   \   0000000C   2E5C               LDRB     R6,[R5, R0]
   \   0000000E   2D18               ADDS     R5,R5,R0
   \   00000010   6D78               LDRB     R5,[R5, #+1]
   \   00000012   05EB0625           ADD      R5,R5,R6, LSL #+8
   \   00000016   EB18               ADDS     R3,R5,R3
    234          	{
    235          		tsum = src[i * 2];
    236          		tsum = tsum << 8;
    237          		tsum += src[i * 2 + 1];
    238          		lsum += tsum;
   \   00000018   641C               ADDS     R4,R4,#+1
   \                     ??checksum_0:
   \   0000001A   9442               CMP      R4,R2
   \   0000001C   F5D3               BCC.N    ??checksum_1
    239          	}
    240          
    241          	if (len % 2) 
   \   0000001E   11F0010F           TST      R1,#0x1
   \   00000022   03D0               BEQ.N    ??checksum_2
    242          	{
    243          		tsum = src[i * 2];
    244          		lsum += (tsum << 8);
   \   00000024   10F81400           LDRB     R0,[R0, R4, LSL #+1]
   \   00000028   03EB0023           ADD      R3,R3,R0, LSL #+8
    245          	}
    246          
    247          
    248          	sum = lsum;
    249          	sum = ~(sum + (lsum >> 16));
    250          	return (unsigned short) sum;	
   \                     ??checksum_2:
   \   0000002C   03EB1340           ADD      R0,R3,R3, LSR #+16
   \   00000030   C043               MVNS     R0,R0
   \   00000032   80B2               UXTH     R0,R0
   \   00000034   72BC               POP      {R1,R4-R6}
   \   00000036   7047               BX       LR               ;; return
    251          }

   \                                 In section .rodata, align 4
   \                     `?<Constant "%d.%d.%d.%d">`:
   \   00000000   25642E25642E       DC8 "%d.%d.%d.%d"
   \              25642E256400

   \                                 In section .rodata, align 4
   \                     `?<Constant "%03d.%03d.%03d.%03d">`:
   \   00000000   253033642E25       DC8 "%03d.%03d.%03d.%03d"
   \              3033642E2530
   \              33642E253033
   \              6400        

   \                                 In section .rodata, align 2
   \   00000000   2E00               DC8 "."
    252          
    253          
    254          
    255          #ifndef NO_USE_SOCKUTIL_FUNC
    256          /**
    257          @brief	Get Source IP Address of iinChip.
    258          @return 	Source IP Address(32bit Address-Host Ordering)
    259          */ 
    260          unsigned long GetIPAddress(void)
    261          {
    262          	unsigned long ip=0;
    263          	int i;
    264          	for(i=0; i < 4; i++)
    265          	{
    266          		ip <<= 8;
    267          		ip += (char)IINCHIP_READ(SIPR0+i);
    268          	}
    269          	return ip;
    270          }
    271          
    272          
    273          /**
    274          @brief	Get Gateway IP Address of iinChip.
    275          @return 	Gateway IP Address(32bit Address-Host Ordering)
    276          */ 
    277          unsigned long GetGWAddress(void)
    278          {
    279          	unsigned long ip=0;
    280          	int i;
    281          	for(i=0; i < 4; i++)
    282          	{
    283          		ip <<= 8;
    284          		ip += (char)IINCHIP_READ(GAR0+i);
    285          	}
    286          	return ip;	
    287          }
    288          
    289          
    290          /**
    291          @brief	Get Subnet mask of iinChip.
    292          @return 	Subnet Mask(32bit Address-Host Ordering)
    293          */ 
    294          unsigned long GetSubMask(void)
    295          {
    296          	unsigned long ip=0;
    297          	int i;
    298          	for(i=0; i < 4; i++)
    299          	{
    300          		ip <<= 8;
    301          		ip += (char)IINCHIP_READ(SUBR0+i);
    302          	}
    303          	return ip;	
    304          }
    305          
    306          
    307          /**
    308          @brief	Get Mac Address of iinChip.
    309          @return 	Subnet Mask(32bit Address-Host Ordering)
    310          */ 
    311          void GetMacAddress(
    312          	unsigned char* mac	/**< Pointer to store Mac Address(48bit Address)(INPUT, OUTPUT) */
    313          	)
    314          {
    315          	int i = 0;
    316          	for(i=0; i<6;i++)*mac++ = IINCHIP_READ(SHAR0+i);
    317          }
    318          
    319          void GetDestMacAddr(SOCKET s, unsigned char* mac)
    320          {
    321          	int i = 0;
    322          	for(i=0; i<6;i++)*mac++ = IINCHIP_READ(Sn_DHAR0(s)+i);
    323          }
    324          
    325          
    326          /**
    327          @brief	Read established network information(G/W, IP, S/N, Mac) of iinChip and Output that through Serial.
    328          		Mac Address is output into format of Dotted HexaDecimal.Others are output into format of Dotted Decimal Format.
    329          */ 
    330          void GetNetConfig(void)
    331          {
    332          	unsigned char addr[6];
    333          	unsigned long iaddr;
    334          	printf("\r\n================================================\r\n");
    335          	printf("       Net Config Information\r\n");
    336          	printf("================================================\r\n");
    337          	GetMacAddress(addr);
    338          	printf("MAC ADDRESS      : 0x%02X.0x%02X.0x%02X.0x%02X.0x%02X.0x%02X\r\n",addr[0],addr[1],addr[2],addr[3],addr[4],addr[5]);
    339          	
    340          	iaddr = GetSubMask();
    341          	printf("SUBNET MASK      : %s\r\n",inet_ntoa(iaddr));
    342          
    343          	iaddr = GetGWAddress();
    344          	printf("G/W IP ADDRESS   : %s\r\n",inet_ntoa(iaddr));
    345          
    346          	iaddr = GetIPAddress();
    347          	printf("LOCAL IP ADDRESS : %s\r\n",inet_ntoa(iaddr));
    348          	printf("================================================\r\n");		
    349          }
    350          
    351          #endif
    352          

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     CheckDestInLocal     24
     GetDestAddr          16
     GetDestPort          16
     VerifyIPAddress      72
     checksum             16
     getSocket            16
     htonl                 8
     htons                 8
     inet_addr            48
     inet_ntoa            24
     inet_ntoa_pad        24
     memset                8
     ntohl                 8
     ntohs                 8


   Section sizes:

     Function/Label                    Bytes
     --------------                    -----
     memset                              20
     inet_ntoa                           52
     addr_str                            16
     inet_ntoa_pad                       52
     addr_str                            16
     inet_addr                           84
     VerifyIPAddress                    108
     GetDestAddr                         38
     GetDestPort                         32
     htons                                4
     htonl                                4
     ntohs                                2
     ntohl                                2
     CheckDestInLocal                    64
     getSocket                           40
     checksum                            56
     ?<Constant "%d.%d.%d.%d">           12
     ?<Constant "%03d.%03d.%03d.%03d">   20
     ?<Constant ".">                      2

 
  32 bytes in section .bss
  34 bytes in section .rodata
 558 bytes in section .text
 
 538 bytes of CODE  memory (+ 20 bytes shared)
  34 bytes of CONST memory
  32 bytes of DATA  memory

Errors: none
Warnings: none
